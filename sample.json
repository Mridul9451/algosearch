[
    {
        "URL": "https://leetcode.com/problems/minimum-moves-to-equal-array-elements-ii/",
        "Title": "Minimum Moves to Equal Array Elements II ",
        "Description": "b'Given an integer array nums of size n, return the minimum number of moves required to make all array elements equal.\\nIn one move, you can increment or decrement an element of the array by 1.\\nTest cases are designed so that the answer will fit in a 32-bit integer.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,2,3]\\nOutput: 2\\nExplanation:\\nOnly two moves are needed (remember each move increments or decrements one element):\\n[1,2,3]  =>  [2,2,3]  =>  [2,2,2]\\n\\nExample 2:\\nInput: nums = [1,10,2,9]\\nOutput: 16\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == nums.length\\n1 <= nums.length <= 105\\n-109 <= nums[i] <= 109\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/two-sum",
        "Title": "Two Sum ",
        "Description": "b'Given an array of integers nums\\xc2\\xa0and an integer target, return indices of the two numbers such that they add up to target.\\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\\nYou can return the answer in any order.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [2,7,11,15], target = 9\\nOutput: [0,1]\\nExplanation: Because nums[0] + nums[1] == 9, we return [0, 1].\\n\\nExample 2:\\nInput: nums = [3,2,4], target = 6\\nOutput: [1,2]\\n\\nExample 3:\\nInput: nums = [3,3], target = 6\\nOutput: [0,1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n2 <= nums.length <= 104\\n-109 <= nums[i] <= 109\\n-109 <= target <= 109\\nOnly one valid answer exists.\\n\\n\\xc2\\xa0\\nFollow-up:\\xc2\\xa0Can you come up with an algorithm that is less than\\xc2\\xa0O(n2)\\xc2\\xa0time complexity?'"
    },
    {
        "URL": "https://leetcode.com/problems/add-two-numbers",
        "Title": "Add Two Numbers ",
        "Description": "b'You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum\\xc2\\xa0as a linked list.\\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: l1 = [2,4,3], l2 = [5,6,4]\\nOutput: [7,0,8]\\nExplanation: 342 + 465 = 807.\\n\\nExample 2:\\nInput: l1 = [0], l2 = [0]\\nOutput: [0]\\n\\nExample 3:\\nInput: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\\nOutput: [8,9,9,9,0,0,0,1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in each linked list is in the range [1, 100].\\n0 <= Node.val <= 9\\nIt is guaranteed that the list represents a number that does not have leading zeros.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/longest-substring-without-repeating-characters",
        "Title": "Longest Substring Without Repeating Characters ",
        "Description": "b'Given a string s, find the length of the longest substring without repeating characters.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"abcabcbb\"\\nOutput: 3\\nExplanation: The answer is \"abc\", with the length of 3.\\n\\nExample 2:\\nInput: s = \"bbbbb\"\\nOutput: 1\\nExplanation: The answer is \"b\", with the length of 1.\\n\\nExample 3:\\nInput: s = \"pwwkew\"\\nOutput: 3\\nExplanation: The answer is \"wke\", with the length of 3.\\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= s.length <= 5 * 104\\ns consists of English letters, digits, symbols and spaces.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/median-of-two-sorted-arrays",
        "Title": "Median of Two Sorted Arrays ",
        "Description": "b'Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\\nThe overall run time complexity should be O(log (m+n)).\\n\\xc2\\xa0\\nExample 1:\\nInput: nums1 = [1,3], nums2 = [2]\\nOutput: 2.00000\\nExplanation: merged array = [1,2,3] and median is 2.\\n\\nExample 2:\\nInput: nums1 = [1,2], nums2 = [3,4]\\nOutput: 2.50000\\nExplanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nnums1.length == m\\nnums2.length == n\\n0 <= m <= 1000\\n0 <= n <= 1000\\n1 <= m + n <= 2000\\n-106 <= nums1[i], nums2[i] <= 106\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/longest-palindromic-substring",
        "Title": "Longest Palindromic Substring ",
        "Description": "b'Given a string s, return the longest palindromic substring in s.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"babad\"\\nOutput: \"bab\"\\nExplanation: \"aba\" is also a valid answer.\\n\\nExample 2:\\nInput: s = \"cbbd\"\\nOutput: \"bb\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 1000\\ns consist of only digits and English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/zigzag-conversion",
        "Title": "Zigzag Conversion ",
        "Description": "b'The string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\\nP   A   H   N\\nA P L S I I G\\nY   I   R\\n\\nAnd then read line by line: \"PAHNAPLSIIGYIR\"\\nWrite the code that will take a string and make this conversion given a number of rows:\\nstring convert(string s, int numRows);\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"PAYPALISHIRING\", numRows = 3\\nOutput: \"PAHNAPLSIIGYIR\"\\n\\nExample 2:\\nInput: s = \"PAYPALISHIRING\", numRows = 4\\nOutput: \"PINALSIGYAHRPI\"\\nExplanation:\\nP     I    N\\nA   L S  I G\\nY A   H R\\nP     I\\n\\nExample 3:\\nInput: s = \"A\", numRows = 1\\nOutput: \"A\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 1000\\ns consists of English letters (lower-case and upper-case), \\',\\' and \\'.\\'.\\n1 <= numRows <= 1000\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/reverse-integer",
        "Title": "Reverse Integer ",
        "Description": "b'Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned).\\n\\xc2\\xa0\\nExample 1:\\nInput: x = 123\\nOutput: 321\\n\\nExample 2:\\nInput: x = -123\\nOutput: -321\\n\\nExample 3:\\nInput: x = 120\\nOutput: 21\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n-231 <= x <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/string-to-integer-atoi",
        "Title": "String to Integer (atoi) ",
        "Description": "b'Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++\\'s atoi function).\\nThe algorithm for myAtoi(string s) is as follows:\\n\\nRead in and ignore any leading whitespace.\\nCheck if the next character (if not already at the end of the string) is \\'-\\' or \\'+\\'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\\nRead in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\\nConvert these digits into an integer (i.e. \"123\" -> 123, \"0032\" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).\\nIf the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1.\\nReturn the integer as the final result.\\n\\nNote:\\n\\nOnly the space character \\' \\' is considered a whitespace character.\\nDo not ignore any characters other than the leading whitespace or the rest of the string after the digits.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"42\"\\nOutput: 42\\nExplanation: The underlined characters are what is read in, the caret is the current reader position.\\nStep 1: \"42\" (no characters read because there is no leading whitespace)\\n         ^\\nStep 2: \"42\" (no characters read because there is neither a \\'-\\' nor \\'+\\')\\n         ^\\nStep 3: \"42\" (\"42\" is read in)\\n           ^\\nThe parsed integer is 42.\\nSince 42 is in the range [-231, 231 - 1], the final result is 42.\\n\\nExample 2:\\nInput: s = \"   -42\"\\nOutput: -42\\nExplanation:\\nStep 1: \"   -42\" (leading whitespace is read and ignored)\\n            ^\\nStep 2: \"   -42\" (\\'-\\' is read, so the result should be negative)\\n             ^\\nStep 3: \"   -42\" (\"42\" is read in)\\n               ^\\nThe parsed integer is -42.\\nSince -42 is in the range [-231, 231 - 1], the final result is -42.\\n\\nExample 3:\\nInput: s = \"4193 with words\"\\nOutput: 4193\\nExplanation:\\nStep 1: \"4193 with words\" (no characters read because there is no leading whitespace)\\n         ^\\nStep 2: \"4193 with words\" (no characters read because there is neither a \\'-\\' nor \\'+\\')\\n         ^\\nStep 3: \"4193 with words\" (\"4193\" is read in; reading stops because the next character is a non-digit)\\n             ^\\nThe parsed integer is 4193.\\nSince 4193 is in the range [-231, 231 - 1], the final result is 4193.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= s.length <= 200\\ns consists of English letters (lower-case and upper-case), digits (0-9), \\' \\', \\'+\\', \\'-\\', and \\'.\\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/palindrome-number",
        "Title": "Palindrome Number ",
        "Description": "b'Given an integer x, return true if x is palindrome integer.\\nAn integer is a palindrome when it reads the same backward as forward.\\n\\nFor example, 121 is a palindrome while 123 is not.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: x = 121\\nOutput: true\\nExplanation: 121 reads as 121 from left to right and from right to left.\\n\\nExample 2:\\nInput: x = -121\\nOutput: false\\nExplanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\\n\\nExample 3:\\nInput: x = 10\\nOutput: false\\nExplanation: Reads 01 from right to left. Therefore it is not a palindrome.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n-231\\xc2\\xa0<= x <= 231\\xc2\\xa0- 1\\n\\n\\xc2\\xa0\\nFollow up: Could you solve it without converting the integer to a string?'"
    },
    {
        "URL": "https://leetcode.com/problems/regular-expression-matching",
        "Title": "Regular Expression Matching ",
        "Description": "b'Given an input string s\\xc2\\xa0and a pattern p, implement regular expression matching with support for \\'.\\' and \\'*\\' where:\\n\\n\\'.\\' Matches any single character.\\xe2\\x80\\x8b\\xe2\\x80\\x8b\\xe2\\x80\\x8b\\xe2\\x80\\x8b\\n\\'*\\' Matches zero or more of the preceding element.\\n\\nThe matching should cover the entire input string (not partial).\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"aa\", p = \"a\"\\nOutput: false\\nExplanation: \"a\" does not match the entire string \"aa\".\\n\\nExample 2:\\nInput: s = \"aa\", p = \"a*\"\\nOutput: true\\nExplanation: \\'*\\' means zero or more of the preceding element, \\'a\\'. Therefore, by repeating \\'a\\' once, it becomes \"aa\".\\n\\nExample 3:\\nInput: s = \"ab\", p = \".*\"\\nOutput: true\\nExplanation: \".*\" means \"zero or more (*) of any character (.)\".\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length\\xc2\\xa0<= 20\\n1 <= p.length\\xc2\\xa0<= 30\\ns contains only lowercase English letters.\\np contains only lowercase English letters, \\'.\\', and\\xc2\\xa0\\'*\\'.\\nIt is guaranteed for each appearance of the character \\'*\\', there will be a previous valid character to match.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/container-with-most-water",
        "Title": "Container With Most Water ",
        "Description": "b'You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).\\nFind two lines that together with the x-axis form a container, such that the container contains the most water.\\nReturn the maximum amount of water a container can store.\\nNotice that you may not slant the container.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: height = [1,8,6,2,5,4,8,3,7]\\nOutput: 49\\nExplanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.\\n\\nExample 2:\\nInput: height = [1,1]\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == height.length\\n2 <= n <= 105\\n0 <= height[i] <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/integer-to-roman",
        "Title": "Integer to Roman ",
        "Description": "b'Roman numerals are represented by seven different symbols:\\xc2\\xa0I, V, X, L, C, D and M.\\nSymbol       Value\\nI             1\\nV             5\\nX             10\\nL             50\\nC             100\\nD             500\\nM             1000\\nFor example,\\xc2\\xa02 is written as II\\xc2\\xa0in Roman numeral, just two one\\'s added together. 12 is written as\\xc2\\xa0XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\\n\\nI can be placed before V (5) and X (10) to make 4 and 9.\\xc2\\xa0\\nX can be placed before L (50) and C (100) to make 40 and 90.\\xc2\\xa0\\nC can be placed before D (500) and M (1000) to make 400 and 900.\\n\\nGiven an integer, convert it to a roman numeral.\\n\\xc2\\xa0\\nExample 1:\\nInput: num = 3\\nOutput: \"III\"\\nExplanation: 3 is represented as 3 ones.\\n\\nExample 2:\\nInput: num = 58\\nOutput: \"LVIII\"\\nExplanation: L = 50, V = 5, III = 3.\\n\\nExample 3:\\nInput: num = 1994\\nOutput: \"MCMXCIV\"\\nExplanation: M = 1000, CM = 900, XC = 90 and IV = 4.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= num <= 3999\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/roman-to-integer",
        "Title": "Roman to Integer ",
        "Description": "b'Roman numerals are represented by seven different symbols:\\xc2\\xa0I, V, X, L, C, D and M.\\nSymbol       Value\\nI             1\\nV             5\\nX             10\\nL             50\\nC             100\\nD             500\\nM             1000\\nFor example,\\xc2\\xa02 is written as II\\xc2\\xa0in Roman numeral, just two ones added together. 12 is written as\\xc2\\xa0XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\\n\\nI can be placed before V (5) and X (10) to make 4 and 9.\\xc2\\xa0\\nX can be placed before L (50) and C (100) to make 40 and 90.\\xc2\\xa0\\nC can be placed before D (500) and M (1000) to make 400 and 900.\\n\\nGiven a roman numeral, convert it to an integer.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"III\"\\nOutput: 3\\nExplanation: III = 3.\\n\\nExample 2:\\nInput: s = \"LVIII\"\\nOutput: 58\\nExplanation: L = 50, V= 5, III = 3.\\n\\nExample 3:\\nInput: s = \"MCMXCIV\"\\nOutput: 1994\\nExplanation: M = 1000, CM = 900, XC = 90 and IV = 4.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 15\\ns contains only\\xc2\\xa0the characters (\\'I\\', \\'V\\', \\'X\\', \\'L\\', \\'C\\', \\'D\\', \\'M\\').\\nIt is guaranteed\\xc2\\xa0that s is a valid roman numeral in the range [1, 3999].\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/longest-common-prefix",
        "Title": "Longest Common Prefix ",
        "Description": "b'Write a function to find the longest common prefix string amongst an array of strings.\\nIf there is no common prefix, return an empty string \"\".\\n\\xc2\\xa0\\nExample 1:\\nInput: strs = [\"flower\",\"flow\",\"flight\"]\\nOutput: \"fl\"\\n\\nExample 2:\\nInput: strs = [\"dog\",\"racecar\",\"car\"]\\nOutput: \"\"\\nExplanation: There is no common prefix among the input strings.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= strs.length <= 200\\n0 <= strs[i].length <= 200\\nstrs[i] consists of only lowercase English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/3sum",
        "Title": "3Sum ",
        "Description": "b'Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.\\nNotice that the solution set must not contain duplicate triplets.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [-1,0,1,2,-1,-4]\\nOutput: [[-1,-1,2],[-1,0,1]]\\nExample 2:\\nInput: nums = []\\nOutput: []\\nExample 3:\\nInput: nums = [0]\\nOutput: []\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= nums.length <= 3000\\n-105 <= nums[i] <= 105\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/3sum-closest",
        "Title": "3Sum Closest ",
        "Description": "b'Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.\\nReturn the sum of the three integers.\\nYou may assume that each input would have exactly one solution.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [-1,2,1,-4], target = 1\\nOutput: 2\\nExplanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\\n\\nExample 2:\\nInput: nums = [0,0,0], target = 1\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n3 <= nums.length <= 1000\\n-1000 <= nums[i] <= 1000\\n-104 <= target <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/letter-combinations-of-a-phone-number",
        "Title": "Letter Combinations of a Phone Number ",
        "Description": "b'Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.\\nA mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: digits = \"23\"\\nOutput: [\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]\\n\\nExample 2:\\nInput: digits = \"\"\\nOutput: []\\n\\nExample 3:\\nInput: digits = \"2\"\\nOutput: [\"a\",\"b\",\"c\"]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= digits.length <= 4\\ndigits[i] is a digit in the range [\\'2\\', \\'9\\'].\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/4sum",
        "Title": "4Sum ",
        "Description": "b'Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:\\n\\n0 <= a, b, c, d\\xc2\\xa0< n\\na, b, c, and d are distinct.\\nnums[a] + nums[b] + nums[c] + nums[d] == target\\n\\nYou may return the answer in any order.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,0,-1,0,-2,2], target = 0\\nOutput: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]\\n\\nExample 2:\\nInput: nums = [2,2,2,2,2], target = 8\\nOutput: [[2,2,2,2]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 200\\n-109 <= nums[i] <= 109\\n-109 <= target <= 109\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/remove-nth-node-from-end-of-list",
        "Title": "Remove Nth Node From End of List ",
        "Description": "b'Given the head of a linked list, remove the nth node from the end of the list and return its head.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: head = [1,2,3,4,5], n = 2\\nOutput: [1,2,3,5]\\n\\nExample 2:\\nInput: head = [1], n = 1\\nOutput: []\\n\\nExample 3:\\nInput: head = [1,2], n = 1\\nOutput: [1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the list is sz.\\n1 <= sz <= 30\\n0 <= Node.val <= 100\\n1 <= n <= sz\\n\\n\\xc2\\xa0\\nFollow up: Could you do this in one pass?\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/valid-parentheses",
        "Title": "Valid Parentheses ",
        "Description": "b'Given a string s containing just the characters \\'(\\', \\')\\', \\'{\\', \\'}\\', \\'[\\' and \\']\\', determine if the input string is valid.\\nAn input string is valid if:\\n\\nOpen brackets must be closed by the same type of brackets.\\nOpen brackets must be closed in the correct order.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"()\"\\nOutput: true\\n\\nExample 2:\\nInput: s = \"()[]{}\"\\nOutput: true\\n\\nExample 3:\\nInput: s = \"(]\"\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 104\\ns consists of parentheses only \\'()[]{}\\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/merge-two-sorted-lists",
        "Title": "Merge Two Sorted Lists ",
        "Description": "b'You are given the heads of two sorted linked lists list1 and list2.\\nMerge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.\\nReturn the head of the merged linked list.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: list1 = [1,2,4], list2 = [1,3,4]\\nOutput: [1,1,2,3,4,4]\\n\\nExample 2:\\nInput: list1 = [], list2 = []\\nOutput: []\\n\\nExample 3:\\nInput: list1 = [], list2 = [0]\\nOutput: [0]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in both lists is in the range [0, 50].\\n-100 <= Node.val <= 100\\nBoth list1 and list2 are sorted in non-decreasing order.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/generate-parentheses",
        "Title": "Generate Parentheses ",
        "Description": "b'Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 3\\nOutput: [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\\nExample 2:\\nInput: n = 1\\nOutput: [\"()\"]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 8\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/merge-k-sorted-lists",
        "Title": "Merge k Sorted Lists ",
        "Description": "b'You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.\\nMerge all the linked-lists into one sorted linked-list and return it.\\n\\xc2\\xa0\\nExample 1:\\nInput: lists = [[1,4,5],[1,3,4],[2,6]]\\nOutput: [1,1,2,3,4,4,5,6]\\nExplanation: The linked-lists are:\\n[\\n  1->4->5,\\n  1->3->4,\\n  2->6\\n]\\nmerging them into one sorted list:\\n1->1->2->3->4->4->5->6\\n\\nExample 2:\\nInput: lists = []\\nOutput: []\\n\\nExample 3:\\nInput: lists = [[]]\\nOutput: []\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nk == lists.length\\n0 <= k <= 104\\n0 <= lists[i].length <= 500\\n-104 <= lists[i][j] <= 104\\nlists[i] is sorted in ascending order.\\nThe sum of lists[i].length will not exceed 104.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/swap-nodes-in-pairs",
        "Title": "Swap Nodes in Pairs ",
        "Description": "b\"Given a\\xc2\\xa0linked list, swap every two adjacent nodes and return its head. You must solve the problem without\\xc2\\xa0modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: head = [1,2,3,4]\\nOutput: [2,1,4,3]\\n\\nExample 2:\\nInput: head = []\\nOutput: []\\n\\nExample 3:\\nInput: head = [1]\\nOutput: [1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the\\xc2\\xa0list\\xc2\\xa0is in the range [0, 100].\\n0 <= Node.val <= 100\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/reverse-nodes-in-k-group",
        "Title": "Reverse Nodes in k-Group ",
        "Description": "b\"Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.\\nk is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.\\nYou may not alter the values in the list's nodes, only nodes themselves may be changed.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: head = [1,2,3,4,5], k = 2\\nOutput: [2,1,4,3,5]\\n\\nExample 2:\\n\\nInput: head = [1,2,3,4,5], k = 3\\nOutput: [3,2,1,4,5]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the list is n.\\n1 <= k <= n <= 5000\\n0 <= Node.val <= 1000\\n\\n\\xc2\\xa0\\nFollow-up: Can you solve the problem in O(1) extra memory space?\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/remove-duplicates-from-sorted-array",
        "Title": "Remove Duplicates from Sorted Array ",
        "Description": "b'Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same.\\nSince it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums\\xc2\\xa0should hold the final result. It does not matter what you leave beyond the first\\xc2\\xa0k\\xc2\\xa0elements.\\nReturn k after placing the final result in the first k slots of nums.\\nDo not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.\\nCustom Judge:\\nThe judge will test your solution with the following code:\\nint[] nums = [...]; // Input array\\nint[] expectedNums = [...]; // The expected answer with correct length\\n\\nint k = removeDuplicates(nums); // Calls your implementation\\n\\nassert k == expectedNums.length;\\nfor (int i = 0; i < k; i++) {\\n    assert nums[i] == expectedNums[i];\\n}\\n\\nIf all assertions pass, then your solution will be accepted.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,1,2]\\nOutput: 2, nums = [1,2,_]\\nExplanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.\\nIt does not matter what you leave beyond the returned k (hence they are underscores).\\n\\nExample 2:\\nInput: nums = [0,0,1,1,1,2,2,3,3,4]\\nOutput: 5, nums = [0,1,2,3,4,_,_,_,_,_]\\nExplanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.\\nIt does not matter what you leave beyond the returned k (hence they are underscores).\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 3 * 104\\n-100 <= nums[i] <= 100\\nnums is sorted in non-decreasing order.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/remove-element",
        "Title": "Remove Element ",
        "Description": "b'Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The relative order of the elements may be changed.\\nSince it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.\\nReturn k after placing the final result in the first k slots of nums.\\nDo not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.\\nCustom Judge:\\nThe judge will test your solution with the following code:\\nint[] nums = [...]; // Input array\\nint val = ...; // Value to remove\\nint[] expectedNums = [...]; // The expected answer with correct length.\\n                            // It is sorted with no values equaling val.\\n\\nint k = removeElement(nums, val); // Calls your implementation\\n\\nassert k == expectedNums.length;\\nsort(nums, 0, k); // Sort the first k elements of nums\\nfor (int i = 0; i < actualLength; i++) {\\n    assert nums[i] == expectedNums[i];\\n}\\n\\nIf all assertions pass, then your solution will be accepted.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [3,2,2,3], val = 3\\nOutput: 2, nums = [2,2,_,_]\\nExplanation: Your function should return k = 2, with the first two elements of nums being 2.\\nIt does not matter what you leave beyond the returned k (hence they are underscores).\\n\\nExample 2:\\nInput: nums = [0,1,2,2,3,0,4,2], val = 2\\nOutput: 5, nums = [0,1,4,0,3,_,_,_]\\nExplanation: Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.\\nNote that the five elements can be returned in any order.\\nIt does not matter what you leave beyond the returned k (hence they are underscores).\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= nums.length <= 100\\n0 <= nums[i] <= 50\\n0 <= val <= 100\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/implement-strstr",
        "Title": "Implement strStr() ",
        "Description": "b'Implement strStr().\\nGiven two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.\\nClarification:\\nWhat should we return when needle is an empty string? This is a great question to ask during an interview.\\nFor the purpose of this problem, we will return 0 when needle is an empty string. This is consistent to C\\'s strstr() and Java\\'s indexOf().\\n\\xc2\\xa0\\nExample 1:\\nInput: haystack = \"hello\", needle = \"ll\"\\nOutput: 2\\n\\nExample 2:\\nInput: haystack = \"aaaaa\", needle = \"bba\"\\nOutput: -1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= haystack.length, needle.length <= 104\\nhaystack and needle consist of only lowercase English characters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/divide-two-integers",
        "Title": "Divide Two Integers ",
        "Description": "b'Given two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator.\\nThe integer division should truncate toward zero, which means losing its fractional part. For example, 8.345 would be truncated to 8, and -2.7335 would be truncated to -2.\\nReturn the quotient after dividing dividend by divisor.\\nNote: Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [\\xe2\\x88\\x92231, 231 \\xe2\\x88\\x92 1]. For this problem, if the quotient is strictly greater than 231 - 1, then return 231 - 1, and if the quotient is strictly less than -231, then return -231.\\n\\xc2\\xa0\\nExample 1:\\nInput: dividend = 10, divisor = 3\\nOutput: 3\\nExplanation: 10/3 = 3.33333.. which is truncated to 3.\\n\\nExample 2:\\nInput: dividend = 7, divisor = -3\\nOutput: -2\\nExplanation: 7/-3 = -2.33333.. which is truncated to -2.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n-231 <= dividend, divisor <= 231 - 1\\ndivisor != 0\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/substring-with-concatenation-of-all-words",
        "Title": "Substring with Concatenation of All Words ",
        "Description": "b'You are given a string s and an array of strings words of the same length. Return\\xc2\\xa0all starting indices of substring(s) in s\\xc2\\xa0that is a concatenation of each word in words exactly once, in any order,\\xc2\\xa0and without any intervening characters.\\nYou can return the answer in any order.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"barfoothefoobarman\", words = [\"foo\",\"bar\"]\\nOutput: [0,9]\\nExplanation: Substrings starting at index 0 and 9 are \"barfoo\" and \"foobar\" respectively.\\nThe output order does not matter, returning [9,0] is fine too.\\n\\nExample 2:\\nInput: s = \"wordgoodgoodgoodbestword\", words = [\"word\",\"good\",\"best\",\"word\"]\\nOutput: []\\n\\nExample 3:\\nInput: s = \"barfoofoobarthefoobarman\", words = [\"bar\",\"foo\",\"the\"]\\nOutput: [6,9,12]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 104\\ns consists of lower-case English letters.\\n1 <= words.length <= 5000\\n1 <= words[i].length <= 30\\nwords[i]\\xc2\\xa0consists of lower-case English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/next-permutation",
        "Title": "Next Permutation ",
        "Description": "b'A permutation of an array of integers is an arrangement of its members into a sequence or linear order.\\n\\nFor example, for arr = [1,2,3], the following are considered permutations of arr: [1,2,3], [1,3,2], [3,1,2], [2,3,1].\\n\\nThe next permutation of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the next permutation of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).\\n\\nFor example, the next permutation of arr = [1,2,3] is [1,3,2].\\nSimilarly, the next permutation of arr = [2,3,1] is [3,1,2].\\nWhile the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not have a lexicographical larger rearrangement.\\n\\nGiven an array of integers nums, find the next permutation of nums.\\nThe replacement must be in place and use only constant extra memory.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,2,3]\\nOutput: [1,3,2]\\n\\nExample 2:\\nInput: nums = [3,2,1]\\nOutput: [1,2,3]\\n\\nExample 3:\\nInput: nums = [1,1,5]\\nOutput: [1,5,1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 100\\n0 <= nums[i] <= 100\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/longest-valid-parentheses",
        "Title": "Longest Valid Parentheses ",
        "Description": "b'Given a string containing just the characters \\'(\\' and \\')\\', find the length of the longest valid (well-formed) parentheses substring.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"(()\"\\nOutput: 2\\nExplanation: The longest valid parentheses substring is \"()\".\\n\\nExample 2:\\nInput: s = \")()())\"\\nOutput: 4\\nExplanation: The longest valid parentheses substring is \"()()\".\\n\\nExample 3:\\nInput: s = \"\"\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= s.length <= 3 * 104\\ns[i] is \\'(\\', or \\')\\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/search-in-rotated-sorted-array",
        "Title": "Search in Rotated Sorted Array ",
        "Description": "b'There is an integer array nums sorted in ascending order (with distinct values).\\nPrior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].\\nGiven the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.\\nYou must write an algorithm with O(log n) runtime complexity.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [4,5,6,7,0,1,2], target = 0\\nOutput: 4\\nExample 2:\\nInput: nums = [4,5,6,7,0,1,2], target = 3\\nOutput: -1\\nExample 3:\\nInput: nums = [1], target = 0\\nOutput: -1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 5000\\n-104 <= nums[i] <= 104\\nAll values of nums are unique.\\nnums is an ascending array that is possibly rotated.\\n-104 <= target <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array",
        "Title": "Find First and Last Position of Element in Sorted Array ",
        "Description": "b'Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.\\nIf target is not found in the array, return [-1, -1].\\nYou must\\xc2\\xa0write an algorithm with\\xc2\\xa0O(log n) runtime complexity.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [5,7,7,8,8,10], target = 8\\nOutput: [3,4]\\nExample 2:\\nInput: nums = [5,7,7,8,8,10], target = 6\\nOutput: [-1,-1]\\nExample 3:\\nInput: nums = [], target = 0\\nOutput: [-1,-1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= nums.length <= 105\\n-109\\xc2\\xa0<= nums[i]\\xc2\\xa0<= 109\\nnums is a non-decreasing array.\\n-109\\xc2\\xa0<= target\\xc2\\xa0<= 109\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/search-insert-position",
        "Title": "Search Insert Position ",
        "Description": "b'Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\\nYou must\\xc2\\xa0write an algorithm with\\xc2\\xa0O(log n) runtime complexity.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,3,5,6], target = 5\\nOutput: 2\\n\\nExample 2:\\nInput: nums = [1,3,5,6], target = 2\\nOutput: 1\\n\\nExample 3:\\nInput: nums = [1,3,5,6], target = 7\\nOutput: 4\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 104\\n-104 <= nums[i] <= 104\\nnums contains distinct values sorted in ascending order.\\n-104 <= target <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/valid-sudoku",
        "Title": "Valid Sudoku ",
        "Description": "b'Determine if a\\xc2\\xa09 x 9 Sudoku board\\xc2\\xa0is valid.\\xc2\\xa0Only the filled cells need to be validated\\xc2\\xa0according to the following rules:\\n\\nEach row\\xc2\\xa0must contain the\\xc2\\xa0digits\\xc2\\xa01-9 without repetition.\\nEach column must contain the digits\\xc2\\xa01-9\\xc2\\xa0without repetition.\\nEach of the nine\\xc2\\xa03 x 3 sub-boxes of the grid must contain the digits\\xc2\\xa01-9\\xc2\\xa0without repetition.\\n\\nNote:\\n\\nA Sudoku board (partially filled) could be valid but is not necessarily solvable.\\nOnly the filled cells need to be validated according to the mentioned\\xc2\\xa0rules.\\n\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: board = \\n[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\\n,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\\n,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\\n,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\\n,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\\n,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\\n,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\\n,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\\n,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\\nOutput: true\\n\\nExample 2:\\nInput: board = \\n[[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\\n,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\\n,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\\n,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\\n,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\\n,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\\n,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\\n,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\\n,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\\nOutput: false\\nExplanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8\\'s in the top left 3x3 sub-box, it is invalid.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nboard.length == 9\\nboard[i].length == 9\\nboard[i][j] is a digit 1-9 or \\'.\\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/sudoku-solver",
        "Title": "Sudoku Solver ",
        "Description": "b'Write a program to solve a Sudoku puzzle by filling the empty cells.\\nA sudoku solution must satisfy all of the following rules:\\n\\nEach of the digits 1-9 must occur exactly once in each row.\\nEach of the digits 1-9 must occur exactly once in each column.\\nEach of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\\n\\nThe \\'.\\' character indicates empty cells.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: board = [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\\nOutput: [[\"5\",\"3\",\"4\",\"6\",\"7\",\"8\",\"9\",\"1\",\"2\"],[\"6\",\"7\",\"2\",\"1\",\"9\",\"5\",\"3\",\"4\",\"8\"],[\"1\",\"9\",\"8\",\"3\",\"4\",\"2\",\"5\",\"6\",\"7\"],[\"8\",\"5\",\"9\",\"7\",\"6\",\"1\",\"4\",\"2\",\"3\"],[\"4\",\"2\",\"6\",\"8\",\"5\",\"3\",\"7\",\"9\",\"1\"],[\"7\",\"1\",\"3\",\"9\",\"2\",\"4\",\"8\",\"5\",\"6\"],[\"9\",\"6\",\"1\",\"5\",\"3\",\"7\",\"2\",\"8\",\"4\"],[\"2\",\"8\",\"7\",\"4\",\"1\",\"9\",\"6\",\"3\",\"5\"],[\"3\",\"4\",\"5\",\"2\",\"8\",\"6\",\"1\",\"7\",\"9\"]]\\nExplanation:\\xc2\\xa0The input board is shown above and the only valid solution is shown below:\\n\\n\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nboard.length == 9\\nboard[i].length == 9\\nboard[i][j] is a digit or \\'.\\'.\\nIt is guaranteed that the input board has only one solution.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/count-and-say",
        "Title": "Count and Say ",
        "Description": "b'The count-and-say sequence is a sequence of digit strings defined by the recursive formula:\\n\\ncountAndSay(1) = \"1\"\\ncountAndSay(n) is the way you would \"say\" the digit string from countAndSay(n-1), which is then converted into a different digit string.\\n\\nTo determine how you \"say\" a digit string, split it into the minimal number of substrings such that each substring contains exactly one unique digit. Then for each substring, say the number of digits, then say the digit. Finally, concatenate every said digit.\\nFor example, the saying and conversion for digit string \"3322251\":\\n\\nGiven a positive integer n, return the nth term of the count-and-say sequence.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 1\\nOutput: \"1\"\\nExplanation: This is the base case.\\n\\nExample 2:\\nInput: n = 4\\nOutput: \"1211\"\\nExplanation:\\ncountAndSay(1) = \"1\"\\ncountAndSay(2) = say \"1\" = one 1 = \"11\"\\ncountAndSay(3) = say \"11\" = two 1\\'s = \"21\"\\ncountAndSay(4) = say \"21\" = one 2 + one 1 = \"12\" + \"11\" = \"1211\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 30\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/combination-sum",
        "Title": "Combination Sum ",
        "Description": "b'Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.\\nThe same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.\\nIt is guaranteed that the number of unique combinations that sum up to target is less than 150 combinations for the given input.\\n\\xc2\\xa0\\nExample 1:\\nInput: candidates = [2,3,6,7], target = 7\\nOutput: [[2,2,3],[7]]\\nExplanation:\\n2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.\\n7 is a candidate, and 7 = 7.\\nThese are the only two combinations.\\n\\nExample 2:\\nInput: candidates = [2,3,5], target = 8\\nOutput: [[2,2,2,2],[2,3,3],[3,5]]\\n\\nExample 3:\\nInput: candidates = [2], target = 1\\nOutput: []\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= candidates.length <= 30\\n1 <= candidates[i] <= 200\\nAll elements of candidates are distinct.\\n1 <= target <= 500\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/combination-sum-ii",
        "Title": "Combination Sum II ",
        "Description": "b'Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates\\xc2\\xa0where the candidate numbers sum to target.\\nEach number in candidates\\xc2\\xa0may only be used once in the combination.\\nNote:\\xc2\\xa0The solution set must not contain duplicate combinations.\\n\\xc2\\xa0\\nExample 1:\\nInput: candidates = [10,1,2,7,6,1,5], target = 8\\nOutput: \\n[\\n[1,1,6],\\n[1,2,5],\\n[1,7],\\n[2,6]\\n]\\n\\nExample 2:\\nInput: candidates = [2,5,2,1,2], target = 5\\nOutput: \\n[\\n[1,2,2],\\n[5]\\n]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <=\\xc2\\xa0candidates.length <= 100\\n1 <=\\xc2\\xa0candidates[i] <= 50\\n1 <= target <= 30\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/first-missing-positive",
        "Title": "First Missing Positive ",
        "Description": "b'Given an unsorted integer array nums, return the smallest missing positive integer.\\nYou must implement an algorithm that runs in O(n) time and uses constant extra space.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,2,0]\\nOutput: 3\\nExample 2:\\nInput: nums = [3,4,-1,1]\\nOutput: 2\\nExample 3:\\nInput: nums = [7,8,9,11,12]\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 5 * 105\\n-231 <= nums[i] <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/trapping-rain-water",
        "Title": "Trapping Rain Water ",
        "Description": "b'Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: height = [0,1,0,2,1,0,1,3,2,1,2,1]\\nOutput: 6\\nExplanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.\\n\\nExample 2:\\nInput: height = [4,2,0,3,2,5]\\nOutput: 9\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == height.length\\n1 <= n <= 2 * 104\\n0 <= height[i] <= 105\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/multiply-strings",
        "Title": "Multiply Strings ",
        "Description": "b'Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.\\nNote:\\xc2\\xa0You must not use any built-in BigInteger library or convert the inputs to integer directly.\\n\\xc2\\xa0\\nExample 1:\\nInput: num1 = \"2\", num2 = \"3\"\\nOutput: \"6\"\\nExample 2:\\nInput: num1 = \"123\", num2 = \"456\"\\nOutput: \"56088\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= num1.length, num2.length <= 200\\nnum1 and num2 consist of digits only.\\nBoth num1 and num2\\xc2\\xa0do not contain any leading zero, except the number 0 itself.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/wildcard-matching",
        "Title": "Wildcard Matching ",
        "Description": "b'Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for \\'?\\' and \\'*\\' where:\\n\\n\\'?\\' Matches any single character.\\n\\'*\\' Matches any sequence of characters (including the empty sequence).\\n\\nThe matching should cover the entire input string (not partial).\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"aa\", p = \"a\"\\nOutput: false\\nExplanation: \"a\" does not match the entire string \"aa\".\\n\\nExample 2:\\nInput: s = \"aa\", p = \"*\"\\nOutput: true\\nExplanation:\\xc2\\xa0\\'*\\' matches any sequence.\\n\\nExample 3:\\nInput: s = \"cb\", p = \"?a\"\\nOutput: false\\nExplanation:\\xc2\\xa0\\'?\\' matches \\'c\\', but the second letter is \\'a\\', which does not match \\'b\\'.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= s.length, p.length <= 2000\\ns contains only lowercase English letters.\\np contains only lowercase English letters, \\'?\\' or \\'*\\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/jump-game-ii",
        "Title": "Jump Game II ",
        "Description": "b'Given an array of non-negative integers nums, you are initially positioned at the first index of the array.\\nEach element in the array represents your maximum jump length at that position.\\nYour goal is to reach the last index in the minimum number of jumps.\\nYou can assume that you can always reach the last index.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [2,3,1,1,4]\\nOutput: 2\\nExplanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.\\n\\nExample 2:\\nInput: nums = [2,3,0,1,4]\\nOutput: 2\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 104\\n0 <= nums[i] <= 1000\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/permutations",
        "Title": "Permutations ",
        "Description": "b'Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,2,3]\\nOutput: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\\nExample 2:\\nInput: nums = [0,1]\\nOutput: [[0,1],[1,0]]\\nExample 3:\\nInput: nums = [1]\\nOutput: [[1]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 6\\n-10 <= nums[i] <= 10\\nAll the integers of nums are unique.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/permutations-ii",
        "Title": "Permutations II ",
        "Description": "b'Given a collection of numbers, nums,\\xc2\\xa0that might contain duplicates, return all possible unique permutations in any order.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,1,2]\\nOutput:\\n[[1,1,2],\\n [1,2,1],\\n [2,1,1]]\\n\\nExample 2:\\nInput: nums = [1,2,3]\\nOutput: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 8\\n-10 <= nums[i] <= 10\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/rotate-image",
        "Title": "Rotate Image ",
        "Description": "b'You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).\\nYou have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: matrix = [[1,2,3],[4,5,6],[7,8,9]]\\nOutput: [[7,4,1],[8,5,2],[9,6,3]]\\n\\nExample 2:\\n\\nInput: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]\\nOutput: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == matrix.length == matrix[i].length\\n1 <= n <= 20\\n-1000 <= matrix[i][j] <= 1000\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/group-anagrams",
        "Title": "Group Anagrams ",
        "Description": "b'Given an array of strings strs, group the anagrams together. You can return the answer in any order.\\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\\n\\xc2\\xa0\\nExample 1:\\nInput: strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]\\nOutput: [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]\\nExample 2:\\nInput: strs = [\"\"]\\nOutput: [[\"\"]]\\nExample 3:\\nInput: strs = [\"a\"]\\nOutput: [[\"a\"]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= strs.length <= 104\\n0 <= strs[i].length <= 100\\nstrs[i] consists of lowercase English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/powx-n",
        "Title": "Pow(x, n) ",
        "Description": "b'Implement pow(x, n), which calculates x raised to the power n (i.e., xn).\\n\\xc2\\xa0\\nExample 1:\\nInput: x = 2.00000, n = 10\\nOutput: 1024.00000\\n\\nExample 2:\\nInput: x = 2.10000, n = 3\\nOutput: 9.26100\\n\\nExample 3:\\nInput: x = 2.00000, n = -2\\nOutput: 0.25000\\nExplanation: 2-2 = 1/22 = 1/4 = 0.25\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n-100.0 < x < 100.0\\n-231 <= n <= 231-1\\n-104 <= xn <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/n-queens",
        "Title": "N-Queens ",
        "Description": "b'The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.\\nGiven an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.\\nEach solution contains a distinct board configuration of the n-queens\\' placement, where \\'Q\\' and \\'.\\' both indicate a queen and an empty space, respectively.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: n = 4\\nOutput: [[\".Q..\",\"...Q\",\"Q...\",\"..Q.\"],[\"..Q.\",\"Q...\",\"...Q\",\".Q..\"]]\\nExplanation: There exist two distinct solutions to the 4-queens puzzle as shown above\\n\\nExample 2:\\nInput: n = 1\\nOutput: [[\"Q\"]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 9\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/n-queens-ii",
        "Title": "N-Queens II ",
        "Description": "b'The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.\\nGiven an integer n, return the number of distinct solutions to the\\xc2\\xa0n-queens puzzle.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: n = 4\\nOutput: 2\\nExplanation: There are two distinct solutions to the 4-queens puzzle as shown.\\n\\nExample 2:\\nInput: n = 1\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 9\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/maximum-subarray",
        "Title": "Maximum Subarray ",
        "Description": "b'Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.\\nA subarray is a contiguous part of an array.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [-2,1,-3,4,-1,2,1,-5,4]\\nOutput: 6\\nExplanation: [4,-1,2,1] has the largest sum = 6.\\n\\nExample 2:\\nInput: nums = [1]\\nOutput: 1\\n\\nExample 3:\\nInput: nums = [5,4,-1,7,8]\\nOutput: 23\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 105\\n-104 <= nums[i] <= 104\\n\\n\\xc2\\xa0\\nFollow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/spiral-matrix",
        "Title": "Spiral Matrix ",
        "Description": "b'Given an m x n matrix, return all elements of the matrix in spiral order.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: matrix = [[1,2,3],[4,5,6],[7,8,9]]\\nOutput: [1,2,3,6,9,8,7,4,5]\\n\\nExample 2:\\n\\nInput: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\\nOutput: [1,2,3,4,8,12,11,10,9,5,6,7]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == matrix.length\\nn == matrix[i].length\\n1 <= m, n <= 10\\n-100 <= matrix[i][j] <= 100\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/jump-game",
        "Title": "Jump Game ",
        "Description": "b\"You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.\\nReturn true if you can reach the last index, or false otherwise.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [2,3,1,1,4]\\nOutput: true\\nExplanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.\\n\\nExample 2:\\nInput: nums = [3,2,1,0,4]\\nOutput: false\\nExplanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 104\\n0 <= nums[i] <= 105\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/merge-intervals",
        "Title": "Merge Intervals ",
        "Description": "b'Given an array\\xc2\\xa0of intervals\\xc2\\xa0where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.\\n\\xc2\\xa0\\nExample 1:\\nInput: intervals = [[1,3],[2,6],[8,10],[15,18]]\\nOutput: [[1,6],[8,10],[15,18]]\\nExplanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].\\n\\nExample 2:\\nInput: intervals = [[1,4],[4,5]]\\nOutput: [[1,5]]\\nExplanation: Intervals [1,4] and [4,5] are considered overlapping.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= intervals.length <= 104\\nintervals[i].length == 2\\n0 <= starti <= endi <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/insert-interval",
        "Title": "Insert Interval ",
        "Description": "b'You are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] represent the start and the end of the ith interval and intervals is sorted in ascending order by starti. You are also given an interval newInterval = [start, end] that represents the start and end of another interval.\\nInsert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).\\nReturn intervals after the insertion.\\n\\xc2\\xa0\\nExample 1:\\nInput: intervals = [[1,3],[6,9]], newInterval = [2,5]\\nOutput: [[1,5],[6,9]]\\n\\nExample 2:\\nInput: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]\\nOutput: [[1,2],[3,10],[12,16]]\\nExplanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= intervals.length <= 104\\nintervals[i].length == 2\\n0 <= starti <= endi <= 105\\nintervals is sorted by starti in ascending order.\\nnewInterval.length == 2\\n0 <= start <= end <= 105\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/length-of-last-word",
        "Title": "Length of Last Word ",
        "Description": "b'Given a string s consisting of words and spaces, return the length of the last word in the string.\\nA word is a maximal substring consisting of non-space characters only.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"Hello World\"\\nOutput: 5\\nExplanation: The last word is \"World\" with length 5.\\n\\nExample 2:\\nInput: s = \"   fly me   to   the moon  \"\\nOutput: 4\\nExplanation: The last word is \"moon\" with length 4.\\n\\nExample 3:\\nInput: s = \"luffy is still joyboy\"\\nOutput: 6\\nExplanation: The last word is \"joyboy\" with length 6.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 104\\ns consists of only English letters and spaces \\' \\'.\\nThere will be at least one word in s.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/spiral-matrix-ii",
        "Title": "Spiral Matrix II ",
        "Description": "b'Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: n = 3\\nOutput: [[1,2,3],[8,9,4],[7,6,5]]\\n\\nExample 2:\\nInput: n = 1\\nOutput: [[1]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 20\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/permutation-sequence",
        "Title": "Permutation Sequence ",
        "Description": "b'The set [1, 2, 3, ...,\\xc2\\xa0n] contains a total of n! unique permutations.\\nBy listing and labeling all of the permutations in order, we get the following sequence for n = 3:\\n\\n\"123\"\\n\"132\"\\n\"213\"\\n\"231\"\\n\"312\"\\n\"321\"\\n\\nGiven n and k, return the kth permutation sequence.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 3, k = 3\\nOutput: \"213\"\\nExample 2:\\nInput: n = 4, k = 9\\nOutput: \"2314\"\\nExample 3:\\nInput: n = 3, k = 1\\nOutput: \"123\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 9\\n1 <= k <= n!\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/rotate-list",
        "Title": "Rotate List ",
        "Description": "b'Given the head of a linked\\xc2\\xa0list, rotate the list to the right by k places.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: head = [1,2,3,4,5], k = 2\\nOutput: [4,5,1,2,3]\\n\\nExample 2:\\n\\nInput: head = [0,1,2], k = 4\\nOutput: [2,0,1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the list is in the range [0, 500].\\n-100 <= Node.val <= 100\\n0 <= k <= 2 * 109\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/unique-paths",
        "Title": "Unique Paths ",
        "Description": "b'There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.\\nGiven the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.\\nThe test cases are generated so that the answer will be less than or equal to 2 * 109.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: m = 3, n = 7\\nOutput: 28\\n\\nExample 2:\\nInput: m = 3, n = 2\\nOutput: 3\\nExplanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:\\n1. Right -> Down -> Down\\n2. Down -> Down -> Right\\n3. Down -> Right -> Down\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= m, n <= 100\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/unique-paths-ii",
        "Title": "Unique Paths II ",
        "Description": "b'You are given an m x n integer array grid. There is a robot initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m-1][n-1]). The robot can only move either down or right at any point in time.\\nAn obstacle and space are marked as 1 or 0 respectively in grid. A path that the robot takes cannot include any square that is an obstacle.\\nReturn the number of possible unique paths that the robot can take to reach the bottom-right corner.\\nThe testcases are generated so that the answer will be less than or equal to 2 * 109.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]\\nOutput: 2\\nExplanation: There is one obstacle in the middle of the 3x3 grid above.\\nThere are two ways to reach the bottom-right corner:\\n1. Right -> Right -> Down -> Down\\n2. Down -> Down -> Right -> Right\\n\\nExample 2:\\n\\nInput: obstacleGrid = [[0,1],[0,0]]\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == obstacleGrid.length\\nn == obstacleGrid[i].length\\n1 <= m, n <= 100\\nobstacleGrid[i][j] is 0 or 1.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/minimum-path-sum",
        "Title": "Minimum Path Sum ",
        "Description": "b'Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.\\nNote: You can only move either down or right at any point in time.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: grid = [[1,3,1],[1,5,1],[4,2,1]]\\nOutput: 7\\nExplanation: Because the path 1 \\xe2\\x86\\x92 3 \\xe2\\x86\\x92 1 \\xe2\\x86\\x92 1 \\xe2\\x86\\x92 1 minimizes the sum.\\n\\nExample 2:\\nInput: grid = [[1,2,3],[4,5,6]]\\nOutput: 12\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == grid.length\\nn == grid[i].length\\n1 <= m, n <= 200\\n0 <= grid[i][j] <= 100\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/valid-number",
        "Title": "Valid Number ",
        "Description": "b'A valid number can be split up into these components (in order):\\n\\nA decimal number or an integer.\\n(Optional) An \\'e\\' or \\'E\\', followed by an integer.\\n\\nA decimal number can be split up into these components (in order):\\n\\n(Optional) A sign character (either \\'+\\' or \\'-\\').\\nOne of the following formats:\\n\\t\\nOne or more digits, followed by a dot \\'.\\'.\\nOne or more digits, followed by a dot \\'.\\', followed by one or more digits.\\nA dot \\'.\\', followed by one or more digits.\\n\\n\\n\\nAn integer can be split up into these components (in order):\\n\\n(Optional) A sign character (either \\'+\\' or \\'-\\').\\nOne or more digits.\\n\\nFor example, all the following are valid numbers: [\"2\", \"0089\", \"-0.1\", \"+3.14\", \"4.\", \"-.9\", \"2e10\", \"-90E3\", \"3e+7\", \"+6e-1\", \"53.5e93\", \"-123.456e789\"], while the following are not valid numbers: [\"abc\", \"1a\", \"1e\", \"e3\", \"99e2.5\", \"--6\", \"-+3\", \"95a54e53\"].\\nGiven a string s, return true if s is a valid number.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"0\"\\nOutput: true\\n\\nExample 2:\\nInput: s = \"e\"\\nOutput: false\\n\\nExample 3:\\nInput: s = \".\"\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 20\\ns consists of only English letters (both uppercase and lowercase), digits (0-9), plus \\'+\\', minus \\'-\\', or dot \\'.\\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/plus-one",
        "Title": "Plus One ",
        "Description": "b\"You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.\\nIncrement the large integer by one and return the resulting array of digits.\\n\\xc2\\xa0\\nExample 1:\\nInput: digits = [1,2,3]\\nOutput: [1,2,4]\\nExplanation: The array represents the integer 123.\\nIncrementing by one gives 123 + 1 = 124.\\nThus, the result should be [1,2,4].\\n\\nExample 2:\\nInput: digits = [4,3,2,1]\\nOutput: [4,3,2,2]\\nExplanation: The array represents the integer 4321.\\nIncrementing by one gives 4321 + 1 = 4322.\\nThus, the result should be [4,3,2,2].\\n\\nExample 3:\\nInput: digits = [9]\\nOutput: [1,0]\\nExplanation: The array represents the integer 9.\\nIncrementing by one gives 9 + 1 = 10.\\nThus, the result should be [1,0].\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= digits.length <= 100\\n0 <= digits[i] <= 9\\ndigits does not contain any leading 0's.\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/add-binary",
        "Title": "Add Binary ",
        "Description": "b'Given two binary strings a and b, return their sum as a binary string.\\n\\xc2\\xa0\\nExample 1:\\nInput: a = \"11\", b = \"1\"\\nOutput: \"100\"\\nExample 2:\\nInput: a = \"1010\", b = \"1011\"\\nOutput: \"10101\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= a.length, b.length <= 104\\na and b consist\\xc2\\xa0only of \\'0\\' or \\'1\\' characters.\\nEach string does not contain leading zeros except for the zero itself.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/text-justification",
        "Title": "Text Justification ",
        "Description": "b'Given an array of strings words and a width maxWidth, format the text such that each line has exactly maxWidth characters and is fully (left and right) justified.\\nYou should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces \\' \\' when necessary so that each line has exactly maxWidth characters.\\nExtra spaces between words should be distributed as evenly as possible. If the number of spaces on a line does not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.\\nFor the last line of text, it should be left-justified, and no extra space is inserted between words.\\nNote:\\n\\nA word is defined as a character sequence consisting of non-space characters only.\\nEach word\\'s length is guaranteed to be greater than 0 and not exceed maxWidth.\\nThe input array words contains at least one word.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: words = [\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"], maxWidth = 16\\nOutput:\\n[\\n\\xc2\\xa0 \\xc2\\xa0\"This \\xc2\\xa0 \\xc2\\xa0is \\xc2\\xa0 \\xc2\\xa0an\",\\n\\xc2\\xa0 \\xc2\\xa0\"example \\xc2\\xa0of text\",\\n\\xc2\\xa0 \\xc2\\xa0\"justification. \\xc2\\xa0\"\\n]\\nExample 2:\\nInput: words = [\"What\",\"must\",\"be\",\"acknowledgment\",\"shall\",\"be\"], maxWidth = 16\\nOutput:\\n[\\n\\xc2\\xa0 \"What \\xc2\\xa0 must \\xc2\\xa0 be\",\\n\\xc2\\xa0 \"acknowledgment \\xc2\\xa0\",\\n\\xc2\\xa0 \"shall be \\xc2\\xa0 \\xc2\\xa0 \\xc2\\xa0 \\xc2\\xa0\"\\n]\\nExplanation: Note that the last line is \"shall be    \" instead of \"shall     be\", because the last line must be left-justified instead of fully-justified.\\nNote that the second line is also left-justified because it contains only one word.\\nExample 3:\\nInput: words = [\"Science\",\"is\",\"what\",\"we\",\"understand\",\"well\",\"enough\",\"to\",\"explain\",\"to\",\"a\",\"computer.\",\"Art\",\"is\",\"everything\",\"else\",\"we\",\"do\"], maxWidth = 20\\nOutput:\\n[\\n\\xc2\\xa0 \"Science \\xc2\\xa0is \\xc2\\xa0what we\",\\n  \"understand \\xc2\\xa0 \\xc2\\xa0 \\xc2\\xa0well\",\\n\\xc2\\xa0 \"enough to explain to\",\\n\\xc2\\xa0 \"a \\xc2\\xa0computer. \\xc2\\xa0Art is\",\\n\\xc2\\xa0 \"everything \\xc2\\xa0else \\xc2\\xa0we\",\\n\\xc2\\xa0 \"do \\xc2\\xa0 \\xc2\\xa0 \\xc2\\xa0 \\xc2\\xa0 \\xc2\\xa0 \\xc2\\xa0 \\xc2\\xa0 \\xc2\\xa0 \\xc2\\xa0\"\\n]\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= words.length <= 300\\n1 <= words[i].length <= 20\\nwords[i] consists of only English letters and symbols.\\n1 <= maxWidth <= 100\\nwords[i].length <= maxWidth\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/sqrtx",
        "Title": "Sqrt(x) ",
        "Description": "b'Given a non-negative integer x,\\xc2\\xa0compute and return the square root of x.\\nSince the return type\\xc2\\xa0is an integer, the decimal digits are truncated, and only the integer part of the result\\xc2\\xa0is returned.\\nNote:\\xc2\\xa0You are not allowed to use any built-in exponent function or operator, such as pow(x, 0.5) or\\xc2\\xa0x ** 0.5.\\n\\xc2\\xa0\\nExample 1:\\nInput: x = 4\\nOutput: 2\\n\\nExample 2:\\nInput: x = 8\\nOutput: 2\\nExplanation: The square root of 8 is 2.82842..., and since the decimal part is truncated, 2 is returned.\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= x <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/climbing-stairs",
        "Title": "Climbing Stairs ",
        "Description": "b'You are climbing a staircase. It takes n steps to reach the top.\\nEach time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 2\\nOutput: 2\\nExplanation: There are two ways to climb to the top.\\n1. 1 step + 1 step\\n2. 2 steps\\n\\nExample 2:\\nInput: n = 3\\nOutput: 3\\nExplanation: There are three ways to climb to the top.\\n1. 1 step + 1 step + 1 step\\n2. 1 step + 2 steps\\n3. 2 steps + 1 step\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 45\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/simplify-path",
        "Title": "Simplify Path ",
        "Description": "b'Given a string path, which is an absolute path (starting with a slash \\'/\\') to a file or directory in a Unix-style file system, convert it to the simplified canonical path.\\nIn a Unix-style file system, a period \\'.\\' refers to the current directory, a double period \\'..\\' refers to the directory up a level, and any multiple consecutive slashes (i.e. \\'//\\') are treated as a single slash \\'/\\'. For this problem, any other format of periods such as \\'...\\' are treated as file/directory names.\\nThe canonical path should have the following format:\\n\\nThe path starts with a single slash \\'/\\'.\\nAny two directories are separated by a single slash \\'/\\'.\\nThe path does not end with a trailing \\'/\\'.\\nThe path only contains the directories on the path from the root directory to the target file or directory (i.e., no period \\'.\\' or double period \\'..\\')\\n\\nReturn the simplified canonical path.\\n\\xc2\\xa0\\nExample 1:\\nInput: path = \"/home/\"\\nOutput: \"/home\"\\nExplanation: Note that there is no trailing slash after the last directory name.\\n\\nExample 2:\\nInput: path = \"/../\"\\nOutput: \"/\"\\nExplanation: Going one level up from the root directory is a no-op, as the root level is the highest level you can go.\\n\\nExample 3:\\nInput: path = \"/home//foo/\"\\nOutput: \"/home/foo\"\\nExplanation: In the canonical path, multiple consecutive slashes are replaced by a single one.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= path.length <= 3000\\npath consists of English letters, digits, period \\'.\\', slash \\'/\\' or \\'_\\'.\\npath is a valid absolute Unix path.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/edit-distance",
        "Title": "Edit Distance ",
        "Description": "b'Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.\\nYou have the following three operations permitted on a word:\\n\\nInsert a character\\nDelete a character\\nReplace a character\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: word1 = \"horse\", word2 = \"ros\"\\nOutput: 3\\nExplanation: \\nhorse -> rorse (replace \\'h\\' with \\'r\\')\\nrorse -> rose (remove \\'r\\')\\nrose -> ros (remove \\'e\\')\\n\\nExample 2:\\nInput: word1 = \"intention\", word2 = \"execution\"\\nOutput: 5\\nExplanation: \\nintention -> inention (remove \\'t\\')\\ninention -> enention (replace \\'i\\' with \\'e\\')\\nenention -> exention (replace \\'n\\' with \\'x\\')\\nexention -> exection (replace \\'n\\' with \\'c\\')\\nexection -> execution (insert \\'u\\')\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= word1.length, word2.length <= 500\\nword1 and word2 consist of lowercase English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/set-matrix-zeroes",
        "Title": "Set Matrix Zeroes ",
        "Description": "b\"Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's.\\nYou must do it in place.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: matrix = [[1,1,1],[1,0,1],[1,1,1]]\\nOutput: [[1,0,1],[0,0,0],[1,0,1]]\\n\\nExample 2:\\n\\nInput: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]\\nOutput: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == matrix.length\\nn == matrix[0].length\\n1 <= m, n <= 200\\n-231 <= matrix[i][j] <= 231 - 1\\n\\n\\xc2\\xa0\\nFollow up:\\n\\nA straightforward solution using O(mn) space is probably a bad idea.\\nA simple improvement uses O(m + n) space, but still not the best solution.\\nCould you devise a constant space solution?\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/search-a-2d-matrix",
        "Title": "Search a 2D Matrix ",
        "Description": "b'Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:\\n\\nIntegers in each row are sorted from left to right.\\nThe first integer of each row is greater than the last integer of the previous row.\\n\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3\\nOutput: true\\n\\nExample 2:\\n\\nInput: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == matrix.length\\nn == matrix[i].length\\n1 <= m, n <= 100\\n-104 <= matrix[i][j], target <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/sort-colors",
        "Title": "Sort Colors ",
        "Description": "b\"Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.\\nWe will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.\\nYou must solve this problem without using the library's sort function.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [2,0,2,1,1,0]\\nOutput: [0,0,1,1,2,2]\\n\\nExample 2:\\nInput: nums = [2,0,1]\\nOutput: [0,1,2]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == nums.length\\n1 <= n <= 300\\nnums[i] is either 0, 1, or 2.\\n\\n\\xc2\\xa0\\nFollow up:\\xc2\\xa0Could you come up with a one-pass algorithm using only\\xc2\\xa0constant extra space?\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/minimum-window-substring",
        "Title": "Minimum Window Substring ",
        "Description": "b'Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string \"\".\\nThe testcases will be generated such that the answer is unique.\\nA substring is a contiguous sequence of characters within the string.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"ADOBECODEBANC\", t = \"ABC\"\\nOutput: \"BANC\"\\nExplanation: The minimum window substring \"BANC\" includes \\'A\\', \\'B\\', and \\'C\\' from string t.\\n\\nExample 2:\\nInput: s = \"a\", t = \"a\"\\nOutput: \"a\"\\nExplanation: The entire string s is the minimum window.\\n\\nExample 3:\\nInput: s = \"a\", t = \"aa\"\\nOutput: \"\"\\nExplanation: Both \\'a\\'s from t must be included in the window.\\nSince the largest window of s only has one \\'a\\', return empty string.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == s.length\\nn == t.length\\n1 <= m, n\\xc2\\xa0<= 105\\ns and t consist of uppercase and lowercase English letters.\\n\\n\\xc2\\xa0\\nFollow up: Could you find an algorithm that runs in O(m + n) time?'"
    },
    {
        "URL": "https://leetcode.com/problems/combinations",
        "Title": "Combinations ",
        "Description": "b'Given two integers n and k, return all possible combinations of k numbers out of the range [1, n].\\nYou may return the answer in any order.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 4, k = 2\\nOutput:\\n[\\n  [2,4],\\n  [3,4],\\n  [2,3],\\n  [1,2],\\n  [1,3],\\n  [1,4],\\n]\\n\\nExample 2:\\nInput: n = 1, k = 1\\nOutput: [[1]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 20\\n1 <= k <= n\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/subsets",
        "Title": "Subsets ",
        "Description": "b'Given an integer array nums of unique elements, return all possible subsets (the power set).\\nThe solution set must not contain duplicate subsets. Return the solution in any order.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,2,3]\\nOutput: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\\n\\nExample 2:\\nInput: nums = [0]\\nOutput: [[],[0]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 10\\n-10 <= nums[i] <= 10\\nAll the numbers of\\xc2\\xa0nums are unique.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/word-search",
        "Title": "Word Search ",
        "Description": "b'Given an m x n grid of characters board and a string word, return true if word exists in the grid.\\nThe word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\"\\nOutput: true\\n\\nExample 2:\\n\\nInput: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"SEE\"\\nOutput: true\\n\\nExample 3:\\n\\nInput: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCB\"\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == board.length\\nn = board[i].length\\n1 <= m, n <= 6\\n1 <= word.length <= 15\\nboard and word consists of only lowercase and uppercase English letters.\\n\\n\\xc2\\xa0\\nFollow up: Could you use search pruning to make your solution faster with a larger board?\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/remove-duplicates-from-sorted-array-ii",
        "Title": "Remove Duplicates from Sorted Array II ",
        "Description": "b'Given an integer array nums sorted in non-decreasing order, remove some duplicates in-place such that each unique element appears at most twice. The relative order of the elements should be kept the same.\\nSince it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums\\xc2\\xa0should hold the final result. It does not matter what you leave beyond the first\\xc2\\xa0k\\xc2\\xa0elements.\\nReturn k after placing the final result in the first k slots of nums.\\nDo not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.\\nCustom Judge:\\nThe judge will test your solution with the following code:\\nint[] nums = [...]; // Input array\\nint[] expectedNums = [...]; // The expected answer with correct length\\n\\nint k = removeDuplicates(nums); // Calls your implementation\\n\\nassert k == expectedNums.length;\\nfor (int i = 0; i < k; i++) {\\n    assert nums[i] == expectedNums[i];\\n}\\n\\nIf all assertions pass, then your solution will be accepted.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,1,1,2,2,3]\\nOutput: 5, nums = [1,1,2,2,3,_]\\nExplanation: Your function should return k = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively.\\nIt does not matter what you leave beyond the returned k (hence they are underscores).\\n\\nExample 2:\\nInput: nums = [0,0,1,1,1,1,2,3,3]\\nOutput: 7, nums = [0,0,1,1,2,3,3,_,_]\\nExplanation: Your function should return k = 7, with the first seven elements of nums being 0, 0, 1, 1, 2, 3 and 3 respectively.\\nIt does not matter what you leave beyond the returned k (hence they are underscores).\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 3 * 104\\n-104 <= nums[i] <= 104\\nnums is sorted in non-decreasing order.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/search-in-rotated-sorted-array-ii",
        "Title": "Search in Rotated Sorted Array II ",
        "Description": "b'There is an integer array nums sorted in non-decreasing order (not necessarily with distinct values).\\nBefore being passed to your function, nums is rotated at an unknown pivot index k (0 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,4,4,5,6,6,7] might be rotated at pivot index 5 and become [4,5,6,6,7,0,1,2,4,4].\\nGiven the array nums after the rotation and an integer target, return true if target is in nums, or false if it is not in nums.\\nYou must decrease the overall operation steps as much as possible.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [2,5,6,0,0,1,2], target = 0\\nOutput: true\\nExample 2:\\nInput: nums = [2,5,6,0,0,1,2], target = 3\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 5000\\n-104 <= nums[i] <= 104\\nnums is guaranteed to be rotated at some pivot.\\n-104 <= target <= 104\\n\\n\\xc2\\xa0\\nFollow up: This problem is similar to\\xc2\\xa0Search in Rotated Sorted Array, but\\xc2\\xa0nums may contain duplicates. Would this affect the runtime complexity? How and why?\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii",
        "Title": "Remove Duplicates from Sorted List II ",
        "Description": "b'Given the head of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: head = [1,2,3,3,4,4,5]\\nOutput: [1,2,5]\\n\\nExample 2:\\n\\nInput: head = [1,1,1,2,3]\\nOutput: [2,3]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the list is in the range [0, 300].\\n-100 <= Node.val <= 100\\nThe list is guaranteed to be sorted in ascending order.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/remove-duplicates-from-sorted-list",
        "Title": "Remove Duplicates from Sorted List ",
        "Description": "b'Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: head = [1,1,2]\\nOutput: [1,2]\\n\\nExample 2:\\n\\nInput: head = [1,1,2,3,3]\\nOutput: [1,2,3]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the list is in the range [0, 300].\\n-100 <= Node.val <= 100\\nThe list is guaranteed to be sorted in ascending order.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/largest-rectangle-in-histogram",
        "Title": "Largest Rectangle in Histogram ",
        "Description": "b\"Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: heights = [2,1,5,6,2,3]\\nOutput: 10\\nExplanation: The above is a histogram where width of each bar is 1.\\nThe largest rectangle is shown in the red area, which has an area = 10 units.\\n\\nExample 2:\\n\\nInput: heights = [2,4]\\nOutput: 4\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= heights.length <= 105\\n0 <= heights[i] <= 104\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/maximal-rectangle",
        "Title": "Maximal Rectangle ",
        "Description": "b'Given a rows x cols\\xc2\\xa0binary matrix filled with 0\\'s and 1\\'s, find the largest rectangle containing only 1\\'s and return its area.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\\nOutput: 6\\nExplanation: The maximal rectangle is shown in the above picture.\\n\\nExample 2:\\nInput: matrix = [[\"0\"]]\\nOutput: 0\\n\\nExample 3:\\nInput: matrix = [[\"1\"]]\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nrows == matrix.length\\ncols == matrix[i].length\\n1 <= row, cols <= 200\\nmatrix[i][j] is \\'0\\' or \\'1\\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/partition-list",
        "Title": "Partition List ",
        "Description": "b'Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.\\nYou should preserve the original relative order of the nodes in each of the two partitions.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: head = [1,4,3,2,5,2], x = 3\\nOutput: [1,2,2,4,3,5]\\n\\nExample 2:\\nInput: head = [2,1], x = 2\\nOutput: [1,2]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the list is in the range [0, 200].\\n-100 <= Node.val <= 100\\n-200 <= x <= 200\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/scramble-string",
        "Title": "Scramble String ",
        "Description": "b'We can scramble a string s to get a string t using the following algorithm:\\n\\nIf the length of the string is 1, stop.\\nIf the length of the string is > 1, do the following:\\n\\t\\nSplit the string into two non-empty substrings at a random index, i.e., if the string is s, divide it to x and y where s = x + y.\\nRandomly\\xc2\\xa0decide to swap the two substrings or to keep them in the same order. i.e., after this step, s may become s = x + y or s = y + x.\\nApply step 1 recursively on each of the two substrings x and y.\\n\\n\\n\\nGiven two strings s1 and s2 of the same length, return true if s2 is a scrambled string of s1, otherwise, return false.\\n\\xc2\\xa0\\nExample 1:\\nInput: s1 = \"great\", s2 = \"rgeat\"\\nOutput: true\\nExplanation: One possible scenario applied on s1 is:\\n\"great\" --> \"gr/eat\" // divide at random index.\\n\"gr/eat\" --> \"gr/eat\" // random decision is not to swap the two substrings and keep them in order.\\n\"gr/eat\" --> \"g/r / e/at\" // apply the same algorithm recursively on both substrings. divide at random index each of them.\\n\"g/r / e/at\" --> \"r/g / e/at\" // random decision was to swap the first substring and to keep the second substring in the same order.\\n\"r/g / e/at\" --> \"r/g / e/ a/t\" // again apply the algorithm recursively, divide \"at\" to \"a/t\".\\n\"r/g / e/ a/t\" --> \"r/g / e/ a/t\" // random decision is to keep both substrings in the same order.\\nThe algorithm stops now, and the result string is \"rgeat\" which is s2.\\nAs one possible scenario led s1 to be scrambled to s2, we return true.\\n\\nExample 2:\\nInput: s1 = \"abcde\", s2 = \"caebd\"\\nOutput: false\\n\\nExample 3:\\nInput: s1 = \"a\", s2 = \"a\"\\nOutput: true\\n\\n\\xc2\\xa0\\nConstraints:\\n\\ns1.length == s2.length\\n1 <= s1.length <= 30\\ns1 and s2 consist of lowercase English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/merge-sorted-array",
        "Title": "Merge Sorted Array ",
        "Description": "b'You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.\\nMerge nums1 and nums2 into a single array sorted in non-decreasing order.\\nThe final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\\nOutput: [1,2,2,3,5,6]\\nExplanation: The arrays we are merging are [1,2,3] and [2,5,6].\\nThe result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.\\n\\nExample 2:\\nInput: nums1 = [1], m = 1, nums2 = [], n = 0\\nOutput: [1]\\nExplanation: The arrays we are merging are [1] and [].\\nThe result of the merge is [1].\\n\\nExample 3:\\nInput: nums1 = [0], m = 0, nums2 = [1], n = 1\\nOutput: [1]\\nExplanation: The arrays we are merging are [] and [1].\\nThe result of the merge is [1].\\nNote that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nnums1.length == m + n\\nnums2.length == n\\n0 <= m, n <= 200\\n1 <= m + n <= 200\\n-109 <= nums1[i], nums2[j] <= 109\\n\\n\\xc2\\xa0\\nFollow up: Can you come up with an algorithm that runs in O(m + n) time?\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/gray-code",
        "Title": "Gray Code ",
        "Description": "b'An n-bit gray code sequence is a sequence of 2n integers where:\\n\\nEvery integer is in the inclusive range [0, 2n - 1],\\nThe first integer is 0,\\nAn integer appears no more than once in the sequence,\\nThe binary representation of every pair of adjacent integers differs by exactly one bit, and\\nThe binary representation of the first and last integers differs by exactly one bit.\\n\\nGiven an integer n, return any valid n-bit gray code sequence.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 2\\nOutput: [0,1,3,2]\\nExplanation:\\nThe binary representation of [0,1,3,2] is [00,01,11,10].\\n- 00 and 01 differ by one bit\\n- 01 and 11 differ by one bit\\n- 11 and 10 differ by one bit\\n- 10 and 00 differ by one bit\\n[0,2,3,1] is also a valid gray code sequence, whose binary representation is [00,10,11,01].\\n- 00 and 10 differ by one bit\\n- 10 and 11 differ by one bit\\n- 11 and 01 differ by one bit\\n- 01 and 00 differ by one bit\\n\\nExample 2:\\nInput: n = 1\\nOutput: [0,1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 16\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/subsets-ii",
        "Title": "Subsets II ",
        "Description": "b'Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\\nThe solution set must not contain duplicate subsets. Return the solution in any order.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,2,2]\\nOutput: [[],[1],[1,2],[1,2,2],[2],[2,2]]\\nExample 2:\\nInput: nums = [0]\\nOutput: [[],[0]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 10\\n-10 <= nums[i] <= 10\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/decode-ways",
        "Title": "Decode Ways ",
        "Description": "b'A message containing letters from A-Z can be encoded into numbers using the following mapping:\\n\\'A\\' -> \"1\"\\n\\'B\\' -> \"2\"\\n...\\n\\'Z\\' -> \"26\"\\n\\nTo decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, \"11106\" can be mapped into:\\n\\n\"AAJF\" with the grouping (1 1 10 6)\\n\"KJF\" with the grouping (11 10 6)\\n\\nNote that the grouping (1 11 06) is invalid because \"06\" cannot be mapped into \\'F\\' since \"6\" is different from \"06\".\\nGiven a string s containing only digits, return the number of ways to decode it.\\nThe test cases are generated so that the answer fits in a 32-bit integer.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"12\"\\nOutput: 2\\nExplanation: \"12\" could be decoded as \"AB\" (1 2) or \"L\" (12).\\n\\nExample 2:\\nInput: s = \"226\"\\nOutput: 3\\nExplanation: \"226\" could be decoded as \"BZ\" (2 26), \"VF\" (22 6), or \"BBF\" (2 2 6).\\n\\nExample 3:\\nInput: s = \"06\"\\nOutput: 0\\nExplanation: \"06\" cannot be mapped to \"F\" because of the leading zero (\"6\" is different from \"06\").\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 100\\ns contains only digits and may contain leading zero(s).\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/reverse-linked-list-ii",
        "Title": "Reverse Linked List II ",
        "Description": "b'Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: head = [1,2,3,4,5], left = 2, right = 4\\nOutput: [1,4,3,2,5]\\n\\nExample 2:\\nInput: head = [5], left = 1, right = 1\\nOutput: [5]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the list is n.\\n1 <= n <= 500\\n-500 <= Node.val <= 500\\n1 <= left <= right <= n\\n\\n\\xc2\\xa0\\nFollow up: Could you do it in one pass?'"
    },
    {
        "URL": "https://leetcode.com/problems/restore-ip-addresses",
        "Title": "Restore IP Addresses ",
        "Description": "b'A valid IP address consists of exactly four integers separated by single dots. Each integer is between 0 and 255 (inclusive) and cannot have leading zeros.\\n\\nFor example, \"0.1.2.201\" and \"192.168.1.1\" are valid IP addresses, but \"0.011.255.245\", \"192.168.1.312\" and \"192.168@1.1\" are invalid IP addresses.\\n\\nGiven a string s containing only digits, return all possible valid IP addresses that can be formed by inserting dots into s. You are not allowed to reorder or remove any digits in s. You may return the valid IP addresses in any order.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"25525511135\"\\nOutput: [\"255.255.11.135\",\"255.255.111.35\"]\\n\\nExample 2:\\nInput: s = \"0000\"\\nOutput: [\"0.0.0.0\"]\\n\\nExample 3:\\nInput: s = \"101023\"\\nOutput: [\"1.0.10.23\",\"1.0.102.3\",\"10.1.0.23\",\"10.10.2.3\",\"101.0.2.3\"]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 20\\ns consists of digits only.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/binary-tree-inorder-traversal",
        "Title": "Binary Tree Inorder Traversal ",
        "Description": "b\"Given the root of a binary tree, return the inorder traversal of its nodes' values.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [1,null,2,3]\\nOutput: [1,3,2]\\n\\nExample 2:\\nInput: root = []\\nOutput: []\\n\\nExample 3:\\nInput: root = [1]\\nOutput: [1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [0, 100].\\n-100 <= Node.val <= 100\\n\\n\\xc2\\xa0\\nFollow up: Recursive solution is trivial, could you do it iteratively?\""
    },
    {
        "URL": "https://leetcode.com/problems/unique-binary-search-trees-ii",
        "Title": "Unique Binary Search Trees II ",
        "Description": "b\"Given an integer n, return all the structurally unique BST's (binary search trees), which has exactly n nodes of unique values from 1 to n. Return the answer in any order.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: n = 3\\nOutput: [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]\\n\\nExample 2:\\nInput: n = 1\\nOutput: [[1]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 8\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/unique-binary-search-trees",
        "Title": "Unique Binary Search Trees ",
        "Description": "b\"Given an integer n, return the number of structurally unique BST's (binary search trees) which has exactly n nodes of unique values from 1 to n.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: n = 3\\nOutput: 5\\n\\nExample 2:\\nInput: n = 1\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 19\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/interleaving-string",
        "Title": "Interleaving String ",
        "Description": "b'Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.\\nAn interleaving of two strings s and t is a configuration where they are divided into non-empty substrings such that:\\n\\ns = s1 + s2 + ... + sn\\nt = t1 + t2 + ... + tm\\n|n - m| <= 1\\nThe interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...\\n\\nNote: a + b is the concatenation of strings a and b.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbcbcac\"\\nOutput: true\\n\\nExample 2:\\nInput: s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbbaccc\"\\nOutput: false\\n\\nExample 3:\\nInput: s1 = \"\", s2 = \"\", s3 = \"\"\\nOutput: true\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= s1.length, s2.length <= 100\\n0 <= s3.length <= 200\\ns1, s2, and s3 consist of lowercase English letters.\\n\\n\\xc2\\xa0\\nFollow up: Could you solve it using only O(s2.length) additional memory space?\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/validate-binary-search-tree",
        "Title": "Validate Binary Search Tree ",
        "Description": "b\"Given the root of a binary tree, determine if it is a valid binary search tree (BST).\\nA valid BST is defined as follows:\\n\\nThe left subtree of a node contains only nodes with keys less than the node's key.\\nThe right subtree of a node contains only nodes with keys greater than the node's key.\\nBoth the left and right subtrees must also be binary search trees.\\n\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [2,1,3]\\nOutput: true\\n\\nExample 2:\\n\\nInput: root = [5,1,4,null,null,3,6]\\nOutput: false\\nExplanation: The root node's value is 5 but its right child's value is 4.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [1, 104].\\n-231 <= Node.val <= 231 - 1\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/recover-binary-search-tree",
        "Title": "Recover Binary Search Tree ",
        "Description": "b'You are given the root of a binary search tree (BST), where the values of exactly two nodes of the tree were swapped by mistake. Recover the tree without changing its structure.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [1,3,null,null,2]\\nOutput: [3,1,null,null,2]\\nExplanation: 3 cannot be a left child of 1 because 3 > 1. Swapping 1 and 3 makes the BST valid.\\n\\nExample 2:\\n\\nInput: root = [3,1,4,null,null,2]\\nOutput: [2,1,4,null,null,3]\\nExplanation: 2 cannot be in the right subtree of 3 because 2 < 3. Swapping 2 and 3 makes the BST valid.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [2, 1000].\\n-231 <= Node.val <= 231 - 1\\n\\n\\xc2\\xa0\\nFollow up: A solution using O(n) space is pretty straight-forward. Could you devise a constant O(1) space solution?'"
    },
    {
        "URL": "https://leetcode.com/problems/same-tree",
        "Title": "Same Tree ",
        "Description": "b'Given the roots of two binary trees p and q, write a function to check if they are the same or not.\\nTwo binary trees are considered the same if they are structurally identical, and the nodes have the same value.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: p = [1,2,3], q = [1,2,3]\\nOutput: true\\n\\nExample 2:\\n\\nInput: p = [1,2], q = [1,null,2]\\nOutput: false\\n\\nExample 3:\\n\\nInput: p = [1,2,1], q = [1,1,2]\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in both trees is in the range [0, 100].\\n-104 <= Node.val <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/symmetric-tree",
        "Title": "Symmetric Tree ",
        "Description": "b'Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [1,2,2,3,4,4,3]\\nOutput: true\\n\\nExample 2:\\n\\nInput: root = [1,2,2,null,3,null,3]\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [1, 1000].\\n-100 <= Node.val <= 100\\n\\n\\xc2\\xa0\\nFollow up: Could you solve it both recursively and iteratively?'"
    },
    {
        "URL": "https://leetcode.com/problems/binary-tree-level-order-traversal",
        "Title": "Binary Tree Level Order Traversal ",
        "Description": "b\"Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [3,9,20,null,null,15,7]\\nOutput: [[3],[9,20],[15,7]]\\n\\nExample 2:\\nInput: root = [1]\\nOutput: [[1]]\\n\\nExample 3:\\nInput: root = []\\nOutput: []\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [0, 2000].\\n-1000 <= Node.val <= 1000\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal",
        "Title": "Binary Tree Zigzag Level Order Traversal ",
        "Description": "b\"Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [3,9,20,null,null,15,7]\\nOutput: [[3],[20,9],[15,7]]\\n\\nExample 2:\\nInput: root = [1]\\nOutput: [[1]]\\n\\nExample 3:\\nInput: root = []\\nOutput: []\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [0, 2000].\\n-100 <= Node.val <= 100\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/maximum-depth-of-binary-tree",
        "Title": "Maximum Depth of Binary Tree ",
        "Description": "b\"Given the root of a binary tree, return its maximum depth.\\nA binary tree's maximum depth\\xc2\\xa0is the number of nodes along the longest path from the root node down to the farthest leaf node.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [3,9,20,null,null,15,7]\\nOutput: 3\\n\\nExample 2:\\nInput: root = [1,null,2]\\nOutput: 2\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [0, 104].\\n-100 <= Node.val <= 100\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal",
        "Title": "Construct Binary Tree from Preorder and Inorder Traversal ",
        "Description": "b'Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]\\nOutput: [3,9,20,null,null,15,7]\\n\\nExample 2:\\nInput: preorder = [-1], inorder = [-1]\\nOutput: [-1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= preorder.length <= 3000\\ninorder.length == preorder.length\\n-3000 <= preorder[i], inorder[i] <= 3000\\npreorder and inorder consist of unique values.\\nEach value of inorder also appears in preorder.\\npreorder is guaranteed to be the preorder traversal of the tree.\\ninorder is guaranteed to be the inorder traversal of the tree.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal",
        "Title": "Construct Binary Tree from Inorder and Postorder Traversal ",
        "Description": "b'Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree, construct and return the binary tree.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]\\nOutput: [3,9,20,null,null,15,7]\\n\\nExample 2:\\nInput: inorder = [-1], postorder = [-1]\\nOutput: [-1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= inorder.length <= 3000\\npostorder.length == inorder.length\\n-3000 <= inorder[i], postorder[i] <= 3000\\ninorder and postorder consist of unique values.\\nEach value of postorder also appears in inorder.\\ninorder is guaranteed to be the inorder traversal of the tree.\\npostorder is guaranteed to be the postorder traversal of the tree.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/binary-tree-level-order-traversal-ii",
        "Title": "Binary Tree Level Order Traversal II ",
        "Description": "b\"Given the root of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, level by level from leaf to root).\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [3,9,20,null,null,15,7]\\nOutput: [[15,7],[9,20],[3]]\\n\\nExample 2:\\nInput: root = [1]\\nOutput: [[1]]\\n\\nExample 3:\\nInput: root = []\\nOutput: []\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [0, 2000].\\n-1000 <= Node.val <= 1000\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree",
        "Title": "Convert Sorted Array to Binary Search Tree ",
        "Description": "b'Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.\\nA height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: nums = [-10,-3,0,5,9]\\nOutput: [0,-3,9,-10,null,5]\\nExplanation: [0,-10,5,null,-3,null,9] is also accepted:\\n\\n\\nExample 2:\\n\\nInput: nums = [1,3]\\nOutput: [3,1]\\nExplanation: [1,null,3] and [3,1] are both height-balanced BSTs.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 104\\n-104 <= nums[i] <= 104\\nnums is sorted in a strictly increasing order.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree",
        "Title": "Convert Sorted List to Binary Search Tree ",
        "Description": "b'Given the head of a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.\\nFor this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: head = [-10,-3,0,5,9]\\nOutput: [0,-3,9,-10,null,5]\\nExplanation: One possible answer is [0,-3,9,-10,null,5], which represents the shown height balanced BST.\\n\\nExample 2:\\nInput: head = []\\nOutput: []\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in head is in the range [0, 2 * 104].\\n-105 <= Node.val <= 105\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/balanced-binary-tree",
        "Title": "Balanced Binary Tree ",
        "Description": "b'Given a binary tree, determine if it is height-balanced.\\nFor this problem, a height-balanced binary tree is defined as:\\n\\na binary tree in which the left and right subtrees of every node differ in height by no more than 1.\\n\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [3,9,20,null,null,15,7]\\nOutput: true\\n\\nExample 2:\\n\\nInput: root = [1,2,2,3,3,null,null,4,4]\\nOutput: false\\n\\nExample 3:\\nInput: root = []\\nOutput: true\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [0, 5000].\\n-104 <= Node.val <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/minimum-depth-of-binary-tree",
        "Title": "Minimum Depth of Binary Tree ",
        "Description": "b'Given a binary tree, find its minimum depth.\\nThe minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.\\nNote:\\xc2\\xa0A leaf is a node with no children.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [3,9,20,null,null,15,7]\\nOutput: 2\\n\\nExample 2:\\nInput: root = [2,null,3,null,4,null,5,null,6]\\nOutput: 5\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [0, 105].\\n-1000 <= Node.val <= 1000\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/path-sum",
        "Title": "Path Sum ",
        "Description": "b'Given the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum.\\nA leaf is a node with no children.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22\\nOutput: true\\nExplanation: The root-to-leaf path with the target sum is shown.\\n\\nExample 2:\\n\\nInput: root = [1,2,3], targetSum = 5\\nOutput: false\\nExplanation: There two root-to-leaf paths in the tree:\\n(1 --> 2): The sum is 3.\\n(1 --> 3): The sum is 4.\\nThere is no root-to-leaf path with sum = 5.\\n\\nExample 3:\\nInput: root = [], targetSum = 0\\nOutput: false\\nExplanation: Since the tree is empty, there are no root-to-leaf paths.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [0, 5000].\\n-1000 <= Node.val <= 1000\\n-1000 <= targetSum <= 1000\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/path-sum-ii",
        "Title": "Path Sum II ",
        "Description": "b'Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where the sum of the node values in the path equals targetSum. Each path should be returned as a list of the node values, not node references.\\nA root-to-leaf path is a path starting from the root and ending at any leaf node. A leaf is a node with no children.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\\nOutput: [[5,4,11,2],[5,8,4,5]]\\nExplanation: There are two paths whose sum equals targetSum:\\n5 + 4 + 11 + 2 = 22\\n5 + 8 + 4 + 5 = 22\\n\\nExample 2:\\n\\nInput: root = [1,2,3], targetSum = 5\\nOutput: []\\n\\nExample 3:\\nInput: root = [1,2], targetSum = 0\\nOutput: []\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [0, 5000].\\n-1000 <= Node.val <= 1000\\n-1000 <= targetSum <= 1000\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/flatten-binary-tree-to-linked-list",
        "Title": "Flatten Binary Tree to Linked List ",
        "Description": "b'Given the root of a binary tree, flatten the tree into a \"linked list\":\\n\\nThe \"linked list\" should use the same TreeNode class where the right child pointer points to the next node in the list and the left child pointer is always null.\\nThe \"linked list\" should be in the same order as a pre-order traversal of the binary tree.\\n\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [1,2,5,3,4,null,6]\\nOutput: [1,null,2,null,3,null,4,null,5,null,6]\\n\\nExample 2:\\nInput: root = []\\nOutput: []\\n\\nExample 3:\\nInput: root = [0]\\nOutput: [0]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [0, 2000].\\n-100 <= Node.val <= 100\\n\\n\\xc2\\xa0\\nFollow up: Can you flatten the tree in-place (with O(1) extra space)?'"
    },
    {
        "URL": "https://leetcode.com/problems/distinct-subsequences",
        "Title": "Distinct Subsequences ",
        "Description": "b'Given two strings s and t, return the number of distinct subsequences of s which equals t.\\nA string\\'s subsequence is a new string formed from the original string by deleting some (can be none) of the characters without disturbing the remaining characters\\' relative positions. (i.e., \"ACE\" is a subsequence of \"ABCDE\" while \"AEC\" is not).\\nThe test cases are generated so that the answer fits on a 32-bit signed integer.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"rabbbit\", t = \"rabbit\"\\nOutput: 3\\nExplanation:\\nAs shown below, there are 3 ways you can generate \"rabbit\" from S.\\nrabbbit\\nrabbbit\\nrabbbit\\n\\nExample 2:\\nInput: s = \"babgbag\", t = \"bag\"\\nOutput: 5\\nExplanation:\\nAs shown below, there are 5 ways you can generate \"bag\" from S.\\nbabgbag\\nbabgbag\\nbabgbag\\nbabgbag\\nbabgbag\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length, t.length <= 1000\\ns and t consist of English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/populating-next-right-pointers-in-each-node",
        "Title": "Populating Next Right Pointers in Each Node ",
        "Description": "b\"You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:\\nstruct Node {\\n  int val;\\n  Node *left;\\n  Node *right;\\n  Node *next;\\n}\\n\\nPopulate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.\\nInitially, all next pointers are set to NULL.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [1,2,3,4,5,6,7]\\nOutput: [1,#,2,3,#,4,5,6,7,#]\\nExplanation: Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.\\n\\nExample 2:\\nInput: root = []\\nOutput: []\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [0, 212 - 1].\\n-1000 <= Node.val <= 1000\\n\\n\\xc2\\xa0\\nFollow-up:\\n\\nYou may only use constant extra space.\\nThe recursive approach is fine. You may assume implicit stack space does not count as extra space for this problem.\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/populating-next-right-pointers-in-each-node-ii",
        "Title": "Populating Next Right Pointers in Each Node II ",
        "Description": "b\"Given a binary tree\\nstruct Node {\\n  int val;\\n  Node *left;\\n  Node *right;\\n  Node *next;\\n}\\n\\nPopulate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.\\nInitially, all next pointers are set to NULL.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [1,2,3,4,5,null,7]\\nOutput: [1,#,2,3,#,4,5,7,#]\\nExplanation: Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.\\n\\nExample 2:\\nInput: root = []\\nOutput: []\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [0, 6000].\\n-100 <= Node.val <= 100\\n\\n\\xc2\\xa0\\nFollow-up:\\n\\nYou may only use constant extra space.\\nThe recursive approach is fine. You may assume implicit stack space does not count as extra space for this problem.\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/pascals-triangle",
        "Title": "Pascal's Triangle ",
        "Description": "b\"Given an integer numRows, return the first numRows of Pascal's triangle.\\nIn Pascal's triangle, each number is the sum of the two numbers directly above it as shown:\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: numRows = 5\\nOutput: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]\\nExample 2:\\nInput: numRows = 1\\nOutput: [[1]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= numRows <= 30\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/pascals-triangle-ii",
        "Title": "Pascal's Triangle II ",
        "Description": "b\"Given an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal's triangle.\\nIn Pascal's triangle, each number is the sum of the two numbers directly above it as shown:\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: rowIndex = 3\\nOutput: [1,3,3,1]\\nExample 2:\\nInput: rowIndex = 0\\nOutput: [1]\\nExample 3:\\nInput: rowIndex = 1\\nOutput: [1,1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= rowIndex <= 33\\n\\n\\xc2\\xa0\\nFollow up: Could you optimize your algorithm to use only O(rowIndex) extra space?\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/triangle",
        "Title": "Triangle ",
        "Description": "b'Given a triangle array, return the minimum path sum from top to bottom.\\nFor each step, you may move to an adjacent number of the row below. More formally, if you are on index i on the current row, you may move to either index i or index i + 1 on the next row.\\n\\xc2\\xa0\\nExample 1:\\nInput: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]\\nOutput: 11\\nExplanation: The triangle looks like:\\n   2\\n  3 4\\n 6 5 7\\n4 1 8 3\\nThe minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).\\n\\nExample 2:\\nInput: triangle = [[-10]]\\nOutput: -10\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= triangle.length <= 200\\ntriangle[0].length == 1\\ntriangle[i].length == triangle[i - 1].length + 1\\n-104 <= triangle[i][j] <= 104\\n\\n\\xc2\\xa0\\nFollow up: Could you\\xc2\\xa0do this using only O(n) extra space, where n is the total number of rows in the triangle?'"
    },
    {
        "URL": "https://leetcode.com/problems/best-time-to-buy-and-sell-stock",
        "Title": "Best Time to Buy and Sell Stock ",
        "Description": "b'You are given an array prices where prices[i] is the price of a given stock on the ith day.\\nYou want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.\\nReturn the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.\\n\\xc2\\xa0\\nExample 1:\\nInput: prices = [7,1,5,3,6,4]\\nOutput: 5\\nExplanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\\nNote that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.\\n\\nExample 2:\\nInput: prices = [7,6,4,3,1]\\nOutput: 0\\nExplanation: In this case, no transactions are done and the max profit = 0.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= prices.length <= 105\\n0 <= prices[i] <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii",
        "Title": "Best Time to Buy and Sell Stock II ",
        "Description": "b'You are given an integer array prices where prices[i] is the price of a given stock on the ith day.\\nOn each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.\\nFind and return the maximum profit you can achieve.\\n\\xc2\\xa0\\nExample 1:\\nInput: prices = [7,1,5,3,6,4]\\nOutput: 7\\nExplanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.\\nThen buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.\\nTotal profit is 4 + 3 = 7.\\n\\nExample 2:\\nInput: prices = [1,2,3,4,5]\\nOutput: 4\\nExplanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\\nTotal profit is 4.\\n\\nExample 3:\\nInput: prices = [7,6,4,3,1]\\nOutput: 0\\nExplanation: There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= prices.length <= 3 * 104\\n0 <= prices[i] <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii",
        "Title": "Best Time to Buy and Sell Stock III ",
        "Description": "b'You are given an array prices where prices[i] is the price of a given stock on the ith day.\\nFind the maximum profit you can achieve. You may complete at most two transactions.\\nNote: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\\n\\xc2\\xa0\\nExample 1:\\nInput: prices = [3,3,5,0,0,3,1,4]\\nOutput: 6\\nExplanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\\nThen buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.\\nExample 2:\\nInput: prices = [1,2,3,4,5]\\nOutput: 4\\nExplanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\\nNote that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.\\n\\nExample 3:\\nInput: prices = [7,6,4,3,1]\\nOutput: 0\\nExplanation: In this case, no transaction is done, i.e. max profit = 0.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= prices.length <= 105\\n0 <= prices[i] <= 105\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/binary-tree-maximum-path-sum",
        "Title": "Binary Tree Maximum Path Sum ",
        "Description": "b\"A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.\\nThe path sum of a path is the sum of the node's values in the path.\\nGiven the root of a binary tree, return the maximum path sum of any non-empty path.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [1,2,3]\\nOutput: 6\\nExplanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.\\n\\nExample 2:\\n\\nInput: root = [-10,9,20,null,null,15,7]\\nOutput: 42\\nExplanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [1, 3 * 104].\\n-1000 <= Node.val <= 1000\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/valid-palindrome",
        "Title": "Valid Palindrome ",
        "Description": "b'A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.\\nGiven a string s, return true if it is a palindrome, or false otherwise.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"A man, a plan, a canal: Panama\"\\nOutput: true\\nExplanation: \"amanaplanacanalpanama\" is a palindrome.\\n\\nExample 2:\\nInput: s = \"race a car\"\\nOutput: false\\nExplanation: \"raceacar\" is not a palindrome.\\n\\nExample 3:\\nInput: s = \" \"\\nOutput: true\\nExplanation: s is an empty string \"\" after removing non-alphanumeric characters.\\nSince an empty string reads the same forward and backward, it is a palindrome.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 2 * 105\\ns consists only of printable ASCII characters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/word-ladder-ii",
        "Title": "Word Ladder II ",
        "Description": "b'A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:\\n\\nEvery adjacent pair of words differs by a single letter.\\nEvery si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.\\nsk == endWord\\n\\nGiven two words, beginWord and endWord, and a dictionary wordList, return all the shortest transformation sequences from beginWord to endWord, or an empty list if no such sequence exists. Each sequence should be returned as a list of the words [beginWord, s1, s2, ..., sk].\\n\\xc2\\xa0\\nExample 1:\\nInput: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\\nOutput: [[\"hit\",\"hot\",\"dot\",\"dog\",\"cog\"],[\"hit\",\"hot\",\"lot\",\"log\",\"cog\"]]\\nExplanation:\\xc2\\xa0There are 2 shortest transformation sequences:\\n\"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> \"cog\"\\n\"hit\" -> \"hot\" -> \"lot\" -> \"log\" -> \"cog\"\\n\\nExample 2:\\nInput: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\\nOutput: []\\nExplanation: The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= beginWord.length <= 5\\nendWord.length == beginWord.length\\n1 <= wordList.length <= 500\\nwordList[i].length == beginWord.length\\nbeginWord, endWord, and wordList[i] consist of lowercase English letters.\\nbeginWord != endWord\\nAll the words in wordList are unique.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/word-ladder",
        "Title": "Word Ladder ",
        "Description": "b'A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:\\n\\nEvery adjacent pair of words differs by a single letter.\\nEvery si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.\\nsk == endWord\\n\\nGiven two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.\\n\\xc2\\xa0\\nExample 1:\\nInput: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\\nOutput: 5\\nExplanation: One shortest transformation sequence is \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> cog\", which is 5 words long.\\n\\nExample 2:\\nInput: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\\nOutput: 0\\nExplanation: The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= beginWord.length <= 10\\nendWord.length == beginWord.length\\n1 <= wordList.length <= 5000\\nwordList[i].length == beginWord.length\\nbeginWord, endWord, and wordList[i] consist of lowercase English letters.\\nbeginWord != endWord\\nAll the words in wordList are unique.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/longest-consecutive-sequence",
        "Title": "Longest Consecutive Sequence ",
        "Description": "b'Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.\\nYou must write an algorithm that runs in\\xc2\\xa0O(n)\\xc2\\xa0time.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [100,4,200,1,3,2]\\nOutput: 4\\nExplanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.\\n\\nExample 2:\\nInput: nums = [0,3,7,2,5,8,4,6,0,1]\\nOutput: 9\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= nums.length <= 105\\n-109 <= nums[i] <= 109\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/sum-root-to-leaf-numbers",
        "Title": "Sum Root to Leaf Numbers ",
        "Description": "b'You are given the root of a binary tree containing digits from 0 to 9 only.\\nEach root-to-leaf path in the tree represents a number.\\n\\nFor example, the root-to-leaf path 1 -> 2 -> 3 represents the number 123.\\n\\nReturn the total sum of all root-to-leaf numbers. Test cases are generated so that the answer will fit in a 32-bit integer.\\nA leaf node is a node with no children.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [1,2,3]\\nOutput: 25\\nExplanation:\\nThe root-to-leaf path 1->2 represents the number 12.\\nThe root-to-leaf path 1->3 represents the number 13.\\nTherefore, sum = 12 + 13 = 25.\\n\\nExample 2:\\n\\nInput: root = [4,9,0,5,1]\\nOutput: 1026\\nExplanation:\\nThe root-to-leaf path 4->9->5 represents the number 495.\\nThe root-to-leaf path 4->9->1 represents the number 491.\\nThe root-to-leaf path 4->0 represents the number 40.\\nTherefore, sum = 495 + 491 + 40 = 1026.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [1, 1000].\\n0 <= Node.val <= 9\\nThe depth of the tree will not exceed 10.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/surrounded-regions",
        "Title": "Surrounded Regions ",
        "Description": "b'Given an m x n matrix board containing \\'X\\' and \\'O\\', capture all regions that are 4-directionally\\xc2\\xa0surrounded by \\'X\\'.\\nA region is captured by flipping all \\'O\\'s into \\'X\\'s in that surrounded region.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: board = [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"O\",\"X\"],[\"X\",\"X\",\"O\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]\\nOutput: [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]\\nExplanation: Surrounded regions should not be on the border, which means that any \\'O\\' on the border of the board are not flipped to \\'X\\'. Any \\'O\\' that is not on the border and it is not connected to an \\'O\\' on the border will be flipped to \\'X\\'. Two cells are connected if they are adjacent cells connected horizontally or vertically.\\n\\nExample 2:\\nInput: board = [[\"X\"]]\\nOutput: [[\"X\"]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == board.length\\nn == board[i].length\\n1 <= m, n <= 200\\nboard[i][j] is \\'X\\' or \\'O\\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/palindrome-partitioning",
        "Title": "Palindrome Partitioning ",
        "Description": "b'Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.\\nA palindrome string is a string that reads the same backward as forward.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"aab\"\\nOutput: [[\"a\",\"a\",\"b\"],[\"aa\",\"b\"]]\\nExample 2:\\nInput: s = \"a\"\\nOutput: [[\"a\"]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 16\\ns contains only lowercase English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/palindrome-partitioning-ii",
        "Title": "Palindrome Partitioning II ",
        "Description": "b'Given a string s, partition s such that every substring of the partition is a palindrome.\\nReturn the minimum cuts needed for a palindrome partitioning of s.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"aab\"\\nOutput: 1\\nExplanation: The palindrome partitioning [\"aa\",\"b\"] could be produced using 1 cut.\\n\\nExample 2:\\nInput: s = \"a\"\\nOutput: 0\\n\\nExample 3:\\nInput: s = \"ab\"\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 2000\\ns consists of lowercase English letters only.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/clone-graph",
        "Title": "Clone Graph ",
        "Description": "b\"Given a reference of a node in a connected undirected graph.\\nReturn a deep copy (clone) of the graph.\\nEach node in the graph contains a value (int) and a list (List[Node]) of its neighbors.\\nclass Node {\\n    public int val;\\n    public List<Node> neighbors;\\n}\\n\\n\\xc2\\xa0\\nTest case format:\\nFor simplicity, each node's value is the same as the node's index (1-indexed). For example, the first node with val == 1, the second node with val == 2, and so on. The graph is represented in the test case using an adjacency list.\\nAn adjacency list is a collection of unordered lists used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.\\nThe given node will always be the first node with val = 1. You must return the copy of the given node as a reference to the cloned graph.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: adjList = [[2,4],[1,3],[2,4],[1,3]]\\nOutput: [[2,4],[1,3],[2,4],[1,3]]\\nExplanation: There are 4 nodes in the graph.\\n1st node (val = 1)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\\n2nd node (val = 2)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).\\n3rd node (val = 3)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\\n4th node (val = 4)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).\\n\\nExample 2:\\n\\nInput: adjList = [[]]\\nOutput: [[]]\\nExplanation: Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors.\\n\\nExample 3:\\nInput: adjList = []\\nOutput: []\\nExplanation: This an empty graph, it does not have any nodes.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the graph is in the range [0, 100].\\n1 <= Node.val <= 100\\nNode.val is unique for each node.\\nThere are no repeated edges and no self-loops in the graph.\\nThe Graph is connected and all nodes can be visited starting from the given node.\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/gas-station",
        "Title": "Gas Station ",
        "Description": "b\"There are n gas stations along a circular route, where the amount of gas at the ith station is gas[i].\\nYou have a car with an unlimited gas tank and it costs cost[i] of gas to travel from the ith station to its next (i + 1)th station. You begin the journey with an empty tank at one of the gas stations.\\nGiven two integer arrays gas and cost, return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return -1. If there exists a solution, it is guaranteed to be unique\\n\\xc2\\xa0\\nExample 1:\\nInput: gas = [1,2,3,4,5], cost = [3,4,5,1,2]\\nOutput: 3\\nExplanation:\\nStart at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\\nTravel to station 4. Your tank = 4 - 1 + 5 = 8\\nTravel to station 0. Your tank = 8 - 2 + 1 = 7\\nTravel to station 1. Your tank = 7 - 3 + 2 = 6\\nTravel to station 2. Your tank = 6 - 4 + 3 = 5\\nTravel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.\\nTherefore, return 3 as the starting index.\\n\\nExample 2:\\nInput: gas = [2,3,4], cost = [3,4,3]\\nOutput: -1\\nExplanation:\\nYou can't start at station 0 or 1, as there is not enough gas to travel to the next station.\\nLet's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\\nTravel to station 0. Your tank = 4 - 3 + 2 = 3\\nTravel to station 1. Your tank = 3 - 3 + 3 = 3\\nYou cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.\\nTherefore, you can't travel around the circuit once no matter where you start.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == gas.length == cost.length\\n1 <= n <= 105\\n0 <= gas[i], cost[i] <= 104\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/candy",
        "Title": "Candy ",
        "Description": "b'There are n children standing in a line. Each child is assigned a rating value given in the integer array ratings.\\nYou are giving candies to these children subjected to the following requirements:\\n\\nEach child must have at least one candy.\\nChildren with a higher rating get more candies than their neighbors.\\n\\nReturn the minimum number of candies you need to have to distribute the candies to the children.\\n\\xc2\\xa0\\nExample 1:\\nInput: ratings = [1,0,2]\\nOutput: 5\\nExplanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.\\n\\nExample 2:\\nInput: ratings = [1,2,2]\\nOutput: 4\\nExplanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.\\nThe third child gets 1 candy because it satisfies the above two conditions.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == ratings.length\\n1 <= n <= 2 * 104\\n0 <= ratings[i] <= 2 * 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/single-number",
        "Title": "Single Number ",
        "Description": "b'Given a non-empty\\xc2\\xa0array of integers nums, every element appears twice except for one. Find that single one.\\nYou must\\xc2\\xa0implement a solution with a linear runtime complexity and use\\xc2\\xa0only constant\\xc2\\xa0extra space.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [2,2,1]\\nOutput: 1\\nExample 2:\\nInput: nums = [4,1,2,1,2]\\nOutput: 4\\nExample 3:\\nInput: nums = [1]\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 3 * 104\\n-3 * 104 <= nums[i] <= 3 * 104\\nEach element in the array appears twice except for one element which appears only once.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/single-number-ii",
        "Title": "Single Number II ",
        "Description": "b'Given an integer array nums where\\xc2\\xa0every element appears three times except for one, which appears exactly once. Find the single element and return it.\\nYou must\\xc2\\xa0implement a solution with a linear runtime complexity and use\\xc2\\xa0only constant\\xc2\\xa0extra space.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [2,2,3,2]\\nOutput: 3\\nExample 2:\\nInput: nums = [0,1,0,1,0,1,99]\\nOutput: 99\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 3 * 104\\n-231 <= nums[i] <= 231 - 1\\nEach element in nums appears exactly three times except for one element which appears once.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/copy-list-with-random-pointer",
        "Title": "Copy List with Random Pointer ",
        "Description": "b'A linked list of length n is given such that each node contains an additional random pointer, which could point to any node in the list, or null.\\nConstruct a deep copy of the list. The deep copy should consist of exactly n brand new nodes, where each new node has its value set to the value of its corresponding original node. Both the next and random pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. None of the pointers in the new list should point to nodes in the original list.\\nFor example, if there are two nodes X and Y in the original list, where X.random --> Y, then for the corresponding two nodes x and y in the copied list, x.random --> y.\\nReturn the head of the copied linked list.\\nThe linked list is represented in the input/output as a list of n nodes. Each node is represented as a pair of [val, random_index] where:\\n\\nval: an integer representing Node.val\\nrandom_index: the index of the node (range from 0 to n-1) that the random pointer points to, or null if it does not point to any node.\\n\\nYour code will only be given the head of the original linked list.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: head = [[7,null],[13,0],[11,4],[10,2],[1,0]]\\nOutput: [[7,null],[13,0],[11,4],[10,2],[1,0]]\\n\\nExample 2:\\n\\nInput: head = [[1,1],[2,1]]\\nOutput: [[1,1],[2,1]]\\n\\nExample 3:\\n\\nInput: head = [[3,null],[3,0],[3,null]]\\nOutput: [[3,null],[3,0],[3,null]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= n <= 1000\\n-104 <= Node.val <= 104\\nNode.random is null or is pointing to some node in the linked list.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/word-break",
        "Title": "Word Break ",
        "Description": "b'Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.\\nNote that the same word in the dictionary may be reused multiple times in the segmentation.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"leetcode\", wordDict = [\"leet\",\"code\"]\\nOutput: true\\nExplanation: Return true because \"leetcode\" can be segmented as \"leet code\".\\n\\nExample 2:\\nInput: s = \"applepenapple\", wordDict = [\"apple\",\"pen\"]\\nOutput: true\\nExplanation: Return true because \"applepenapple\" can be segmented as \"apple pen apple\".\\nNote that you are allowed to reuse a dictionary word.\\n\\nExample 3:\\nInput: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 300\\n1 <= wordDict.length <= 1000\\n1 <= wordDict[i].length <= 20\\ns and wordDict[i] consist of only lowercase English letters.\\nAll the strings of wordDict are unique.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/word-break-ii",
        "Title": "Word Break II ",
        "Description": "b'Given a string s and a dictionary of strings wordDict, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in any order.\\nNote that the same word in the dictionary may be reused multiple times in the segmentation.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"catsanddog\", wordDict = [\"cat\",\"cats\",\"and\",\"sand\",\"dog\"]\\nOutput: [\"cats and dog\",\"cat sand dog\"]\\n\\nExample 2:\\nInput: s = \"pineapplepenapple\", wordDict = [\"apple\",\"pen\",\"applepen\",\"pine\",\"pineapple\"]\\nOutput: [\"pine apple pen apple\",\"pineapple pen apple\",\"pine applepen apple\"]\\nExplanation: Note that you are allowed to reuse a dictionary word.\\n\\nExample 3:\\nInput: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]\\nOutput: []\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 20\\n1 <= wordDict.length <= 1000\\n1 <= wordDict[i].length <= 10\\ns and wordDict[i] consist of only lowercase English letters.\\nAll the strings of wordDict are unique.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/linked-list-cycle",
        "Title": "Linked List Cycle ",
        "Description": "b\"Given head, the head of a linked list, determine if the linked list has a cycle in it.\\nThere is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the\\xc2\\xa0next\\xc2\\xa0pointer. Internally, pos\\xc2\\xa0is used to denote the index of the node that\\xc2\\xa0tail's\\xc2\\xa0next\\xc2\\xa0pointer is connected to.\\xc2\\xa0Note that\\xc2\\xa0pos\\xc2\\xa0is not passed as a parameter.\\nReturn\\xc2\\xa0true if there is a cycle in the linked list. Otherwise, return false.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: head = [3,2,0,-4], pos = 1\\nOutput: true\\nExplanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).\\n\\nExample 2:\\n\\nInput: head = [1,2], pos = 0\\nOutput: true\\nExplanation: There is a cycle in the linked list, where the tail connects to the 0th node.\\n\\nExample 3:\\n\\nInput: head = [1], pos = -1\\nOutput: false\\nExplanation: There is no cycle in the linked list.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of the nodes in the list is in the range [0, 104].\\n-105 <= Node.val <= 105\\npos is -1 or a valid index in the linked-list.\\n\\n\\xc2\\xa0\\nFollow up: Can you solve it using O(1) (i.e. constant) memory?\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/linked-list-cycle-ii",
        "Title": "Linked List Cycle II ",
        "Description": "b\"Given the head of a linked list, return the node where the cycle begins. If there is no cycle, return null.\\nThere is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to (0-indexed). It is -1 if there is no cycle. Note that pos is not passed as a parameter.\\nDo not modify the linked list.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: head = [3,2,0,-4], pos = 1\\nOutput: tail connects to node index 1\\nExplanation: There is a cycle in the linked list, where tail connects to the second node.\\n\\nExample 2:\\n\\nInput: head = [1,2], pos = 0\\nOutput: tail connects to node index 0\\nExplanation: There is a cycle in the linked list, where tail connects to the first node.\\n\\nExample 3:\\n\\nInput: head = [1], pos = -1\\nOutput: no cycle\\nExplanation: There is no cycle in the linked list.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of the nodes in the list is in the range [0, 104].\\n-105 <= Node.val <= 105\\npos is -1 or a valid index in the linked-list.\\n\\n\\xc2\\xa0\\nFollow up: Can you solve it using O(1) (i.e. constant) memory?\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/reorder-list",
        "Title": "Reorder List ",
        "Description": "b\"You are given the head of a singly linked-list. The list can be represented as:\\nL0 \\xe2\\x86\\x92 L1 \\xe2\\x86\\x92 \\xe2\\x80\\xa6 \\xe2\\x86\\x92 Ln - 1 \\xe2\\x86\\x92 Ln\\n\\nReorder the list to be on the following form:\\nL0 \\xe2\\x86\\x92 Ln \\xe2\\x86\\x92 L1 \\xe2\\x86\\x92 Ln - 1 \\xe2\\x86\\x92 L2 \\xe2\\x86\\x92 Ln - 2 \\xe2\\x86\\x92 \\xe2\\x80\\xa6\\n\\nYou may not modify the values in the list's nodes. Only nodes themselves may be changed.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: head = [1,2,3,4]\\nOutput: [1,4,2,3]\\n\\nExample 2:\\n\\nInput: head = [1,2,3,4,5]\\nOutput: [1,5,2,4,3]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the list is in the range [1, 5 * 104].\\n1 <= Node.val <= 1000\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/binary-tree-preorder-traversal",
        "Title": "Binary Tree Preorder Traversal ",
        "Description": "b\"Given the root of a binary tree, return the preorder traversal of its nodes' values.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [1,null,2,3]\\nOutput: [1,2,3]\\n\\nExample 2:\\nInput: root = []\\nOutput: []\\n\\nExample 3:\\nInput: root = [1]\\nOutput: [1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [0, 100].\\n-100 <= Node.val <= 100\\n\\n\\xc2\\xa0\\nFollow up: Recursive solution is trivial, could you do it iteratively?\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/binary-tree-postorder-traversal",
        "Title": "Binary Tree Postorder Traversal ",
        "Description": "b\"Given the root of a\\xc2\\xa0binary tree, return the postorder traversal of its nodes' values.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [1,null,2,3]\\nOutput: [3,2,1]\\n\\nExample 2:\\nInput: root = []\\nOutput: []\\n\\nExample 3:\\nInput: root = [1]\\nOutput: [1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of the nodes in the tree is in the range [0, 100].\\n-100 <= Node.val <= 100\\n\\n\\xc2\\xa0\\nFollow up: Recursive solution is trivial, could you do it iteratively?\""
    },
    {
        "URL": "https://leetcode.com/problems/lru-cache",
        "Title": "LRU Cache ",
        "Description": "b'Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.\\nImplement the LRUCache class:\\n\\nLRUCache(int capacity) Initialize the LRU cache with positive size capacity.\\nint get(int key) Return the value of the key if the key exists, otherwise return -1.\\nvoid put(int key, int value)\\xc2\\xa0Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.\\n\\nThe functions\\xc2\\xa0get\\xc2\\xa0and\\xc2\\xa0put\\xc2\\xa0must each run in O(1) average time complexity.\\n\\xc2\\xa0\\nExample 1:\\nInput\\n[\"LRUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"put\", \"get\", \"get\", \"get\"]\\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]\\nOutput\\n[null, null, null, 1, null, -1, null, -1, 3, 4]\\n\\nExplanation\\nLRUCache lRUCache = new LRUCache(2);\\nlRUCache.put(1, 1); // cache is {1=1}\\nlRUCache.put(2, 2); // cache is {1=1, 2=2}\\nlRUCache.get(1);    // return 1\\nlRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}\\nlRUCache.get(2);    // returns -1 (not found)\\nlRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}\\nlRUCache.get(1);    // return -1 (not found)\\nlRUCache.get(3);    // return 3\\nlRUCache.get(4);    // return 4\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= capacity <= 3000\\n0 <= key <= 104\\n0 <= value <= 105\\nAt most 2\\xc2\\xa0* 105\\xc2\\xa0calls will be made to get and put.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/insertion-sort-list",
        "Title": "Insertion Sort List ",
        "Description": "b\"Given the head of a singly linked list, sort the list using insertion sort, and return the sorted list's head.\\nThe steps of the insertion sort algorithm:\\n\\nInsertion sort iterates, consuming one input element each repetition and growing a sorted output list.\\nAt each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list and inserts it there.\\nIt repeats until no input elements remain.\\n\\nThe following is a graphical example of the insertion sort algorithm. The partially sorted list (black) initially contains only the first element in the list. One element (red) is removed from the input data and inserted in-place into the sorted list with each iteration.\\n\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: head = [4,2,1,3]\\nOutput: [1,2,3,4]\\n\\nExample 2:\\n\\nInput: head = [-1,5,3,4,0]\\nOutput: [-1,0,3,4,5]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the list is in the range [1, 5000].\\n-5000 <= Node.val <= 5000\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/sort-list",
        "Title": "Sort List ",
        "Description": "b'Given the head of a linked list, return the list after sorting it in ascending order.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: head = [4,2,1,3]\\nOutput: [1,2,3,4]\\n\\nExample 2:\\n\\nInput: head = [-1,5,3,4,0]\\nOutput: [-1,0,3,4,5]\\n\\nExample 3:\\nInput: head = []\\nOutput: []\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the list is in the range [0, 5 * 104].\\n-105 <= Node.val <= 105\\n\\n\\xc2\\xa0\\nFollow up: Can you sort the linked list in O(n logn) time and O(1) memory (i.e. constant space)?\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/max-points-on-a-line",
        "Title": "Max Points on a Line ",
        "Description": "b'Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane, return the maximum number of points that lie on the same straight line.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: points = [[1,1],[2,2],[3,3]]\\nOutput: 3\\n\\nExample 2:\\n\\nInput: points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]\\nOutput: 4\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= points.length <= 300\\npoints[i].length == 2\\n-104 <= xi, yi <= 104\\nAll the points are unique.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/evaluate-reverse-polish-notation",
        "Title": "Evaluate Reverse Polish Notation ",
        "Description": "b'Evaluate the value of an arithmetic expression in Reverse Polish Notation.\\nValid operators are +, -, *, and /. Each operand may be an integer or another expression.\\nNote that division between two integers should truncate toward zero.\\nIt is guaranteed that the given RPN expression is always valid. That means the expression would always evaluate to a result, and there will not be any division by zero operation.\\n\\xc2\\xa0\\nExample 1:\\nInput: tokens = [\"2\",\"1\",\"+\",\"3\",\"*\"]\\nOutput: 9\\nExplanation: ((2 + 1) * 3) = 9\\n\\nExample 2:\\nInput: tokens = [\"4\",\"13\",\"5\",\"/\",\"+\"]\\nOutput: 6\\nExplanation: (4 + (13 / 5)) = 6\\n\\nExample 3:\\nInput: tokens = [\"10\",\"6\",\"9\",\"3\",\"+\",\"-11\",\"*\",\"/\",\"*\",\"17\",\"+\",\"5\",\"+\"]\\nOutput: 22\\nExplanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5\\n= ((10 * (6 / (12 * -11))) + 17) + 5\\n= ((10 * (6 / -132)) + 17) + 5\\n= ((10 * 0) + 17) + 5\\n= (0 + 17) + 5\\n= 17 + 5\\n= 22\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= tokens.length <= 104\\ntokens[i] is either an operator: \"+\", \"-\", \"*\", or \"/\", or an integer in the range [-200, 200].\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/reverse-words-in-a-string",
        "Title": "Reverse Words in a String ",
        "Description": "b'Given an input string s, reverse the order of the words.\\nA word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.\\nReturn a string of the words in reverse order concatenated by a single space.\\nNote that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"the sky is blue\"\\nOutput: \"blue is sky the\"\\n\\nExample 2:\\nInput: s = \"  hello world  \"\\nOutput: \"world hello\"\\nExplanation: Your reversed string should not contain leading or trailing spaces.\\n\\nExample 3:\\nInput: s = \"a good   example\"\\nOutput: \"example good a\"\\nExplanation: You need to reduce multiple spaces between two words to a single space in the reversed string.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 104\\ns contains English letters (upper-case and lower-case), digits, and spaces \\' \\'.\\nThere is at least one word in s.\\n\\n\\xc2\\xa0\\nFollow-up:\\xc2\\xa0If the string data type is mutable in your language, can\\xc2\\xa0you solve it\\xc2\\xa0in-place\\xc2\\xa0with\\xc2\\xa0O(1)\\xc2\\xa0extra space?\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/maximum-product-subarray",
        "Title": "Maximum Product Subarray ",
        "Description": "b'Given an integer array nums, find a contiguous non-empty subarray within the array that has the largest product, and return the product.\\nThe test cases are generated so that the answer will fit in a 32-bit integer.\\nA subarray is a contiguous subsequence of the array.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [2,3,-2,4]\\nOutput: 6\\nExplanation: [2,3] has the largest product 6.\\n\\nExample 2:\\nInput: nums = [-2,0,-1]\\nOutput: 0\\nExplanation: The result cannot be 2, because [-2,-1] is not a subarray.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 2 * 104\\n-10 <= nums[i] <= 10\\nThe product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/find-minimum-in-rotated-sorted-array",
        "Title": "Find Minimum in Rotated Sorted Array ",
        "Description": "b'Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:\\n\\n[4,5,6,7,0,1,2] if it was rotated 4 times.\\n[0,1,2,4,5,6,7] if it was rotated 7 times.\\n\\nNotice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].\\nGiven the sorted rotated array nums of unique elements, return the minimum element of this array.\\nYou must write an algorithm that runs in\\xc2\\xa0O(log n) time.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [3,4,5,1,2]\\nOutput: 1\\nExplanation: The original array was [1,2,3,4,5] rotated 3 times.\\n\\nExample 2:\\nInput: nums = [4,5,6,7,0,1,2]\\nOutput: 0\\nExplanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.\\n\\nExample 3:\\nInput: nums = [11,13,15,17]\\nOutput: 11\\nExplanation: The original array was [11,13,15,17] and it was rotated 4 times. \\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == nums.length\\n1 <= n <= 5000\\n-5000 <= nums[i] <= 5000\\nAll the integers of nums are unique.\\nnums is sorted and rotated between 1 and n times.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii",
        "Title": "Find Minimum in Rotated Sorted Array II ",
        "Description": "b'Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,4,4,5,6,7] might become:\\n\\n[4,5,6,7,0,1,4] if it was rotated 4 times.\\n[0,1,4,4,5,6,7] if it was rotated 7 times.\\n\\nNotice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].\\nGiven the sorted rotated array nums that may contain duplicates, return the minimum element of this array.\\nYou must decrease the overall operation steps as much as possible.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,3,5]\\nOutput: 1\\nExample 2:\\nInput: nums = [2,2,2,0,1]\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == nums.length\\n1 <= n <= 5000\\n-5000 <= nums[i] <= 5000\\nnums is sorted and rotated between 1 and n times.\\n\\n\\xc2\\xa0\\nFollow up: This problem is similar to\\xc2\\xa0Find Minimum in Rotated Sorted Array, but\\xc2\\xa0nums may contain duplicates. Would this affect the runtime complexity? How and why?\\n\\xc2\\xa0\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/min-stack",
        "Title": "Min Stack ",
        "Description": "b'Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.\\nImplement the MinStack class:\\n\\nMinStack() initializes the stack object.\\nvoid push(int val) pushes the element val onto the stack.\\nvoid pop() removes the element on the top of the stack.\\nint top() gets the top element of the stack.\\nint getMin() retrieves the minimum element in the stack.\\n\\nYou must implement a solution with O(1) time complexity for each function.\\n\\xc2\\xa0\\nExample 1:\\nInput\\n[\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"]\\n[[],[-2],[0],[-3],[],[],[],[]]\\n\\nOutput\\n[null,null,null,null,-3,null,0,-2]\\n\\nExplanation\\nMinStack minStack = new MinStack();\\nminStack.push(-2);\\nminStack.push(0);\\nminStack.push(-3);\\nminStack.getMin(); // return -3\\nminStack.pop();\\nminStack.top();    // return 0\\nminStack.getMin(); // return -2\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n-231 <= val <= 231 - 1\\nMethods pop, top and getMin operations will always be called on non-empty stacks.\\nAt most 3 * 104 calls will be made to push, pop, top, and getMin.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/binary-tree-upside-down",
        "Title": "Binary Tree Upside Down ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/read-n-characters-given-read4",
        "Title": "Read N Characters Given Read4 ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/read-n-characters-given-read4-ii-call-multiple-times",
        "Title": "Read N Characters Given read4 II - Call Multiple Times ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/longest-substring-with-at-most-two-distinct-characters",
        "Title": "Longest Substring with At Most Two Distinct Characters ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/intersection-of-two-linked-lists",
        "Title": "Intersection of Two Linked Lists ",
        "Description": "b\"Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null.\\nFor example, the following two linked lists begin to intersect at node c1:\\n\\nThe test cases are generated such that there are no cycles anywhere in the entire linked structure.\\nNote that the linked lists must retain their original structure after the function returns.\\nCustom Judge:\\nThe inputs to the judge are given as follows (your program is not given these inputs):\\n\\nintersectVal - The value of the node where the intersection occurs. This is 0 if there is no intersected node.\\nlistA - The first linked list.\\nlistB - The second linked list.\\nskipA - The number of nodes to skip ahead in listA (starting from the head) to get to the intersected node.\\nskipB - The number of nodes to skip ahead in listB (starting from the head) to get to the intersected node.\\n\\nThe judge will then create the linked structure based on these inputs and pass the two heads, headA and headB\\xc2\\xa0to your program. If you correctly return the intersected node, then your solution will be accepted.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3\\nOutput: Intersected at '8'\\nExplanation: The intersected node's value is 8 (note that this must not be 0 if the two lists intersect).\\nFrom the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.\\n\\nExample 2:\\n\\nInput: intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1\\nOutput: Intersected at '2'\\nExplanation: The intersected node's value is 2 (note that this must not be 0 if the two lists intersect).\\nFrom the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.\\n\\nExample 3:\\n\\nInput: intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2\\nOutput: No intersection\\nExplanation: From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.\\nExplanation: The two lists do not intersect, so return null.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes of listA is in the m.\\nThe number of nodes of listB is in the n.\\n1 <= m, n <= 3 * 104\\n1 <= Node.val <= 105\\n0 <= skipA <\\xc2\\xa0m\\n0 <= skipB <\\xc2\\xa0n\\nintersectVal is 0 if listA and listB do not intersect.\\nintersectVal == listA[skipA] == listB[skipB] if listA and listB intersect.\\n\\n\\xc2\\xa0\\nFollow up: Could you write a solution that runs in O(m + n) time and use only O(1) memory?\""
    },
    {
        "URL": "https://leetcode.com/problems/one-edit-distance",
        "Title": "One Edit Distance ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/find-peak-element",
        "Title": "Find Peak Element ",
        "Description": "b'A peak element is an element that is strictly greater than its neighbors.\\nGiven a 0-indexed integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.\\nYou may imagine that nums[-1] = nums[n] = -\\xe2\\x88\\x9e. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.\\nYou must write an algorithm that runs in O(log n) time.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,2,3,1]\\nOutput: 2\\nExplanation: 3 is a peak element and your function should return the index number 2.\\nExample 2:\\nInput: nums = [1,2,1,3,5,6,4]\\nOutput: 5\\nExplanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 1000\\n-231 <= nums[i] <= 231 - 1\\nnums[i] != nums[i + 1] for all valid i.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/missing-ranges",
        "Title": "Missing Ranges ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/maximum-gap",
        "Title": "Maximum Gap ",
        "Description": "b'Given an integer array nums, return the maximum difference between two successive elements in its sorted form. If the array contains less than two elements, return 0.\\nYou must write an algorithm that runs in linear time and uses linear extra space.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [3,6,9,1]\\nOutput: 3\\nExplanation: The sorted form of the array is [1,3,6,9], either (3,6) or (6,9) has the maximum difference 3.\\n\\nExample 2:\\nInput: nums = [10]\\nOutput: 0\\nExplanation: The array contains less than 2 elements, therefore return 0.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 105\\n0 <= nums[i] <= 109\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/compare-version-numbers",
        "Title": "Compare Version Numbers ",
        "Description": "b'Given two version numbers,\\xc2\\xa0version1 and version2, compare them.\\n\\n\\nVersion numbers consist of one or more revisions joined by a dot\\xc2\\xa0\\'.\\'. Each revision\\xc2\\xa0consists of digits\\xc2\\xa0and may contain leading zeros. Every revision contains at least one character. Revisions are 0-indexed from left to right, with the leftmost revision being revision 0, the next revision being revision 1, and so on. For example\\xc2\\xa02.5.33\\xc2\\xa0and\\xc2\\xa00.1\\xc2\\xa0are valid version numbers.\\nTo compare version numbers, compare their revisions in left-to-right order. Revisions are compared using their\\xc2\\xa0integer value ignoring any leading zeros. This means that revisions\\xc2\\xa01\\xc2\\xa0and\\xc2\\xa0001\\xc2\\xa0are considered\\xc2\\xa0equal. If a version number does not specify a revision at an index, then\\xc2\\xa0treat the revision as\\xc2\\xa00. For example, version\\xc2\\xa01.0 is less than version\\xc2\\xa01.1\\xc2\\xa0because their revision 0s are the same, but their revision 1s are\\xc2\\xa00\\xc2\\xa0and\\xc2\\xa01\\xc2\\xa0respectively, and\\xc2\\xa00 < 1.\\nReturn the following:\\n\\nIf version1 < version2, return -1.\\nIf version1 > version2, return 1.\\nOtherwise, return 0.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: version1 = \"1.01\", version2 = \"1.001\"\\nOutput: 0\\nExplanation: Ignoring leading zeroes, both \"01\" and \"001\" represent the same integer \"1\".\\n\\nExample 2:\\nInput: version1 = \"1.0\", version2 = \"1.0.0\"\\nOutput: 0\\nExplanation: version1 does not specify revision 2, which means it is treated as \"0\".\\n\\nExample 3:\\nInput: version1 = \"0.1\", version2 = \"1.1\"\\nOutput: -1\\nExplanation: version1\\'s revision 0 is \"0\", while version2\\'s revision 0 is \"1\". 0 < 1, so version1 < version2.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= version1.length, version2.length <= 500\\nversion1 and version2\\xc2\\xa0only contain digits and \\'.\\'.\\nversion1 and version2\\xc2\\xa0are valid version numbers.\\nAll the given revisions in\\xc2\\xa0version1 and version2\\xc2\\xa0can be stored in\\xc2\\xa0a\\xc2\\xa032-bit integer.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/fraction-to-recurring-decimal",
        "Title": "Fraction to Recurring Decimal ",
        "Description": "b'Given two integers representing the numerator and denominator of a fraction, return the fraction in string format.\\nIf the fractional part is repeating, enclose the repeating part in parentheses.\\nIf multiple answers are possible, return any of them.\\nIt is guaranteed that the length of the answer string is less than 104 for all the given inputs.\\n\\xc2\\xa0\\nExample 1:\\nInput: numerator = 1, denominator = 2\\nOutput: \"0.5\"\\n\\nExample 2:\\nInput: numerator = 2, denominator = 1\\nOutput: \"2\"\\n\\nExample 3:\\nInput: numerator = 4, denominator = 333\\nOutput: \"0.(012)\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n-231 <=\\xc2\\xa0numerator, denominator <= 231 - 1\\ndenominator != 0\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/two-sum-ii-input-array-is-sorted",
        "Title": "Two Sum II - Input Array Is Sorted ",
        "Description": "b'Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 <= numbers.length.\\nReturn the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.\\nThe tests are generated such that there is exactly one solution. You may not use the same element twice.\\nYour solution must use only constant extra space.\\n\\xc2\\xa0\\nExample 1:\\nInput: numbers = [2,7,11,15], target = 9\\nOutput: [1,2]\\nExplanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2].\\n\\nExample 2:\\nInput: numbers = [2,3,4], target = 6\\nOutput: [1,3]\\nExplanation: The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return [1, 3].\\n\\nExample 3:\\nInput: numbers = [-1,0], target = -1\\nOutput: [1,2]\\nExplanation: The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return [1, 2].\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n2 <= numbers.length <= 3 * 104\\n-1000 <= numbers[i] <= 1000\\nnumbers is sorted in non-decreasing order.\\n-1000 <= target <= 1000\\nThe tests are generated such that there is exactly one solution.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/excel-sheet-column-title",
        "Title": "Excel Sheet Column Title ",
        "Description": "b'Given an integer columnNumber, return its corresponding column title as it appears in an Excel sheet.\\nFor example:\\nA -> 1\\nB -> 2\\nC -> 3\\n...\\nZ -> 26\\nAA -> 27\\nAB -> 28 \\n...\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: columnNumber = 1\\nOutput: \"A\"\\n\\nExample 2:\\nInput: columnNumber = 28\\nOutput: \"AB\"\\n\\nExample 3:\\nInput: columnNumber = 701\\nOutput: \"ZY\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= columnNumber <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/majority-element",
        "Title": "Majority Element ",
        "Description": "b'Given an array nums of size n, return the majority element.\\nThe majority element is the element that appears more than \\xe2\\x8c\\x8an / 2\\xe2\\x8c\\x8b times. You may assume that the majority element always exists in the array.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [3,2,3]\\nOutput: 3\\nExample 2:\\nInput: nums = [2,2,1,1,1,2,2]\\nOutput: 2\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == nums.length\\n1 <= n <= 5 * 104\\n-109 <= nums[i] <= 109\\n\\n\\xc2\\xa0\\nFollow-up: Could you solve the problem in linear time and in O(1) space?'"
    },
    {
        "URL": "https://leetcode.com/problems/two-sum-iii-data-structure-design",
        "Title": "Two Sum III - Data structure design ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/excel-sheet-column-number",
        "Title": "Excel Sheet Column Number ",
        "Description": "b'Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\\nFor example:\\nA -> 1\\nB -> 2\\nC -> 3\\n...\\nZ -> 26\\nAA -> 27\\nAB -> 28 \\n...\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: columnTitle = \"A\"\\nOutput: 1\\n\\nExample 2:\\nInput: columnTitle = \"AB\"\\nOutput: 28\\n\\nExample 3:\\nInput: columnTitle = \"ZY\"\\nOutput: 701\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= columnTitle.length <= 7\\ncolumnTitle consists only of uppercase English letters.\\ncolumnTitle is in the range [\"A\", \"FXSHRXW\"].\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/factorial-trailing-zeroes",
        "Title": "Factorial Trailing Zeroes ",
        "Description": "b'Given an integer n, return the number of trailing zeroes in n!.\\nNote that n! = n * (n - 1) * (n - 2) * ... * 3 * 2 * 1.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 3\\nOutput: 0\\nExplanation: 3! = 6, no trailing zero.\\n\\nExample 2:\\nInput: n = 5\\nOutput: 1\\nExplanation: 5! = 120, one trailing zero.\\n\\nExample 3:\\nInput: n = 0\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= n <= 104\\n\\n\\xc2\\xa0\\nFollow up: Could you write a solution that works in logarithmic time complexity?\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/binary-search-tree-iterator",
        "Title": "Binary Search Tree Iterator ",
        "Description": "b'Implement the BSTIterator class that represents an iterator over the in-order traversal of a binary search tree (BST):\\n\\nBSTIterator(TreeNode root) Initializes an object of the BSTIterator class. The root of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.\\nboolean hasNext() Returns true if there exists a number in the traversal to the right of the pointer, otherwise returns false.\\nint next() Moves the pointer to the right, then returns the number at the pointer.\\n\\nNotice that by initializing the pointer to a non-existent smallest number, the first call to next() will return the smallest element in the BST.\\nYou may assume that next() calls will always be valid. That is, there will be at least a next number in the in-order traversal when next() is called.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput\\n[\"BSTIterator\", \"next\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\"]\\n[[[7, 3, 15, null, null, 9, 20]], [], [], [], [], [], [], [], [], []]\\nOutput\\n[null, 3, 7, true, 9, true, 15, true, 20, false]\\n\\nExplanation\\nBSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]);\\nbSTIterator.next();    // return 3\\nbSTIterator.next();    // return 7\\nbSTIterator.hasNext(); // return True\\nbSTIterator.next();    // return 9\\nbSTIterator.hasNext(); // return True\\nbSTIterator.next();    // return 15\\nbSTIterator.hasNext(); // return True\\nbSTIterator.next();    // return 20\\nbSTIterator.hasNext(); // return False\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [1, 105].\\n0 <= Node.val <= 106\\nAt most 105 calls will be made to hasNext, and next.\\n\\n\\xc2\\xa0\\nFollow up:\\n\\nCould you implement next() and hasNext() to run in average O(1) time and use\\xc2\\xa0O(h) memory, where h is the height of the tree?\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/dungeon-game",
        "Title": "Dungeon Game ",
        "Description": "b\"The demons had captured the princess and imprisoned her in the bottom-right corner of a dungeon. The dungeon consists of m x n rooms laid out in a 2D grid. Our valiant knight was initially positioned in the top-left room and must fight his way through dungeon to rescue the princess.\\nThe knight has an initial health point represented by a positive integer. If at any point his health point drops to 0 or below, he dies immediately.\\nSome of the rooms are guarded by demons (represented by negative integers), so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight's health (represented by positive integers).\\nTo reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step.\\nReturn the knight's minimum initial health so that he can rescue the princess.\\nNote that any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: dungeon = [[-2,-3,3],[-5,-10,1],[10,30,-5]]\\nOutput: 7\\nExplanation: The initial health of the knight must be at least 7 if he follows the optimal path: RIGHT-> RIGHT -> DOWN -> DOWN.\\n\\nExample 2:\\nInput: dungeon = [[0]]\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == dungeon.length\\nn == dungeon[i].length\\n1 <= m, n <= 200\\n-1000 <= dungeon[i][j] <= 1000\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/combine-two-tables",
        "Title": "Combine Two Tables ",
        "Description": "b'SQL SchemaTable: Person\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| personId    | int     |\\n| lastName    | varchar |\\n| firstName   | varchar |\\n+-------------+---------+\\npersonId is the primary key column for this table.\\nThis table contains information about the ID of some persons and their first and last names.\\n\\n\\xc2\\xa0\\nTable: Address\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| addressId   | int     |\\n| personId    | int     |\\n| city        | varchar |\\n| state       | varchar |\\n+-------------+---------+\\naddressId is the primary key column for this table.\\nEach row of this table contains information about the city and state of one person with ID = PersonId.\\n\\n\\xc2\\xa0\\nWrite an SQL query to report the first name, last name, city, and state of each person in the Person table. If the address of a personId is not present in the Address table, report null instead.\\nReturn the result table in any order.\\nThe query result format is in the following example.\\n\\xc2\\xa0\\nExample 1:\\nInput: \\nPerson table:\\n+----------+----------+-----------+\\n| personId | lastName | firstName |\\n+----------+----------+-----------+\\n| 1        | Wang     | Allen     |\\n| 2        | Alice    | Bob       |\\n+----------+----------+-----------+\\nAddress table:\\n+-----------+----------+---------------+------------+\\n| addressId | personId | city          | state      |\\n+-----------+----------+---------------+------------+\\n| 1         | 2        | New York City | New York   |\\n| 2         | 3        | Leetcode      | California |\\n+-----------+----------+---------------+------------+\\nOutput: \\n+-----------+----------+---------------+----------+\\n| firstName | lastName | city          | state    |\\n+-----------+----------+---------------+----------+\\n| Allen     | Wang     | Null          | Null     |\\n| Bob       | Alice    | New York City | New York |\\n+-----------+----------+---------------+----------+\\nExplanation: \\nThere is no address in the address table for the personId = 1 so we return null in their city and state.\\naddressId = 1 contains information about the address of personId = 2.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/second-highest-salary",
        "Title": "Second Highest Salary ",
        "Description": "b'SQL SchemaTable: Employee\\n+-------------+------+\\n| Column Name | Type |\\n+-------------+------+\\n| id          | int  |\\n| salary      | int  |\\n+-------------+------+\\nid is the primary key column for this table.\\nEach row of this table contains information about the salary of an employee.\\n\\n\\xc2\\xa0\\nWrite an SQL query to report the second highest salary from the Employee table. If there is no second highest salary, the query should report null.\\nThe query result format is in the following example.\\n\\xc2\\xa0\\nExample 1:\\nInput: \\nEmployee table:\\n+----+--------+\\n| id | salary |\\n+----+--------+\\n| 1  | 100    |\\n| 2  | 200    |\\n| 3  | 300    |\\n+----+--------+\\nOutput: \\n+---------------------+\\n| SecondHighestSalary |\\n+---------------------+\\n| 200                 |\\n+---------------------+\\n\\nExample 2:\\nInput: \\nEmployee table:\\n+----+--------+\\n| id | salary |\\n+----+--------+\\n| 1  | 100    |\\n+----+--------+\\nOutput: \\n+---------------------+\\n| SecondHighestSalary |\\n+---------------------+\\n| null                |\\n+---------------------+\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/nth-highest-salary",
        "Title": "Nth Highest Salary ",
        "Description": "b'SQL SchemaTable: Employee\\n+-------------+------+\\n| Column Name | Type |\\n+-------------+------+\\n| id          | int  |\\n| salary      | int  |\\n+-------------+------+\\nid is the primary key column for this table.\\nEach row of this table contains information about the salary of an employee.\\n\\n\\xc2\\xa0\\nWrite an SQL query to report the nth highest salary from the Employee table. If there is no nth highest salary, the query should report null.\\nThe query result format is in the following example.\\n\\xc2\\xa0\\nExample 1:\\nInput: \\nEmployee table:\\n+----+--------+\\n| id | salary |\\n+----+--------+\\n| 1  | 100    |\\n| 2  | 200    |\\n| 3  | 300    |\\n+----+--------+\\nn = 2\\nOutput: \\n+------------------------+\\n| getNthHighestSalary(2) |\\n+------------------------+\\n| 200                    |\\n+------------------------+\\n\\nExample 2:\\nInput: \\nEmployee table:\\n+----+--------+\\n| id | salary |\\n+----+--------+\\n| 1  | 100    |\\n+----+--------+\\nn = 2\\nOutput: \\n+------------------------+\\n| getNthHighestSalary(2) |\\n+------------------------+\\n| null                   |\\n+------------------------+\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/rank-scores",
        "Title": "Rank Scores ",
        "Description": "b'SQL SchemaTable: Scores\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| id          | int     |\\n| score       | decimal |\\n+-------------+---------+\\nid is the primary key for this table.\\nEach row of this table contains the score of a game. Score is a floating point value with two decimal places.\\n\\n\\xc2\\xa0\\nWrite an SQL query to rank the scores. The ranking should be calculated according to the following rules:\\n\\nThe scores should be ranked from the highest to the lowest.\\nIf there is a tie between two scores, both should have the same ranking.\\nAfter a tie, the next ranking number should be the next consecutive integer value. In other words, there should be no holes between ranks.\\n\\nReturn the result table ordered by score in descending order.\\nThe query result format is in the following example.\\n\\xc2\\xa0\\nExample 1:\\nInput: \\nScores table:\\n+----+-------+\\n| id | score |\\n+----+-------+\\n| 1  | 3.50  |\\n| 2  | 3.65  |\\n| 3  | 4.00  |\\n| 4  | 3.85  |\\n| 5  | 4.00  |\\n| 6  | 3.65  |\\n+----+-------+\\nOutput: \\n+-------+------+\\n| score | rank |\\n+-------+------+\\n| 4.00  | 1    |\\n| 4.00  | 1    |\\n| 3.85  | 2    |\\n| 3.65  | 3    |\\n| 3.65  | 3    |\\n| 3.50  | 4    |\\n+-------+------+\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/largest-number",
        "Title": "Largest Number ",
        "Description": "b'Given a list of non-negative integers nums, arrange them such that they form the largest number and return it.\\nSince the result may be very large, so you need to return a string instead of an integer.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [10,2]\\nOutput: \"210\"\\n\\nExample 2:\\nInput: nums = [3,30,34,5,9]\\nOutput: \"9534330\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 100\\n0 <= nums[i] <= 109\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/consecutive-numbers",
        "Title": "Consecutive Numbers ",
        "Description": "b'SQL SchemaTable: Logs\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| id          | int     |\\n| num         | varchar |\\n+-------------+---------+\\nid is the primary key for this table.\\nid is an autoincrement column.\\n\\n\\xc2\\xa0\\nWrite an SQL query to find all numbers that appear at least three times consecutively.\\nReturn the result table in any order.\\nThe query result format is in the following example.\\n\\xc2\\xa0\\nExample 1:\\nInput: \\nLogs table:\\n+----+-----+\\n| id | num |\\n+----+-----+\\n| 1  | 1   |\\n| 2  | 1   |\\n| 3  | 1   |\\n| 4  | 2   |\\n| 5  | 1   |\\n| 6  | 2   |\\n| 7  | 2   |\\n+----+-----+\\nOutput: \\n+-----------------+\\n| ConsecutiveNums |\\n+-----------------+\\n| 1               |\\n+-----------------+\\nExplanation: 1 is the only number that appears consecutively for at least three times.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/employees-earning-more-than-their-managers",
        "Title": "Employees Earning More Than Their Managers ",
        "Description": "b'SQL SchemaTable: Employee\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| id          | int     |\\n| name        | varchar |\\n| salary      | int     |\\n| managerId   | int     |\\n+-------------+---------+\\nid is the primary key column for this table.\\nEach row of this table indicates the ID of an employee, their name, salary, and the ID of their manager.\\n\\n\\xc2\\xa0\\nWrite an SQL query to find the employees who earn more than their managers.\\nReturn the result table in any order.\\nThe query result format is in the following example.\\n\\xc2\\xa0\\nExample 1:\\nInput: \\nEmployee table:\\n+----+-------+--------+-----------+\\n| id | name  | salary | managerId |\\n+----+-------+--------+-----------+\\n| 1  | Joe   | 70000  | 3         |\\n| 2  | Henry | 80000  | 4         |\\n| 3  | Sam   | 60000  | Null      |\\n| 4  | Max   | 90000  | Null      |\\n+----+-------+--------+-----------+\\nOutput: \\n+----------+\\n| Employee |\\n+----------+\\n| Joe      |\\n+----------+\\nExplanation: Joe is the only employee who earns more than his manager.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/duplicate-emails",
        "Title": "Duplicate Emails ",
        "Description": "b'SQL SchemaTable: Person\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| id          | int     |\\n| email       | varchar |\\n+-------------+---------+\\nid is the primary key column for this table.\\nEach row of this table contains an email. The emails will not contain uppercase letters.\\n\\n\\xc2\\xa0\\nWrite an SQL query to report all the duplicate emails.\\nReturn the result table in any order.\\nThe query result format is in the following example.\\n\\xc2\\xa0\\nExample 1:\\nInput: \\nPerson table:\\n+----+---------+\\n| id | email   |\\n+----+---------+\\n| 1  | a@b.com |\\n| 2  | c@d.com |\\n| 3  | a@b.com |\\n+----+---------+\\nOutput: \\n+---------+\\n| Email   |\\n+---------+\\n| a@b.com |\\n+---------+\\nExplanation: a@b.com is repeated two times.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/customers-who-never-order",
        "Title": "Customers Who Never Order ",
        "Description": "b'SQL SchemaTable: Customers\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| id          | int     |\\n| name        | varchar |\\n+-------------+---------+\\nid is the primary key column for this table.\\nEach row of this table indicates the ID and name of a customer.\\n\\n\\xc2\\xa0\\nTable: Orders\\n+-------------+------+\\n| Column Name | Type |\\n+-------------+------+\\n| id          | int  |\\n| customerId  | int  |\\n+-------------+------+\\nid is the primary key column for this table.\\ncustomerId is a foreign key of the ID from the Customers table.\\nEach row of this table indicates the ID of an order and the ID of the customer who ordered it.\\n\\n\\xc2\\xa0\\nWrite an SQL query to report all customers who never order anything.\\nReturn the result table in any order.\\nThe query result format is in the following example.\\n\\xc2\\xa0\\nExample 1:\\nInput: \\nCustomers table:\\n+----+-------+\\n| id | name  |\\n+----+-------+\\n| 1  | Joe   |\\n| 2  | Henry |\\n| 3  | Sam   |\\n| 4  | Max   |\\n+----+-------+\\nOrders table:\\n+----+------------+\\n| id | customerId |\\n+----+------------+\\n| 1  | 3          |\\n| 2  | 1          |\\n+----+------------+\\nOutput: \\n+-----------+\\n| Customers |\\n+-----------+\\n| Henry     |\\n| Max       |\\n+-----------+\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/department-highest-salary",
        "Title": "Department Highest Salary ",
        "Description": "b'SQL SchemaTable: Employee\\n+--------------+---------+\\n| Column Name  | Type    |\\n+--------------+---------+\\n| id           | int     |\\n| name         | varchar |\\n| salary       | int     |\\n| departmentId | int     |\\n+--------------+---------+\\nid is the primary key column for this table.\\ndepartmentId is a foreign key of the ID from the Department table.\\nEach row of this table indicates the ID, name, and salary of an employee. It also contains the ID of their department.\\n\\n\\xc2\\xa0\\nTable: Department\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| id          | int     |\\n| name        | varchar |\\n+-------------+---------+\\nid is the primary key column for this table.\\nEach row of this table indicates the ID of a department and its name.\\n\\n\\xc2\\xa0\\nWrite an SQL query to find employees who have the highest salary in each of the departments.\\nReturn the result table in any order.\\nThe query result format is in the following example.\\n\\xc2\\xa0\\nExample 1:\\nInput: \\nEmployee table:\\n+----+-------+--------+--------------+\\n| id | name  | salary | departmentId |\\n+----+-------+--------+--------------+\\n| 1  | Joe   | 70000  | 1            |\\n| 2  | Jim   | 90000  | 1            |\\n| 3  | Henry | 80000  | 2            |\\n| 4  | Sam   | 60000  | 2            |\\n| 5  | Max   | 90000  | 1            |\\n+----+-------+--------+--------------+\\nDepartment table:\\n+----+-------+\\n| id | name  |\\n+----+-------+\\n| 1  | IT    |\\n| 2  | Sales |\\n+----+-------+\\nOutput: \\n+------------+----------+--------+\\n| Department | Employee | Salary |\\n+------------+----------+--------+\\n| IT         | Jim      | 90000  |\\n| Sales      | Henry    | 80000  |\\n| IT         | Max      | 90000  |\\n+------------+----------+--------+\\nExplanation: Max and Jim both have the highest salary in the IT department and Henry has the highest salary in the Sales department.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/department-top-three-salaries",
        "Title": "Department Top Three Salaries ",
        "Description": "b\"SQL SchemaTable: Employee\\n+--------------+---------+\\n| Column Name  | Type    |\\n+--------------+---------+\\n| id           | int     |\\n| name         | varchar |\\n| salary       | int     |\\n| departmentId | int     |\\n+--------------+---------+\\nid is the primary key column for this table.\\ndepartmentId is a foreign key of the ID from the Department table.\\nEach row of this table indicates the ID, name, and salary of an employee. It also contains the ID of their department.\\n\\n\\xc2\\xa0\\nTable: Department\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| id          | int     |\\n| name        | varchar |\\n+-------------+---------+\\nid is the primary key column for this table.\\nEach row of this table indicates the ID of a department and its name.\\n\\n\\xc2\\xa0\\nA company's executives are interested in seeing who earns the most money in each of the company's departments. A high earner in a department is an employee who has a salary in the top three unique salaries for that department.\\nWrite an SQL query to find the employees who are high earners in each of the departments.\\nReturn the result table in any order.\\nThe query result format is in the following example.\\n\\xc2\\xa0\\nExample 1:\\nInput: \\nEmployee table:\\n+----+-------+--------+--------------+\\n| id | name  | salary | departmentId |\\n+----+-------+--------+--------------+\\n| 1  | Joe   | 85000  | 1            |\\n| 2  | Henry | 80000  | 2            |\\n| 3  | Sam   | 60000  | 2            |\\n| 4  | Max   | 90000  | 1            |\\n| 5  | Janet | 69000  | 1            |\\n| 6  | Randy | 85000  | 1            |\\n| 7  | Will  | 70000  | 1            |\\n+----+-------+--------+--------------+\\nDepartment table:\\n+----+-------+\\n| id | name  |\\n+----+-------+\\n| 1  | IT    |\\n| 2  | Sales |\\n+----+-------+\\nOutput: \\n+------------+----------+--------+\\n| Department | Employee | Salary |\\n+------------+----------+--------+\\n| IT         | Max      | 90000  |\\n| IT         | Joe      | 85000  |\\n| IT         | Randy    | 85000  |\\n| IT         | Will     | 70000  |\\n| Sales      | Henry    | 80000  |\\n| Sales      | Sam      | 60000  |\\n+------------+----------+--------+\\nExplanation: \\nIn the IT department:\\n- Max earns the highest unique salary\\n- Both Randy and Joe earn the second-highest unique salary\\n- Will earns the third-highest unique salary\\n\\nIn the Sales department:\\n- Henry earns the highest salary\\n- Sam earns the second-highest salary\\n- There is no third-highest salary as there are only two employees\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/reverse-words-in-a-string-ii",
        "Title": "Reverse Words in a String II ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/repeated-dna-sequences",
        "Title": "Repeated DNA Sequences ",
        "Description": "b'The DNA sequence is composed of a series of nucleotides abbreviated as \\'A\\', \\'C\\', \\'G\\', and \\'T\\'.\\n\\nFor example, \"ACGAATTCCG\" is a DNA sequence.\\n\\nWhen studying DNA, it is useful to identify repeated sequences within the DNA.\\nGiven a string s that represents a DNA sequence, return all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule. You may return the answer in any order.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\"\\nOutput: [\"AAAAACCCCC\",\"CCCCCAAAAA\"]\\nExample 2:\\nInput: s = \"AAAAAAAAAAAAA\"\\nOutput: [\"AAAAAAAAAA\"]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 105\\ns[i] is either \\'A\\', \\'C\\', \\'G\\', or \\'T\\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv",
        "Title": "Best Time to Buy and Sell Stock IV ",
        "Description": "b'You are given an integer array prices where prices[i] is the price of a given stock on the ith day, and an integer k.\\nFind the maximum profit you can achieve. You may complete at most k transactions.\\nNote: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\\n\\xc2\\xa0\\nExample 1:\\nInput: k = 2, prices = [2,4,1]\\nOutput: 2\\nExplanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.\\n\\nExample 2:\\nInput: k = 2, prices = [3,2,6,5,0,3]\\nOutput: 7\\nExplanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= k <= 100\\n0 <= prices.length <= 1000\\n0 <= prices[i] <= 1000\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/rotate-array",
        "Title": "Rotate Array ",
        "Description": "b'Given an array, rotate the array to the right by k steps, where k is non-negative.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,2,3,4,5,6,7], k = 3\\nOutput: [5,6,7,1,2,3,4]\\nExplanation:\\nrotate 1 steps to the right: [7,1,2,3,4,5,6]\\nrotate 2 steps to the right: [6,7,1,2,3,4,5]\\nrotate 3 steps to the right: [5,6,7,1,2,3,4]\\n\\nExample 2:\\nInput: nums = [-1,-100,3,99], k = 2\\nOutput: [3,99,-1,-100]\\nExplanation: \\nrotate 1 steps to the right: [99,-1,-100,3]\\nrotate 2 steps to the right: [3,99,-1,-100]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 105\\n-231 <= nums[i] <= 231 - 1\\n0 <= k <= 105\\n\\n\\xc2\\xa0\\nFollow up:\\n\\nTry to come up with as many solutions as you can. There are at least three different ways to solve this problem.\\nCould you do it in-place with O(1) extra space?\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/reverse-bits",
        "Title": "Reverse Bits ",
        "Description": "b\"Reverse bits of a given 32 bits unsigned integer.\\nNote:\\n\\nNote that in some languages, such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.\\nIn Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 2 above, the input represents the signed integer -3 and the output represents the signed integer -1073741825.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 00000010100101000001111010011100\\nOutput:    964176192 (00111001011110000010100101000000)\\nExplanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000.\\n\\nExample 2:\\nInput: n = 11111111111111111111111111111101\\nOutput:   3221225471 (10111111111111111111111111111111)\\nExplanation: The input binary string 11111111111111111111111111111101 represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is 10111111111111111111111111111111.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe input must be a binary string of length 32\\n\\n\\xc2\\xa0\\nFollow up: If this function is called many times, how would you optimize it?\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/number-of-1-bits",
        "Title": "Number of 1 Bits ",
        "Description": "b\"Write a function that takes an unsigned integer and returns the number of '1' bits it has (also known as the Hamming weight).\\nNote:\\n\\nNote that in some languages, such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. It should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.\\nIn Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 3, the input represents the signed integer. -3.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 00000000000000000000000000001011\\nOutput: 3\\nExplanation: The input binary string 00000000000000000000000000001011 has a total of three '1' bits.\\n\\nExample 2:\\nInput: n = 00000000000000000000000010000000\\nOutput: 1\\nExplanation: The input binary string 00000000000000000000000010000000 has a total of one '1' bit.\\n\\nExample 3:\\nInput: n = 11111111111111111111111111111101\\nOutput: 31\\nExplanation: The input binary string 11111111111111111111111111111101 has a total of thirty one '1' bits.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe input must be a binary string of length 32.\\n\\n\\xc2\\xa0\\nFollow up: If this function is called many times, how would you optimize it?\""
    },
    {
        "URL": "https://leetcode.com/problems/word-frequency",
        "Title": "Word Frequency ",
        "Description": "b\"Write a bash script to calculate the frequency of each word in a text file words.txt.\\nFor simplicity sake, you may assume:\\n\\nwords.txt contains only lowercase characters and space ' ' characters.\\nEach word must consist of lowercase characters only.\\nWords are separated by one or more whitespace characters.\\n\\nExample:\\nAssume that words.txt has the following content:\\nthe day is sunny the the\\nthe sunny is is\\n\\nYour script should output the following, sorted by descending frequency:\\nthe 4\\nis 3\\nsunny 2\\nday 1\\n\\nNote:\\n\\nDon't worry about handling ties, it is guaranteed that each word's frequency count is unique.\\nCould you write it in one-line using Unix pipes?\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/valid-phone-numbers",
        "Title": "Valid Phone Numbers ",
        "Description": "b'Given a text file file.txt that contains a list of phone numbers (one per line), write a one-liner bash script to print all valid phone numbers.\\nYou may assume that a valid phone number must appear in one of the following two formats: (xxx) xxx-xxxx or xxx-xxx-xxxx. (x means a digit)\\nYou may also assume each line in the text file must not contain leading or trailing white spaces.\\nExample:\\nAssume that file.txt has the following content:\\n987-123-4567\\n123 456 7890\\n(123) 456-7890\\n\\nYour script should output the following valid phone numbers:\\n987-123-4567\\n(123) 456-7890\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/transpose-file",
        "Title": "Transpose File ",
        "Description": "b\"Given a text file file.txt, transpose its content.\\nYou may assume that each row has the same number of columns, and each field is separated by the ' ' character.\\nExample:\\nIf file.txt has the following content:\\nname age\\nalice 21\\nryan 30\\n\\nOutput the following:\\nname alice ryan\\nage 21 30\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/tenth-line",
        "Title": "Tenth Line ",
        "Description": "b\"Given a text file\\xc2\\xa0file.txt, print\\xc2\\xa0just the 10th line of the\\xc2\\xa0file.\\nExample:\\nAssume that file.txt has the following content:\\nLine 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\\nLine 6\\nLine 7\\nLine 8\\nLine 9\\nLine 10\\n\\nYour script should output the tenth line, which is:\\nLine 10\\n\\nNote:\\n1. If the file contains less than 10 lines, what should you output?\\n2. There's at least three different solutions. Try to explore all possibilities.\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/delete-duplicate-emails",
        "Title": "Delete Duplicate Emails ",
        "Description": "b'SQL SchemaTable: Person\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| id          | int     |\\n| email       | varchar |\\n+-------------+---------+\\nid is the primary key column for this table.\\nEach row of this table contains an email. The emails will not contain uppercase letters.\\n\\n\\xc2\\xa0\\nWrite an SQL query to delete all the duplicate emails, keeping only one unique email with the smallest id. Note that you are supposed to write a DELETE statement and not a SELECT one.\\nAfter running your script, the answer shown is the Person table. The driver will first compile and run your piece of code and then show the Person table. The final order of the Person table does not matter.\\nThe query result format is in the following example.\\n\\xc2\\xa0\\nExample 1:\\nInput: \\nPerson table:\\n+----+------------------+\\n| id | email            |\\n+----+------------------+\\n| 1  | john@example.com |\\n| 2  | bob@example.com  |\\n| 3  | john@example.com |\\n+----+------------------+\\nOutput: \\n+----+------------------+\\n| id | email            |\\n+----+------------------+\\n| 1  | john@example.com |\\n| 2  | bob@example.com  |\\n+----+------------------+\\nExplanation: john@example.com is repeated two times. We keep the row with the smallest Id = 1.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/rising-temperature",
        "Title": "Rising Temperature ",
        "Description": "b\"SQL SchemaTable: Weather\\n+---------------+---------+\\n| Column Name   | Type    |\\n+---------------+---------+\\n| id            | int     |\\n| recordDate    | date    |\\n| temperature   | int     |\\n+---------------+---------+\\nid is the primary key for this table.\\nThis table contains information about the temperature on a certain day.\\n\\n\\xc2\\xa0\\nWrite an SQL query to find all dates' Id with higher temperatures compared to its previous dates (yesterday).\\nReturn the result table in any order.\\nThe query result format is in the following example.\\n\\xc2\\xa0\\nExample 1:\\nInput: \\nWeather table:\\n+----+------------+-------------+\\n| id | recordDate | temperature |\\n+----+------------+-------------+\\n| 1  | 2015-01-01 | 10          |\\n| 2  | 2015-01-02 | 25          |\\n| 3  | 2015-01-03 | 20          |\\n| 4  | 2015-01-04 | 30          |\\n+----+------------+-------------+\\nOutput: \\n+----+\\n| id |\\n+----+\\n| 2  |\\n| 4  |\\n+----+\\nExplanation: \\nIn 2015-01-02, the temperature was higher than the previous day (10 -> 25).\\nIn 2015-01-04, the temperature was higher than the previous day (20 -> 30).\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/house-robber",
        "Title": "House Robber ",
        "Description": "b'You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.\\nGiven an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,2,3,1]\\nOutput: 4\\nExplanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\\nTotal amount you can rob = 1 + 3 = 4.\\n\\nExample 2:\\nInput: nums = [2,7,9,3,1]\\nOutput: 12\\nExplanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).\\nTotal amount you can rob = 2 + 9 + 1 = 12.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 100\\n0 <= nums[i] <= 400\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/binary-tree-right-side-view",
        "Title": "Binary Tree Right Side View ",
        "Description": "b'Given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [1,2,3,null,5,null,4]\\nOutput: [1,3,4]\\n\\nExample 2:\\nInput: root = [1,null,3]\\nOutput: [1,3]\\n\\nExample 3:\\nInput: root = []\\nOutput: []\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [0, 100].\\n-100 <= Node.val <= 100\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/number-of-islands",
        "Title": "Number of Islands ",
        "Description": "b'Given an m x n 2D binary grid grid which represents a map of \\'1\\'s (land) and \\'0\\'s (water), return the number of islands.\\nAn island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.\\n\\xc2\\xa0\\nExample 1:\\nInput: grid = [\\n  [\"1\",\"1\",\"1\",\"1\",\"0\"],\\n  [\"1\",\"1\",\"0\",\"1\",\"0\"],\\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\\n  [\"0\",\"0\",\"0\",\"0\",\"0\"]\\n]\\nOutput: 1\\n\\nExample 2:\\nInput: grid = [\\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\\n  [\"0\",\"0\",\"1\",\"0\",\"0\"],\\n  [\"0\",\"0\",\"0\",\"1\",\"1\"]\\n]\\nOutput: 3\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == grid.length\\nn == grid[i].length\\n1 <= m, n <= 300\\ngrid[i][j] is \\'0\\' or \\'1\\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/bitwise-and-of-numbers-range",
        "Title": "Bitwise AND of Numbers Range ",
        "Description": "b'Given two integers left and right that represent the range [left, right], return the bitwise AND of all numbers in this range, inclusive.\\n\\xc2\\xa0\\nExample 1:\\nInput: left = 5, right = 7\\nOutput: 4\\n\\nExample 2:\\nInput: left = 0, right = 0\\nOutput: 0\\n\\nExample 3:\\nInput: left = 1, right = 2147483647\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= left <= right <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/happy-number",
        "Title": "Happy Number ",
        "Description": "b'Write an algorithm to determine if a number n is happy.\\nA happy number is a number defined by the following process:\\n\\nStarting with any positive integer, replace the number by the sum of the squares of its digits.\\nRepeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.\\nThose numbers for which this process ends in 1 are happy.\\n\\nReturn true if n is a happy number, and false if not.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 19\\nOutput: true\\nExplanation:\\n12 + 92 = 82\\n82 + 22 = 68\\n62 + 82 = 100\\n12 + 02 + 02 = 1\\n\\nExample 2:\\nInput: n = 2\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/remove-linked-list-elements",
        "Title": "Remove Linked List Elements ",
        "Description": "b'Given the head of a linked list and an integer val, remove all the nodes of the linked list that has Node.val == val, and return the new head.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: head = [1,2,6,3,4,5,6], val = 6\\nOutput: [1,2,3,4,5]\\n\\nExample 2:\\nInput: head = [], val = 1\\nOutput: []\\n\\nExample 3:\\nInput: head = [7,7,7,7], val = 7\\nOutput: []\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the list is in the range [0, 104].\\n1 <= Node.val <= 50\\n0 <= val <= 50\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/count-primes",
        "Title": "Count Primes ",
        "Description": "b'Given an integer n, return the number of prime numbers that are strictly less than n.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 10\\nOutput: 4\\nExplanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.\\n\\nExample 2:\\nInput: n = 0\\nOutput: 0\\n\\nExample 3:\\nInput: n = 1\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= n <= 5 * 106\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/isomorphic-strings",
        "Title": "Isomorphic Strings ",
        "Description": "b'Given two strings s and t, determine if they are isomorphic.\\nTwo strings s and t are isomorphic if the characters in s can be replaced to get t.\\nAll occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"egg\", t = \"add\"\\nOutput: true\\nExample 2:\\nInput: s = \"foo\", t = \"bar\"\\nOutput: false\\nExample 3:\\nInput: s = \"paper\", t = \"title\"\\nOutput: true\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 5 * 104\\nt.length == s.length\\ns and t consist of any valid ascii character.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/reverse-linked-list",
        "Title": "Reverse Linked List ",
        "Description": "b'Given the head of a singly linked list, reverse the list, and return the reversed list.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: head = [1,2,3,4,5]\\nOutput: [5,4,3,2,1]\\n\\nExample 2:\\n\\nInput: head = [1,2]\\nOutput: [2,1]\\n\\nExample 3:\\nInput: head = []\\nOutput: []\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the list is the range [0, 5000].\\n-5000 <= Node.val <= 5000\\n\\n\\xc2\\xa0\\nFollow up: A linked list can be reversed either iteratively or recursively. Could you implement both?\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/course-schedule",
        "Title": "Course Schedule ",
        "Description": "b'There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.\\n\\nFor example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.\\n\\nReturn true if you can finish all courses. Otherwise, return false.\\n\\xc2\\xa0\\nExample 1:\\nInput: numCourses = 2, prerequisites = [[1,0]]\\nOutput: true\\nExplanation: There are a total of 2 courses to take. \\nTo take course 1 you should have finished course 0. So it is possible.\\n\\nExample 2:\\nInput: numCourses = 2, prerequisites = [[1,0],[0,1]]\\nOutput: false\\nExplanation: There are a total of 2 courses to take. \\nTo take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= numCourses <= 2000\\n0 <= prerequisites.length <= 5000\\nprerequisites[i].length == 2\\n0 <= ai, bi < numCourses\\nAll the pairs prerequisites[i] are unique.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/implement-trie-prefix-tree",
        "Title": "Implement Trie (Prefix Tree) ",
        "Description": "b'A trie (pronounced as \"try\") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.\\nImplement the Trie class:\\n\\nTrie() Initializes the trie object.\\nvoid insert(String word) Inserts the string word into the trie.\\nboolean search(String word) Returns true if the string word is in the trie (i.e., was inserted before), and false otherwise.\\nboolean startsWith(String prefix) Returns true if there is a previously inserted string word that has the prefix prefix, and false otherwise.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput\\n[\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"]\\n[[], [\"apple\"], [\"apple\"], [\"app\"], [\"app\"], [\"app\"], [\"app\"]]\\nOutput\\n[null, null, true, false, true, null, true]\\n\\nExplanation\\nTrie trie = new Trie();\\ntrie.insert(\"apple\");\\ntrie.search(\"apple\");   // return True\\ntrie.search(\"app\");     // return False\\ntrie.startsWith(\"app\"); // return True\\ntrie.insert(\"app\");\\ntrie.search(\"app\");     // return True\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= word.length, prefix.length <= 2000\\nword and prefix consist only of lowercase English letters.\\nAt most 3 * 104 calls in total will be made to insert, search, and startsWith.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/minimum-size-subarray-sum",
        "Title": "Minimum Size Subarray Sum ",
        "Description": "b'Given an array of positive integers nums and a positive integer target, return the minimal length of a contiguous subarray [numsl, numsl+1, ..., numsr-1, numsr] of which the sum is greater than or equal to target. If there is no such subarray, return 0 instead.\\n\\xc2\\xa0\\nExample 1:\\nInput: target = 7, nums = [2,3,1,2,4,3]\\nOutput: 2\\nExplanation: The subarray [4,3] has the minimal length under the problem constraint.\\n\\nExample 2:\\nInput: target = 4, nums = [1,4,4]\\nOutput: 1\\n\\nExample 3:\\nInput: target = 11, nums = [1,1,1,1,1,1,1,1]\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= target <= 109\\n1 <= nums.length <= 105\\n1 <= nums[i] <= 104\\n\\n\\xc2\\xa0\\nFollow up: If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log(n)).'"
    },
    {
        "URL": "https://leetcode.com/problems/course-schedule-ii",
        "Title": "Course Schedule II ",
        "Description": "b'There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.\\n\\nFor example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.\\n\\nReturn the ordering of courses you should take to finish all courses. If there are many valid answers, return any of them. If it is impossible to finish all courses, return an empty array.\\n\\xc2\\xa0\\nExample 1:\\nInput: numCourses = 2, prerequisites = [[1,0]]\\nOutput: [0,1]\\nExplanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1].\\n\\nExample 2:\\nInput: numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]\\nOutput: [0,2,1,3]\\nExplanation: There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0.\\nSo one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3].\\n\\nExample 3:\\nInput: numCourses = 1, prerequisites = []\\nOutput: [0]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= numCourses <= 2000\\n0 <= prerequisites.length <= numCourses * (numCourses - 1)\\nprerequisites[i].length == 2\\n0 <= ai, bi < numCourses\\nai != bi\\nAll the pairs [ai, bi] are distinct.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/design-add-and-search-words-data-structure",
        "Title": "Design Add and Search Words Data Structure ",
        "Description": "b'Design a data structure that supports adding new words and finding if a string matches any previously added string.\\nImplement the WordDictionary class:\\n\\nWordDictionary()\\xc2\\xa0Initializes the object.\\nvoid addWord(word) Adds word to the data structure, it can be matched later.\\nbool search(word)\\xc2\\xa0Returns true if there is any string in the data structure that matches word\\xc2\\xa0or false otherwise. word may contain dots \\'.\\' where dots can be matched with any letter.\\n\\n\\xc2\\xa0\\nExample:\\nInput\\n[\"WordDictionary\",\"addWord\",\"addWord\",\"addWord\",\"search\",\"search\",\"search\",\"search\"]\\n[[],[\"bad\"],[\"dad\"],[\"mad\"],[\"pad\"],[\"bad\"],[\".ad\"],[\"b..\"]]\\nOutput\\n[null,null,null,null,false,true,true,true]\\n\\nExplanation\\nWordDictionary wordDictionary = new WordDictionary();\\nwordDictionary.addWord(\"bad\");\\nwordDictionary.addWord(\"dad\");\\nwordDictionary.addWord(\"mad\");\\nwordDictionary.search(\"pad\"); // return False\\nwordDictionary.search(\"bad\"); // return True\\nwordDictionary.search(\".ad\"); // return True\\nwordDictionary.search(\"b..\"); // return True\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= word.length <= 25\\nword in addWord consists of lowercase English letters.\\nword in search consist of \\'.\\' or lowercase English letters.\\nThere will be at most 3 dots in word for search queries.\\nAt most 104 calls will be made to addWord and search.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/word-search-ii",
        "Title": "Word Search II ",
        "Description": "b'Given an m x n board\\xc2\\xa0of characters and a list of strings words, return all words on the board.\\nEach word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: board = [[\"o\",\"a\",\"a\",\"n\"],[\"e\",\"t\",\"a\",\"e\"],[\"i\",\"h\",\"k\",\"r\"],[\"i\",\"f\",\"l\",\"v\"]], words = [\"oath\",\"pea\",\"eat\",\"rain\"]\\nOutput: [\"eat\",\"oath\"]\\n\\nExample 2:\\n\\nInput: board = [[\"a\",\"b\"],[\"c\",\"d\"]], words = [\"abcb\"]\\nOutput: []\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == board.length\\nn == board[i].length\\n1 <= m, n <= 12\\nboard[i][j] is a lowercase English letter.\\n1 <= words.length <= 3 * 104\\n1 <= words[i].length <= 10\\nwords[i] consists of lowercase English letters.\\nAll the strings of words are unique.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/house-robber-ii",
        "Title": "House Robber II ",
        "Description": "b'You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and\\xc2\\xa0it will automatically contact the police if two adjacent houses were broken into on the same night.\\nGiven an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [2,3,2]\\nOutput: 3\\nExplanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.\\n\\nExample 2:\\nInput: nums = [1,2,3,1]\\nOutput: 4\\nExplanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\\nTotal amount you can rob = 1 + 3 = 4.\\n\\nExample 3:\\nInput: nums = [1,2,3]\\nOutput: 3\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 100\\n0 <= nums[i] <= 1000\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/shortest-palindrome",
        "Title": "Shortest Palindrome ",
        "Description": "b'You are given a string s. You can convert s to a palindrome by adding characters in front of it.\\nReturn the shortest palindrome you can find by performing this transformation.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"aacecaaa\"\\nOutput: \"aaacecaaa\"\\nExample 2:\\nInput: s = \"abcd\"\\nOutput: \"dcbabcd\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= s.length <= 5 * 104\\ns consists of lowercase English letters only.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/kth-largest-element-in-an-array",
        "Title": "Kth Largest Element in an Array ",
        "Description": "b'Given an integer array nums and an integer k, return the kth largest element in the array.\\nNote that it is the kth largest element in the sorted order, not the kth distinct element.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [3,2,1,5,6,4], k = 2\\nOutput: 5\\nExample 2:\\nInput: nums = [3,2,3,1,2,4,5,5,6], k = 4\\nOutput: 4\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= k <= nums.length <= 104\\n-104 <= nums[i] <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/combination-sum-iii",
        "Title": "Combination Sum III ",
        "Description": "b'Find all valid combinations of k numbers that sum up to n such that the following conditions are true:\\n\\nOnly numbers 1 through 9 are used.\\nEach number is used at most once.\\n\\nReturn a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.\\n\\xc2\\xa0\\nExample 1:\\nInput: k = 3, n = 7\\nOutput: [[1,2,4]]\\nExplanation:\\n1 + 2 + 4 = 7\\nThere are no other valid combinations.\\nExample 2:\\nInput: k = 3, n = 9\\nOutput: [[1,2,6],[1,3,5],[2,3,4]]\\nExplanation:\\n1 + 2 + 6 = 9\\n1 + 3 + 5 = 9\\n2 + 3 + 4 = 9\\nThere are no other valid combinations.\\n\\nExample 3:\\nInput: k = 4, n = 1\\nOutput: []\\nExplanation: There are no valid combinations.\\nUsing 4 different numbers in the range [1,9], the smallest sum we can get is 1+2+3+4 = 10 and since 10 > 1, there are no valid combination.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n2 <= k <= 9\\n1 <= n <= 60\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/contains-duplicate",
        "Title": "Contains Duplicate ",
        "Description": "b'Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,2,3,1]\\nOutput: true\\nExample 2:\\nInput: nums = [1,2,3,4]\\nOutput: false\\nExample 3:\\nInput: nums = [1,1,1,3,3,4,3,2,4,2]\\nOutput: true\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 105\\n-109 <= nums[i] <= 109\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/the-skyline-problem",
        "Title": "The Skyline Problem ",
        "Description": "b'A city\\'s skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Given the locations and heights of all the buildings, return the skyline formed by these buildings collectively.\\nThe geometric information of each building is given in the array buildings where buildings[i] = [lefti, righti, heighti]:\\n\\nlefti is the x coordinate of the left edge of the ith building.\\nrighti is the x coordinate of the right edge of the ith building.\\nheighti is the height of the ith building.\\n\\nYou may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height 0.\\nThe skyline should be represented as a list of \"key points\" sorted by their x-coordinate in the form [[x1,y1],[x2,y2],...]. Each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, which always has a y-coordinate 0 and is used to mark the skyline\\'s termination where the rightmost building ends. Any ground between the leftmost and rightmost buildings should be part of the skyline\\'s contour.\\nNote: There must be no consecutive horizontal lines of equal height in the output skyline. For instance, [...,[2 3],[4 5],[7 5],[11 5],[12 7],...] is not acceptable; the three lines of height 5 should be merged into one in the final output as such: [...,[2 3],[4 5],[12 7],...]\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: buildings = [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]\\nOutput: [[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]]\\nExplanation:\\nFigure A shows the buildings of the input.\\nFigure B shows the skyline formed by those buildings. The red points in figure B represent the key points in the output list.\\n\\nExample 2:\\nInput: buildings = [[0,2,3],[2,5,3]]\\nOutput: [[0,3],[5,0]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= buildings.length <= 104\\n0 <= lefti < righti <= 231 - 1\\n1 <= heighti <= 231 - 1\\nbuildings is sorted by lefti in\\xc2\\xa0non-decreasing order.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/contains-duplicate-ii",
        "Title": "Contains Duplicate II ",
        "Description": "b'Given an integer array nums and an integer k, return true if there are two distinct indices i and j in the array such that nums[i] == nums[j] and abs(i - j) <= k.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,2,3,1], k = 3\\nOutput: true\\n\\nExample 2:\\nInput: nums = [1,0,1,1], k = 1\\nOutput: true\\n\\nExample 3:\\nInput: nums = [1,2,3,1,2,3], k = 2\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 105\\n-109 <= nums[i] <= 109\\n0 <= k <= 105\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/contains-duplicate-iii",
        "Title": "Contains Duplicate III ",
        "Description": "b'Given an integer array nums and two integers k and t, return true if there are two distinct indices i and j in the array such that abs(nums[i] - nums[j]) <= t and abs(i - j) <= k.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,2,3,1], k = 3, t = 0\\nOutput: true\\nExample 2:\\nInput: nums = [1,0,1,1], k = 1, t = 2\\nOutput: true\\nExample 3:\\nInput: nums = [1,5,9,1,5,9], k = 2, t = 3\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 2 * 104\\n-231 <= nums[i] <= 231 - 1\\n0 <= k <= 104\\n0 <= t <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/maximal-square",
        "Title": "Maximal Square ",
        "Description": "b'Given an m x n binary matrix filled with 0\\'s and 1\\'s, find the largest square containing only 1\\'s and return its area.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\\nOutput: 4\\n\\nExample 2:\\n\\nInput: matrix = [[\"0\",\"1\"],[\"1\",\"0\"]]\\nOutput: 1\\n\\nExample 3:\\nInput: matrix = [[\"0\"]]\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == matrix.length\\nn == matrix[i].length\\n1 <= m, n <= 300\\nmatrix[i][j] is \\'0\\' or \\'1\\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/count-complete-tree-nodes",
        "Title": "Count Complete Tree Nodes ",
        "Description": "b'Given the root of a complete binary tree, return the number of the nodes in the tree.\\nAccording to Wikipedia, every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.\\nDesign an algorithm that runs in less than\\xc2\\xa0O(n)\\xc2\\xa0time complexity.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [1,2,3,4,5,6]\\nOutput: 6\\n\\nExample 2:\\nInput: root = []\\nOutput: 0\\n\\nExample 3:\\nInput: root = [1]\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [0, 5 * 104].\\n0 <= Node.val <= 5 * 104\\nThe tree is guaranteed to be complete.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/rectangle-area",
        "Title": "Rectangle Area ",
        "Description": "b'Given the coordinates of two rectilinear rectangles in a 2D plane, return the total area covered by the two rectangles.\\nThe first rectangle is defined by its bottom-left corner (ax1, ay1) and its top-right corner (ax2, ay2).\\nThe second rectangle is defined by its bottom-left corner (bx1, by1) and its top-right corner (bx2, by2).\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: ax1 = -3, ay1 = 0, ax2 = 3, ay2 = 4, bx1 = 0, by1 = -1, bx2 = 9, by2 = 2\\nOutput: 45\\n\\nExample 2:\\nInput: ax1 = -2, ay1 = -2, ax2 = 2, ay2 = 2, bx1 = -2, by1 = -2, bx2 = 2, by2 = 2\\nOutput: 16\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n-104 <= ax1 <= ax2 <= 104\\n-104 <= ay1 <= ay2 <= 104\\n-104 <= bx1 <= bx2 <= 104\\n-104 <= by1 <= by2 <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/basic-calculator",
        "Title": "Basic Calculator ",
        "Description": "b'Given a string s representing a valid expression, implement a basic calculator to evaluate it, and return the result of the evaluation.\\nNote: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"1 + 1\"\\nOutput: 2\\n\\nExample 2:\\nInput: s = \" 2-1 + 2 \"\\nOutput: 3\\n\\nExample 3:\\nInput: s = \"(1+(4+5+2)-3)+(6+8)\"\\nOutput: 23\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 3 * 105\\ns consists of digits, \\'+\\', \\'-\\', \\'(\\', \\')\\', and \\' \\'.\\ns represents a valid expression.\\n\\'+\\' is not used as a unary operation (i.e., \"+1\" and \"+(2 + 3)\" is invalid).\\n\\'-\\' could be used as a unary operation (i.e., \"-1\" and \"-(2 + 3)\" is valid).\\nThere will be no two consecutive operators in the input.\\nEvery number and running calculation will fit in a signed 32-bit integer.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/implement-stack-using-queues",
        "Title": "Implement Stack using Queues ",
        "Description": "b'Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (push, top, pop, and empty).\\nImplement the MyStack class:\\n\\nvoid push(int x) Pushes element x to the top of the stack.\\nint pop() Removes the element on the top of the stack and returns it.\\nint top() Returns the element on the top of the stack.\\nboolean empty() Returns true if the stack is empty, false otherwise.\\n\\nNotes:\\n\\nYou must use only standard operations of a queue, which means that only push to back, peek/pop from front, size and is empty operations are valid.\\nDepending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue\\'s standard operations.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput\\n[\"MyStack\", \"push\", \"push\", \"top\", \"pop\", \"empty\"]\\n[[], [1], [2], [], [], []]\\nOutput\\n[null, null, null, 2, 2, false]\\n\\nExplanation\\nMyStack myStack = new MyStack();\\nmyStack.push(1);\\nmyStack.push(2);\\nmyStack.top(); // return 2\\nmyStack.pop(); // return 2\\nmyStack.empty(); // return False\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= x <= 9\\nAt most 100 calls will be made to push, pop, top, and empty.\\nAll the calls to pop and top are valid.\\n\\n\\xc2\\xa0\\nFollow-up: Can you implement the stack using only one queue?\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/invert-binary-tree",
        "Title": "Invert Binary Tree ",
        "Description": "b'Given the root of a binary tree, invert the tree, and return its root.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [4,2,7,1,3,6,9]\\nOutput: [4,7,2,9,6,3,1]\\n\\nExample 2:\\n\\nInput: root = [2,1,3]\\nOutput: [2,3,1]\\n\\nExample 3:\\nInput: root = []\\nOutput: []\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [0, 100].\\n-100 <= Node.val <= 100\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/basic-calculator-ii",
        "Title": "Basic Calculator II ",
        "Description": "b'Given a string s which represents an expression, evaluate this expression and return its value.\\xc2\\xa0\\nThe integer division should truncate toward zero.\\nYou may assume that the given expression is always valid. All intermediate results will be in the range of [-231, 231 - 1].\\nNote: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"3+2*2\"\\nOutput: 7\\nExample 2:\\nInput: s = \" 3/2 \"\\nOutput: 1\\nExample 3:\\nInput: s = \" 3+5 / 2 \"\\nOutput: 5\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 3 * 105\\ns consists of integers and operators (\\'+\\', \\'-\\', \\'*\\', \\'/\\') separated by some number of spaces.\\ns represents a valid expression.\\nAll the integers in the expression are non-negative integers in the range [0, 231 - 1].\\nThe answer is guaranteed to fit in a 32-bit integer.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/summary-ranges",
        "Title": "Summary Ranges ",
        "Description": "b'You are given a sorted unique integer array nums.\\nA range [a,b] is the set of all integers from a to b (inclusive).\\nReturn the smallest sorted list of ranges that cover all the numbers in the array exactly. That is, each element of nums is covered by exactly one of the ranges, and there is no integer x such that x is in one of the ranges but not in nums.\\nEach range [a,b] in the list should be output as:\\n\\n\"a->b\" if a != b\\n\"a\" if a == b\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [0,1,2,4,5,7]\\nOutput: [\"0->2\",\"4->5\",\"7\"]\\nExplanation: The ranges are:\\n[0,2] --> \"0->2\"\\n[4,5] --> \"4->5\"\\n[7,7] --> \"7\"\\n\\nExample 2:\\nInput: nums = [0,2,3,4,6,8,9]\\nOutput: [\"0\",\"2->4\",\"6\",\"8->9\"]\\nExplanation: The ranges are:\\n[0,0] --> \"0\"\\n[2,4] --> \"2->4\"\\n[6,6] --> \"6\"\\n[8,9] --> \"8->9\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= nums.length <= 20\\n-231 <= nums[i] <= 231 - 1\\nAll the values of nums are unique.\\nnums is sorted in ascending order.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/majority-element-ii",
        "Title": "Majority Element II ",
        "Description": "b'Given an integer array of size n, find all elements that appear more than \\xe2\\x8c\\x8a n/3 \\xe2\\x8c\\x8b times.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [3,2,3]\\nOutput: [3]\\n\\nExample 2:\\nInput: nums = [1]\\nOutput: [1]\\n\\nExample 3:\\nInput: nums = [1,2]\\nOutput: [1,2]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 5 * 104\\n-109 <= nums[i] <= 109\\n\\n\\xc2\\xa0\\nFollow up: Could you solve the problem in linear time and in O(1) space?\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/kth-smallest-element-in-a-bst",
        "Title": "Kth Smallest Element in a BST ",
        "Description": "b'Given the root of a binary search tree, and an integer k, return the kth smallest value (1-indexed) of all the values of the nodes in the tree.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [3,1,4,null,2], k = 1\\nOutput: 1\\n\\nExample 2:\\n\\nInput: root = [5,3,6,2,4,null,null,1], k = 3\\nOutput: 3\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is n.\\n1 <= k <= n <= 104\\n0 <= Node.val <= 104\\n\\n\\xc2\\xa0\\nFollow up: If the BST is modified often (i.e., we can do insert and delete operations) and you need to find the kth smallest frequently, how would you optimize?\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/power-of-two",
        "Title": "Power of Two ",
        "Description": "b'Given an integer n, return true if it is a power of two. Otherwise, return false.\\nAn integer n is a power of two, if there exists an integer x such that n == 2x.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 1\\nOutput: true\\nExplanation: 20 = 1\\n\\nExample 2:\\nInput: n = 16\\nOutput: true\\nExplanation: 24 = 16\\n\\nExample 3:\\nInput: n = 3\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n-231 <= n <= 231 - 1\\n\\n\\xc2\\xa0\\nFollow up: Could you solve it without loops/recursion?'"
    },
    {
        "URL": "https://leetcode.com/problems/implement-queue-using-stacks",
        "Title": "Implement Queue using Stacks ",
        "Description": "b'Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (push, peek, pop, and empty).\\nImplement the MyQueue class:\\n\\nvoid push(int x) Pushes element x to the back of the queue.\\nint pop() Removes the element from the front of the queue and returns it.\\nint peek() Returns the element at the front of the queue.\\nboolean empty() Returns true if the queue is empty, false otherwise.\\n\\nNotes:\\n\\nYou must use only standard operations of a stack, which means only push to top, peek/pop from top, size, and is empty operations are valid.\\nDepending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack\\'s standard operations.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput\\n[\"MyQueue\", \"push\", \"push\", \"peek\", \"pop\", \"empty\"]\\n[[], [1], [2], [], [], []]\\nOutput\\n[null, null, null, 1, 1, false]\\n\\nExplanation\\nMyQueue myQueue = new MyQueue();\\nmyQueue.push(1); // queue is: [1]\\nmyQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)\\nmyQueue.peek(); // return 1\\nmyQueue.pop(); // return 1, queue is [2]\\nmyQueue.empty(); // return false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= x <= 9\\nAt most 100\\xc2\\xa0calls will be made to push, pop, peek, and empty.\\nAll the calls to pop and peek are valid.\\n\\n\\xc2\\xa0\\nFollow-up: Can you implement the queue such that each operation is amortized O(1) time complexity? In other words, performing n operations will take overall O(n) time even if one of those operations may take longer.\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/number-of-digit-one",
        "Title": "Number of Digit One ",
        "Description": "b'Given an integer n, count the total number of digit 1 appearing in all non-negative integers less than or equal to n.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 13\\nOutput: 6\\n\\nExample 2:\\nInput: n = 0\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= n <= 109\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/palindrome-linked-list",
        "Title": "Palindrome Linked List ",
        "Description": "b'Given the head of a singly linked list, return true if it is a palindrome.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: head = [1,2,2,1]\\nOutput: true\\n\\nExample 2:\\n\\nInput: head = [1,2]\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the list is in the range [1, 105].\\n0 <= Node.val <= 9\\n\\n\\xc2\\xa0\\nFollow up: Could you do it in O(n) time and O(1) space?'"
    },
    {
        "URL": "https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree",
        "Title": "Lowest Common Ancestor of a Binary Search Tree ",
        "Description": "b'Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.\\nAccording to the definition of LCA on Wikipedia: \\xe2\\x80\\x9cThe lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).\\xe2\\x80\\x9d\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8\\nOutput: 6\\nExplanation: The LCA of nodes 2 and 8 is 6.\\n\\nExample 2:\\n\\nInput: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4\\nOutput: 2\\nExplanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.\\n\\nExample 3:\\nInput: root = [2,1], p = 2, q = 1\\nOutput: 2\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [2, 105].\\n-109 <= Node.val <= 109\\nAll Node.val are unique.\\np != q\\np and q will exist in the BST.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree",
        "Title": "Lowest Common Ancestor of a Binary Tree ",
        "Description": "b'Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.\\nAccording to the definition of LCA on Wikipedia: \\xe2\\x80\\x9cThe lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).\\xe2\\x80\\x9d\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\\nOutput: 3\\nExplanation: The LCA of nodes 5 and 1 is 3.\\n\\nExample 2:\\n\\nInput: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4\\nOutput: 5\\nExplanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.\\n\\nExample 3:\\nInput: root = [1,2], p = 1, q = 2\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [2, 105].\\n-109 <= Node.val <= 109\\nAll Node.val are unique.\\np != q\\np and q will exist in the tree.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/delete-node-in-a-linked-list",
        "Title": "Delete Node in a Linked List ",
        "Description": "b'Write a function to delete a node in a singly-linked list. You will not be given access to the head of the list, instead you will be given access to the node to be deleted directly.\\nIt is guaranteed that the node to be deleted is not a tail node in the list.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: head = [4,5,1,9], node = 5\\nOutput: [4,1,9]\\nExplanation: You are given the second node with value 5, the linked list should become 4 -> 1 -> 9 after calling your function.\\n\\nExample 2:\\n\\nInput: head = [4,5,1,9], node = 1\\nOutput: [4,5,9]\\nExplanation: You are given the third node with value 1, the linked list should become 4 -> 5 -> 9 after calling your function.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of the nodes in the given list is in the range [2, 1000].\\n-1000 <= Node.val <= 1000\\nThe value of each node in the list is unique.\\nThe node to be deleted is in the list and is not a tail node\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/product-of-array-except-self",
        "Title": "Product of Array Except Self ",
        "Description": "b'Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].\\nThe product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.\\nYou must write an algorithm that runs in\\xc2\\xa0O(n)\\xc2\\xa0time and without using the division operation.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,2,3,4]\\nOutput: [24,12,8,6]\\nExample 2:\\nInput: nums = [-1,1,0,-3,3]\\nOutput: [0,0,9,0,0]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n2 <= nums.length <= 105\\n-30 <= nums[i] <= 30\\nThe product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.\\n\\n\\xc2\\xa0\\nFollow up:\\xc2\\xa0Can you solve the problem in O(1)\\xc2\\xa0extra\\xc2\\xa0space complexity? (The output array does not count as extra space for space complexity analysis.)\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/sliding-window-maximum",
        "Title": "Sliding Window Maximum ",
        "Description": "b'You are given an array of integers\\xc2\\xa0nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.\\nReturn the max sliding window.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,3,-1,-3,5,3,6,7], k = 3\\nOutput: [3,3,5,5,6,7]\\nExplanation: \\nWindow position                Max\\n---------------               -----\\n[1  3  -1] -3  5  3  6  7       3\\n 1 [3  -1  -3] 5  3  6  7       3\\n 1  3 [-1  -3  5] 3  6  7       5\\n 1  3  -1 [-3  5  3] 6  7       5\\n 1  3  -1  -3 [5  3  6] 7       6\\n 1  3  -1  -3  5 [3  6  7]      7\\n\\nExample 2:\\nInput: nums = [1], k = 1\\nOutput: [1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 105\\n-104 <= nums[i] <= 104\\n1 <= k <= nums.length\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/search-a-2d-matrix-ii",
        "Title": "Search a 2D Matrix II ",
        "Description": "b'Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:\\n\\nIntegers in each row are sorted in ascending from left to right.\\nIntegers in each column are sorted in ascending from top to bottom.\\n\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5\\nOutput: true\\n\\nExample 2:\\n\\nInput: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == matrix.length\\nn == matrix[i].length\\n1 <= n, m <= 300\\n-109 <= matrix[i][j] <= 109\\nAll the integers in each row are sorted in ascending order.\\nAll the integers in each column are sorted in ascending order.\\n-109 <= target <= 109\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/different-ways-to-add-parentheses",
        "Title": "Different Ways to Add Parentheses ",
        "Description": "b'Given a string expression of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators. You may return the answer in any order.\\nThe test cases are generated such that the output values fit in a 32-bit integer and the number of different results does not exceed 104.\\n\\xc2\\xa0\\nExample 1:\\nInput: expression = \"2-1-1\"\\nOutput: [0,2]\\nExplanation:\\n((2-1)-1) = 0 \\n(2-(1-1)) = 2\\n\\nExample 2:\\nInput: expression = \"2*3-4*5\"\\nOutput: [-34,-14,-10,-10,10]\\nExplanation:\\n(2*(3-(4*5))) = -34 \\n((2*3)-(4*5)) = -14 \\n((2*(3-4))*5) = -10 \\n(2*((3-4)*5)) = -10 \\n(((2*3)-4)*5) = 10\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= expression.length <= 20\\nexpression consists of digits and the operator \\'+\\', \\'-\\', and \\'*\\'.\\nAll the integer values in the input expression are in the range [0, 99].\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/valid-anagram",
        "Title": "Valid Anagram ",
        "Description": "b'Given two strings s and t, return true if t is an anagram of s, and false otherwise.\\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"anagram\", t = \"nagaram\"\\nOutput: true\\nExample 2:\\nInput: s = \"rat\", t = \"car\"\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length, t.length <= 5 * 104\\ns and t consist of lowercase English letters.\\n\\n\\xc2\\xa0\\nFollow up: What if the inputs contain Unicode characters? How would you adapt your solution to such a case?\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/shortest-word-distance",
        "Title": "Shortest Word Distance ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/shortest-word-distance-ii",
        "Title": "Shortest Word Distance II ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/shortest-word-distance-iii",
        "Title": "Shortest Word Distance III ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/strobogrammatic-number",
        "Title": "Strobogrammatic Number ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/strobogrammatic-number-ii",
        "Title": "Strobogrammatic Number II ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/strobogrammatic-number-iii",
        "Title": "Strobogrammatic Number III ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/group-shifted-strings",
        "Title": "Group Shifted Strings ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/count-univalue-subtrees",
        "Title": "Count Univalue Subtrees ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/flatten-2d-vector",
        "Title": "Flatten 2D Vector ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/meeting-rooms",
        "Title": "Meeting Rooms ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/meeting-rooms-ii",
        "Title": "Meeting Rooms II ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/factor-combinations",
        "Title": "Factor Combinations ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/verify-preorder-sequence-in-binary-search-tree",
        "Title": "Verify Preorder Sequence in Binary Search Tree ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/paint-house",
        "Title": "Paint House ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/binary-tree-paths",
        "Title": "Binary Tree Paths ",
        "Description": "b'Given the root of a binary tree, return all root-to-leaf paths in any order.\\nA leaf is a node with no children.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [1,2,3,null,5]\\nOutput: [\"1->2->5\",\"1->3\"]\\n\\nExample 2:\\nInput: root = [1]\\nOutput: [\"1\"]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [1, 100].\\n-100 <= Node.val <= 100\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/add-digits",
        "Title": "Add Digits ",
        "Description": "b'Given an integer num, repeatedly add all its digits until the result has only one digit, and return it.\\n\\xc2\\xa0\\nExample 1:\\nInput: num = 38\\nOutput: 2\\nExplanation: The process is\\n38 --> 3 + 8 --> 11\\n11 --> 1 + 1 --> 2 \\nSince 2 has only one digit, return it.\\n\\nExample 2:\\nInput: num = 0\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= num <= 231 - 1\\n\\n\\xc2\\xa0\\nFollow up: Could you do it without any loop/recursion in O(1) runtime?\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/3sum-smaller",
        "Title": "3Sum Smaller ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/single-number-iii",
        "Title": "Single Number III ",
        "Description": "b'Given an integer array nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once. You can return the answer in any order.\\nYou must write an\\xc2\\xa0algorithm that runs in linear runtime complexity and uses\\xc2\\xa0only constant extra space.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,2,1,3,2,5]\\nOutput: [3,5]\\nExplanation:  [5, 3] is also a valid answer.\\n\\nExample 2:\\nInput: nums = [-1,0]\\nOutput: [-1,0]\\n\\nExample 3:\\nInput: nums = [0,1]\\nOutput: [1,0]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n2 <= nums.length <= 3 * 104\\n-231 <= nums[i] <= 231 - 1\\nEach integer in nums will appear twice, only two integers will appear once.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/graph-valid-tree",
        "Title": "Graph Valid Tree ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/trips-and-users",
        "Title": "Trips and Users ",
        "Description": "b'SQL SchemaTable: Trips\\n+-------------+----------+\\n| Column Name | Type     |\\n+-------------+----------+\\n| id          | int      |\\n| client_id   | int      |\\n| driver_id   | int      |\\n| city_id     | int      |\\n| status      | enum     |\\n| request_at  | date     |     \\n+-------------+----------+\\nid is the primary key for this table.\\nThe table holds all taxi trips. Each trip has a unique id, while client_id and driver_id are foreign keys to the users_id at the Users table.\\nStatus is an ENUM type of (\\'completed\\', \\'cancelled_by_driver\\', \\'cancelled_by_client\\').\\n\\n\\xc2\\xa0\\nTable: Users\\n+-------------+----------+\\n| Column Name | Type     |\\n+-------------+----------+\\n| users_id    | int      |\\n| banned      | enum     |\\n| role        | enum     |\\n+-------------+----------+\\nusers_id is the primary key for this table.\\nThe table holds all users. Each user has a unique users_id, and role is an ENUM type of (\\'client\\', \\'driver\\', \\'partner\\').\\nbanned is an ENUM type of (\\'Yes\\', \\'No\\').\\n\\n\\xc2\\xa0\\nThe cancellation rate is computed by dividing the number of canceled (by client or driver) requests with unbanned users by the total number of requests with unbanned users on that day.\\nWrite a SQL query to find the cancellation rate of requests with unbanned users (both client and driver must not be banned) each day between \"2013-10-01\" and \"2013-10-03\". Round Cancellation Rate to two decimal points.\\nReturn the result table in any order.\\nThe query result format is in the following example.\\n\\xc2\\xa0\\nExample 1:\\nInput: \\nTrips table:\\n+----+-----------+-----------+---------+---------------------+------------+\\n| id | client_id | driver_id | city_id | status              | request_at |\\n+----+-----------+-----------+---------+---------------------+------------+\\n| 1  | 1         | 10        | 1       | completed           | 2013-10-01 |\\n| 2  | 2         | 11        | 1       | cancelled_by_driver | 2013-10-01 |\\n| 3  | 3         | 12        | 6       | completed           | 2013-10-01 |\\n| 4  | 4         | 13        | 6       | cancelled_by_client | 2013-10-01 |\\n| 5  | 1         | 10        | 1       | completed           | 2013-10-02 |\\n| 6  | 2         | 11        | 6       | completed           | 2013-10-02 |\\n| 7  | 3         | 12        | 6       | completed           | 2013-10-02 |\\n| 8  | 2         | 12        | 12      | completed           | 2013-10-03 |\\n| 9  | 3         | 10        | 12      | completed           | 2013-10-03 |\\n| 10 | 4         | 13        | 12      | cancelled_by_driver | 2013-10-03 |\\n+----+-----------+-----------+---------+---------------------+------------+\\nUsers table:\\n+----------+--------+--------+\\n| users_id | banned | role   |\\n+----------+--------+--------+\\n| 1        | No     | client |\\n| 2        | Yes    | client |\\n| 3        | No     | client |\\n| 4        | No     | client |\\n| 10       | No     | driver |\\n| 11       | No     | driver |\\n| 12       | No     | driver |\\n| 13       | No     | driver |\\n+----------+--------+--------+\\nOutput: \\n+------------+-------------------+\\n| Day        | Cancellation Rate |\\n+------------+-------------------+\\n| 2013-10-01 | 0.33              |\\n| 2013-10-02 | 0.00              |\\n| 2013-10-03 | 0.50              |\\n+------------+-------------------+\\nExplanation: \\nOn 2013-10-01:\\n  - There were 4 requests in total, 2 of which were canceled.\\n  - However, the request with Id=2 was made by a banned client (User_Id=2), so it is ignored in the calculation.\\n  - Hence there are 3 unbanned requests in total, 1 of which was canceled.\\n  - The Cancellation Rate is (1 / 3) = 0.33\\nOn 2013-10-02:\\n  - There were 3 requests in total, 0 of which were canceled.\\n  - The request with Id=6 was made by a banned client, so it is ignored.\\n  - Hence there are 2 unbanned requests in total, 0 of which were canceled.\\n  - The Cancellation Rate is (0 / 2) = 0.00\\nOn 2013-10-03:\\n  - There were 3 requests in total, 1 of which was canceled.\\n  - The request with Id=8 was made by a banned client, so it is ignored.\\n  - Hence there are 2 unbanned request in total, 1 of which were canceled.\\n  - The Cancellation Rate is (1 / 2) = 0.50\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/ugly-number",
        "Title": "Ugly Number ",
        "Description": "b'An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5.\\nGiven an integer n, return true if n is an ugly number.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 6\\nOutput: true\\nExplanation: 6 = 2 \\xc3\\x97 3\\n\\nExample 2:\\nInput: n = 1\\nOutput: true\\nExplanation: 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.\\n\\nExample 3:\\nInput: n = 14\\nOutput: false\\nExplanation: 14 is not ugly since it includes the prime factor 7.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n-231 <= n <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/ugly-number-ii",
        "Title": "Ugly Number II ",
        "Description": "b'An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5.\\nGiven an integer n, return the nth ugly number.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 10\\nOutput: 12\\nExplanation: [1, 2, 3, 4, 5, 6, 8, 9, 10, 12] is the sequence of the first 10 ugly numbers.\\n\\nExample 2:\\nInput: n = 1\\nOutput: 1\\nExplanation: 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 1690\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/paint-house-ii",
        "Title": "Paint House II ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/palindrome-permutation",
        "Title": "Palindrome Permutation ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/palindrome-permutation-ii",
        "Title": "Palindrome Permutation II ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/missing-number",
        "Title": "Missing Number ",
        "Description": "b'Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [3,0,1]\\nOutput: 2\\nExplanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.\\n\\nExample 2:\\nInput: nums = [0,1]\\nOutput: 2\\nExplanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.\\n\\nExample 3:\\nInput: nums = [9,6,4,2,3,5,7,0,1]\\nOutput: 8\\nExplanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == nums.length\\n1 <= n <= 104\\n0 <= nums[i] <= n\\nAll the numbers of nums are unique.\\n\\n\\xc2\\xa0\\nFollow up: Could you implement a solution using only O(1) extra space complexity and O(n) runtime complexity?\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/alien-dictionary",
        "Title": "Alien Dictionary ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/closest-binary-search-tree-value",
        "Title": "Closest Binary Search Tree Value ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/encode-and-decode-strings",
        "Title": "Encode and Decode Strings ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/closest-binary-search-tree-value-ii",
        "Title": "Closest Binary Search Tree Value II ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/integer-to-english-words",
        "Title": "Integer to English Words ",
        "Description": "b'Convert a non-negative integer num to its English words representation.\\n\\xc2\\xa0\\nExample 1:\\nInput: num = 123\\nOutput: \"One Hundred Twenty Three\"\\n\\nExample 2:\\nInput: num = 12345\\nOutput: \"Twelve Thousand Three Hundred Forty Five\"\\n\\nExample 3:\\nInput: num = 1234567\\nOutput: \"One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= num <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/h-index",
        "Title": "H-Index ",
        "Description": "b\"Given an array of integers citations where citations[i] is the number of citations a researcher received for their ith paper, return compute the researcher's h-index.\\nAccording to the definition of h-index on Wikipedia: A scientist has an index h if h of their n papers have at least h citations each, and the other n \\xe2\\x88\\x92 h papers have no more than h citations each.\\nIf there are several possible values for h, the maximum one is taken as the h-index.\\n\\xc2\\xa0\\nExample 1:\\nInput: citations = [3,0,6,1,5]\\nOutput: 3\\nExplanation: [3,0,6,1,5] means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively.\\nSince the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.\\n\\nExample 2:\\nInput: citations = [1,3,1]\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == citations.length\\n1 <= n <= 5000\\n0 <= citations[i] <= 1000\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/h-index-ii",
        "Title": "H-Index II ",
        "Description": "b\"Given an array of integers citations where citations[i] is the number of citations a researcher received for their ith paper and citations\\xc2\\xa0is sorted in an ascending order, return compute the researcher's h-index.\\nAccording to the definition of h-index on Wikipedia: A scientist has an index h if h of their n papers have at least h citations each, and the other n \\xe2\\x88\\x92 h papers have no more than h citations each.\\nIf there are several possible values for h, the maximum one is taken as the h-index.\\nYou must write an algorithm that runs in logarithmic time.\\n\\xc2\\xa0\\nExample 1:\\nInput: citations = [0,1,3,5,6]\\nOutput: 3\\nExplanation: [0,1,3,5,6] means the researcher has 5 papers in total and each of them had received 0, 1, 3, 5, 6 citations respectively.\\nSince the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.\\n\\nExample 2:\\nInput: citations = [1,2,100]\\nOutput: 2\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == citations.length\\n1 <= n <= 105\\n0 <= citations[i] <= 1000\\ncitations is sorted in ascending order.\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/paint-fence",
        "Title": "Paint Fence ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/find-the-celebrity",
        "Title": "Find the Celebrity ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/first-bad-version",
        "Title": "First Bad Version ",
        "Description": "b'You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.\\nSuppose you have n versions [1, 2, ..., n] and you want to find out the first bad one, which causes all the following ones to be bad.\\nYou are given an API bool isBadVersion(version) which returns whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 5, bad = 4\\nOutput: 4\\nExplanation:\\ncall isBadVersion(3) -> false\\ncall isBadVersion(5)\\xc2\\xa0-> true\\ncall isBadVersion(4)\\xc2\\xa0-> true\\nThen 4 is the first bad version.\\n\\nExample 2:\\nInput: n = 1, bad = 1\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= bad <= n <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/perfect-squares",
        "Title": "Perfect Squares ",
        "Description": "b'Given an integer n, return the least number of perfect square numbers that sum to n.\\nA perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, 1, 4, 9, and 16 are perfect squares while 3 and 11 are not.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 12\\nOutput: 3\\nExplanation: 12 = 4 + 4 + 4.\\n\\nExample 2:\\nInput: n = 13\\nOutput: 2\\nExplanation: 13 = 4 + 9.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/wiggle-sort",
        "Title": "Wiggle Sort ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/zigzag-iterator",
        "Title": "Zigzag Iterator ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/expression-add-operators",
        "Title": "Expression Add Operators ",
        "Description": "b'Given a string num that contains only digits and an integer target, return all possibilities to insert the binary operators \\'+\\', \\'-\\', and/or \\'*\\' between the digits of num so that the resultant expression evaluates to the target value.\\nNote that operands in the returned expressions should not contain leading zeros.\\n\\xc2\\xa0\\nExample 1:\\nInput: num = \"123\", target = 6\\nOutput: [\"1*2*3\",\"1+2+3\"]\\nExplanation: Both \"1*2*3\" and \"1+2+3\" evaluate to 6.\\n\\nExample 2:\\nInput: num = \"232\", target = 8\\nOutput: [\"2*3+2\",\"2+3*2\"]\\nExplanation: Both \"2*3+2\" and \"2+3*2\" evaluate to 8.\\n\\nExample 3:\\nInput: num = \"3456237490\", target = 9191\\nOutput: []\\nExplanation: There are no expressions that can be created from \"3456237490\" to evaluate to 9191.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= num.length <= 10\\nnum consists of only digits.\\n-231 <= target <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/move-zeroes",
        "Title": "Move Zeroes ",
        "Description": "b\"Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.\\nNote that you must do this in-place without making a copy of the array.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [0,1,0,3,12]\\nOutput: [1,3,12,0,0]\\nExample 2:\\nInput: nums = [0]\\nOutput: [0]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 104\\n-231 <= nums[i] <= 231 - 1\\n\\n\\xc2\\xa0\\nFollow up: Could you minimize the total number of operations done?\""
    },
    {
        "URL": "https://leetcode.com/problems/peeking-iterator",
        "Title": "Peeking Iterator ",
        "Description": "b'Design an iterator that supports the peek operation on an existing iterator in addition to the hasNext and the next operations.\\nImplement the PeekingIterator class:\\n\\nPeekingIterator(Iterator<int> nums) Initializes the object with the given integer iterator iterator.\\nint next() Returns the next element in the array and moves the pointer to the next element.\\nboolean hasNext() Returns true if there are still elements in the array.\\nint peek() Returns the next element in the array without moving the pointer.\\n\\nNote: Each language may have a different implementation of the constructor and Iterator, but they all support the int next() and boolean hasNext() functions.\\n\\xc2\\xa0\\nExample 1:\\nInput\\n[\"PeekingIterator\", \"next\", \"peek\", \"next\", \"next\", \"hasNext\"]\\n[[[1, 2, 3]], [], [], [], [], []]\\nOutput\\n[null, 1, 2, 2, 3, false]\\n\\nExplanation\\nPeekingIterator peekingIterator = new PeekingIterator([1, 2, 3]); // [1,2,3]\\npeekingIterator.next();    // return 1, the pointer moves to the next element [1,2,3].\\npeekingIterator.peek();    // return 2, the pointer does not move [1,2,3].\\npeekingIterator.next();    // return 2, the pointer moves to the next element [1,2,3]\\npeekingIterator.next();    // return 3, the pointer moves to the next element [1,2,3]\\npeekingIterator.hasNext(); // return False\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 1000\\n1 <= nums[i] <= 1000\\nAll the calls to next and peek are valid.\\nAt most 1000 calls will be made to next, hasNext, and peek.\\n\\n\\xc2\\xa0\\nFollow up: How would you extend your design to be generic and work with all types, not just integer?'"
    },
    {
        "URL": "https://leetcode.com/problems/inorder-successor-in-bst",
        "Title": "Inorder Successor in BST ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/walls-and-gates",
        "Title": "Walls and Gates ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/find-the-duplicate-number",
        "Title": "Find the Duplicate Number ",
        "Description": "b'Given an array of integers nums containing\\xc2\\xa0n + 1 integers where each integer is in the range [1, n] inclusive.\\nThere is only one repeated number in nums, return this\\xc2\\xa0repeated\\xc2\\xa0number.\\nYou must solve the problem without modifying the array nums\\xc2\\xa0and uses only constant extra space.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,3,4,2,2]\\nOutput: 2\\n\\nExample 2:\\nInput: nums = [3,1,3,4,2]\\nOutput: 3\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 105\\nnums.length == n + 1\\n1 <= nums[i] <= n\\nAll the integers in nums appear only once except for precisely one integer which appears two or more times.\\n\\n\\xc2\\xa0\\nFollow up:\\n\\nHow can we prove that at least one duplicate number must exist in nums?\\nCan you solve the problem in linear runtime complexity?\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/unique-word-abbreviation",
        "Title": "Unique Word Abbreviation ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/game-of-life",
        "Title": "Game of Life ",
        "Description": "b'According to\\xc2\\xa0Wikipedia\\'s article: \"The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.\"\\nThe board is made up of an m x n grid of cells, where each cell has an initial state: live (represented by a 1) or dead (represented by a 0). Each cell interacts with its eight neighbors (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):\\n\\nAny live cell with fewer than two live neighbors dies as if caused by under-population.\\nAny live cell with two or three live neighbors lives on to the next generation.\\nAny live cell with more than three live neighbors dies, as if by over-population.\\nAny dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.\\n\\nThe next state is created by applying the above rules simultaneously to every cell in the current state, where births and deaths occur simultaneously. Given the current state of the m x n grid board, return the next state.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: board = [[0,1,0],[0,0,1],[1,1,1],[0,0,0]]\\nOutput: [[0,0,0],[1,0,1],[0,1,1],[0,1,0]]\\n\\nExample 2:\\n\\nInput: board = [[1,1],[1,0]]\\nOutput: [[1,1],[1,1]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == board.length\\nn == board[i].length\\n1 <= m, n <= 25\\nboard[i][j] is 0 or 1.\\n\\n\\xc2\\xa0\\nFollow up:\\n\\nCould you solve it in-place? Remember that the board needs to be updated simultaneously: You cannot update some cells first and then use their updated values to update other cells.\\nIn this question, we represent the board using a 2D array. In principle, the board is infinite, which would cause problems when the active area encroaches upon the border of the array (i.e., live cells reach the border). How would you address these problems?\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/word-pattern",
        "Title": "Word Pattern ",
        "Description": "b'Given a pattern and a string s, find if s\\xc2\\xa0follows the same pattern.\\nHere follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s.\\n\\xc2\\xa0\\nExample 1:\\nInput: pattern = \"abba\", s = \"dog cat cat dog\"\\nOutput: true\\n\\nExample 2:\\nInput: pattern = \"abba\", s = \"dog cat cat fish\"\\nOutput: false\\n\\nExample 3:\\nInput: pattern = \"aaaa\", s = \"dog cat cat dog\"\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= pattern.length <= 300\\npattern contains only lower-case English letters.\\n1 <= s.length <= 3000\\ns contains only lowercase English letters and spaces \\' \\'.\\ns does not contain any leading or trailing spaces.\\nAll the words in s are separated by a single space.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/word-pattern-ii",
        "Title": "Word Pattern II ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/nim-game",
        "Title": "Nim Game ",
        "Description": "b'You are playing the following Nim Game with your friend:\\n\\nInitially, there is a heap of stones on the table.\\nYou and your friend will alternate taking turns, and you go first.\\nOn each turn, the person whose turn it is will remove 1 to 3 stones from the heap.\\nThe one who removes the last stone is the winner.\\n\\nGiven n, the number of stones in the heap, return true if you can win the game assuming both you and your friend play optimally, otherwise return false.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 4\\nOutput: false\\nExplanation: These are the possible outcomes:\\n1. You remove 1 stone. Your friend removes 3 stones, including the last stone. Your friend wins.\\n2. You remove 2 stones. Your friend removes 2 stones, including the last stone. Your friend wins.\\n3. You remove 3 stones. Your friend removes the last stone. Your friend wins.\\nIn all outcomes, your friend wins.\\n\\nExample 2:\\nInput: n = 1\\nOutput: true\\n\\nExample 3:\\nInput: n = 2\\nOutput: true\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/flip-game",
        "Title": "Flip Game ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/flip-game-ii",
        "Title": "Flip Game II ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/find-median-from-data-stream",
        "Title": "Find Median from Data Stream ",
        "Description": "b'The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value and the median is the mean of the two middle values.\\n\\nFor example, for arr = [2,3,4], the median is 3.\\nFor example, for arr = [2,3], the median is (2 + 3) / 2 = 2.5.\\n\\nImplement the MedianFinder class:\\n\\nMedianFinder() initializes the MedianFinder object.\\nvoid addNum(int num) adds the integer num from the data stream to the data structure.\\ndouble findMedian() returns the median of all elements so far. Answers within 10-5 of the actual answer will be accepted.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput\\n[\"MedianFinder\", \"addNum\", \"addNum\", \"findMedian\", \"addNum\", \"findMedian\"]\\n[[], [1], [2], [], [3], []]\\nOutput\\n[null, null, null, 1.5, null, 2.0]\\n\\nExplanation\\nMedianFinder medianFinder = new MedianFinder();\\nmedianFinder.addNum(1);    // arr = [1]\\nmedianFinder.addNum(2);    // arr = [1, 2]\\nmedianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2)\\nmedianFinder.addNum(3);    // arr[1, 2, 3]\\nmedianFinder.findMedian(); // return 2.0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n-105 <= num <= 105\\nThere will be at least one element in the data structure before calling findMedian.\\nAt most 5 * 104 calls will be made to addNum and findMedian.\\n\\n\\xc2\\xa0\\nFollow up:\\n\\nIf all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?\\nIf 99% of all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/best-meeting-point",
        "Title": "Best Meeting Point ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/serialize-and-deserialize-binary-tree",
        "Title": "Serialize and Deserialize Binary Tree ",
        "Description": "b'Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.\\nDesign an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.\\nClarification: The input/output format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [1,2,3,null,null,4,5]\\nOutput: [1,2,3,null,null,4,5]\\n\\nExample 2:\\nInput: root = []\\nOutput: []\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [0, 104].\\n-1000 <= Node.val <= 1000\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/binary-tree-longest-consecutive-sequence",
        "Title": "Binary Tree Longest Consecutive Sequence ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/bulls-and-cows",
        "Title": "Bulls and Cows ",
        "Description": "b'You are playing the Bulls and Cows game with your friend.\\nYou write down a secret number and ask your friend to guess what the number is. When your friend makes a guess, you provide a hint with the following info:\\n\\nThe number of \"bulls\", which are digits in the guess that are in the correct position.\\nThe number of \"cows\", which are digits in the guess that are in your secret number but are located in the wrong position. Specifically, the non-bull digits in the guess that could be rearranged such that they become bulls.\\n\\nGiven the secret number secret and your friend\\'s guess guess, return the hint for your friend\\'s guess.\\nThe hint should be formatted as \"xAyB\", where x is the number of bulls and y is the number of cows. Note that both secret and guess may contain duplicate digits.\\n\\xc2\\xa0\\nExample 1:\\nInput: secret = \"1807\", guess = \"7810\"\\nOutput: \"1A3B\"\\nExplanation: Bulls are connected with a \\'|\\' and cows are underlined:\\n\"1807\"\\n  |\\n\"7810\"\\nExample 2:\\nInput: secret = \"1123\", guess = \"0111\"\\nOutput: \"1A1B\"\\nExplanation: Bulls are connected with a \\'|\\' and cows are underlined:\\n\"1123\"        \"1123\"\\n  |      or     |\\n\"0111\"        \"0111\"\\nNote that only one of the two unmatched 1s is counted as a cow since the non-bull digits can only be rearranged to allow one 1 to be a bull.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= secret.length, guess.length <= 1000\\nsecret.length == guess.length\\nsecret and guess consist of digits only.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/longest-increasing-subsequence",
        "Title": "Longest Increasing Subsequence ",
        "Description": "b'Given an integer array nums, return the length of the longest strictly increasing subsequence.\\nA subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. For example, [3,6,2,7] is a subsequence of the array [0,3,1,6,2,2,7].\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [10,9,2,5,3,7,101,18]\\nOutput: 4\\nExplanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.\\n\\nExample 2:\\nInput: nums = [0,1,0,3,2,3]\\nOutput: 4\\n\\nExample 3:\\nInput: nums = [7,7,7,7,7,7,7]\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 2500\\n-104 <= nums[i] <= 104\\n\\n\\xc2\\xa0\\nFollow up:\\xc2\\xa0Can you come up with an algorithm that runs in\\xc2\\xa0O(n log(n)) time complexity?\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/remove-invalid-parentheses",
        "Title": "Remove Invalid Parentheses ",
        "Description": "b'Given a string s that contains parentheses and letters, remove the minimum number of invalid parentheses to make the input string valid.\\nReturn all the possible results. You may return the answer in any order.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"()())()\"\\nOutput: [\"(())()\",\"()()()\"]\\n\\nExample 2:\\nInput: s = \"(a)())()\"\\nOutput: [\"(a())()\",\"(a)()()\"]\\n\\nExample 3:\\nInput: s = \")(\"\\nOutput: [\"\"]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 25\\ns consists of lowercase English letters and parentheses \\'(\\' and \\')\\'.\\nThere will be at most 20 parentheses in s.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/smallest-rectangle-enclosing-black-pixels",
        "Title": "Smallest Rectangle Enclosing Black Pixels ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/range-sum-query-immutable",
        "Title": "Range Sum Query - Immutable ",
        "Description": "b'Given an integer array nums, handle multiple queries of the following type:\\n\\nCalculate the sum of the elements of nums between indices left and right inclusive where left <= right.\\n\\nImplement the NumArray class:\\n\\nNumArray(int[] nums) Initializes the object with the integer array nums.\\nint sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).\\n\\n\\xc2\\xa0\\nExample 1:\\nInput\\n[\"NumArray\", \"sumRange\", \"sumRange\", \"sumRange\"]\\n[[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]\\nOutput\\n[null, 1, -1, -3]\\n\\nExplanation\\nNumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);\\nnumArray.sumRange(0, 2); // return (-2) + 0 + 3 = 1\\nnumArray.sumRange(2, 5); // return 3 + (-5) + 2 + (-1) = -1\\nnumArray.sumRange(0, 5); // return (-2) + 0 + 3 + (-5) + 2 + (-1) = -3\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 104\\n-105 <= nums[i] <= 105\\n0 <= left <= right < nums.length\\nAt most 104 calls will be made to sumRange.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/range-sum-query-2d-immutable",
        "Title": "Range Sum Query 2D - Immutable ",
        "Description": "b'Given a 2D matrix matrix, handle multiple queries of the following type:\\n\\nCalculate the sum of the elements of matrix inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).\\n\\nImplement the NumMatrix class:\\n\\nNumMatrix(int[][] matrix) Initializes the object with the integer matrix matrix.\\nint sumRegion(int row1, int col1, int row2, int col2) Returns the sum of the elements of matrix inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).\\n\\n\\xc2\\xa0\\nExample 1:\\n\\nInput\\n[\"NumMatrix\", \"sumRegion\", \"sumRegion\", \"sumRegion\"]\\n[[[[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]], [2, 1, 4, 3], [1, 1, 2, 2], [1, 2, 2, 4]]\\nOutput\\n[null, 8, 11, 12]\\n\\nExplanation\\nNumMatrix numMatrix = new NumMatrix([[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]);\\nnumMatrix.sumRegion(2, 1, 4, 3); // return 8 (i.e sum of the red rectangle)\\nnumMatrix.sumRegion(1, 1, 2, 2); // return 11 (i.e sum of the green rectangle)\\nnumMatrix.sumRegion(1, 2, 2, 4); // return 12 (i.e sum of the blue rectangle)\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == matrix.length\\nn == matrix[i].length\\n1 <= m, n <= 200\\n-104 <= matrix[i][j] <= 104\\n0 <= row1 <= row2 < m\\n0 <= col1 <= col2 < n\\nAt most 104 calls will be made to sumRegion.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/number-of-islands-ii",
        "Title": "Number of Islands II ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/additive-number",
        "Title": "Additive Number ",
        "Description": "b'An additive number is a string whose digits can form an additive sequence.\\nA valid additive sequence should contain at least three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two.\\nGiven a string containing only digits, return true if it is an additive number or false otherwise.\\nNote: Numbers in the additive sequence cannot have leading zeros, so sequence 1, 2, 03 or 1, 02, 3 is invalid.\\n\\xc2\\xa0\\nExample 1:\\nInput: \"112358\"\\nOutput: true\\nExplanation: \\nThe digits can form an additive sequence: 1, 1, 2, 3, 5, 8. \\n1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8\\n\\nExample 2:\\nInput: \"199100199\"\\nOutput: true\\nExplanation: \\nThe additive sequence is: 1, 99, 100, 199.\\xc2\\xa0\\n1 + 99 = 100, 99 + 100 = 199\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= num.length <= 35\\nnum consists only of digits.\\n\\n\\xc2\\xa0\\nFollow up: How would you handle overflow for very large input integers?\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/range-sum-query-mutable",
        "Title": "Range Sum Query - Mutable ",
        "Description": "b'Given an integer array nums, handle multiple queries of the following types:\\n\\nUpdate the value of an element in nums.\\nCalculate the sum of the elements of nums between indices left and right inclusive where left <= right.\\n\\nImplement the NumArray class:\\n\\nNumArray(int[] nums) Initializes the object with the integer array nums.\\nvoid update(int index, int val) Updates the value of nums[index] to be val.\\nint sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).\\n\\n\\xc2\\xa0\\nExample 1:\\nInput\\n[\"NumArray\", \"sumRange\", \"update\", \"sumRange\"]\\n[[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]\\nOutput\\n[null, 9, null, 8]\\n\\nExplanation\\nNumArray numArray = new NumArray([1, 3, 5]);\\nnumArray.sumRange(0, 2); // return 1 + 3 + 5 = 9\\nnumArray.update(1, 2);   // nums = [1, 2, 5]\\nnumArray.sumRange(0, 2); // return 1 + 2 + 5 = 8\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 3 * 104\\n-100 <= nums[i] <= 100\\n0 <= index < nums.length\\n-100 <= val <= 100\\n0 <= left <= right < nums.length\\nAt most 3 * 104 calls will be made to update and sumRange.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/range-sum-query-2d-mutable",
        "Title": "Range Sum Query 2D - Mutable ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown",
        "Title": "Best Time to Buy and Sell Stock with Cooldown ",
        "Description": "b'You are given an array prices where prices[i] is the price of a given stock on the ith day.\\nFind the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions:\\n\\nAfter you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).\\n\\nNote: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\\n\\xc2\\xa0\\nExample 1:\\nInput: prices = [1,2,3,0,2]\\nOutput: 3\\nExplanation: transactions = [buy, sell, cooldown, buy, sell]\\n\\nExample 2:\\nInput: prices = [1]\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= prices.length <= 5000\\n0 <= prices[i] <= 1000\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/minimum-height-trees",
        "Title": "Minimum Height Trees ",
        "Description": "b\"A tree is an undirected graph in which any two vertices are connected by\\xc2\\xa0exactly\\xc2\\xa0one path. In other words, any connected graph without simple cycles is a tree.\\nGiven a tree of n nodes\\xc2\\xa0labelled from 0 to n - 1, and an array of\\xc2\\xa0n - 1\\xc2\\xa0edges where edges[i] = [ai, bi] indicates that there is an undirected edge between the two nodes\\xc2\\xa0ai and\\xc2\\xa0bi in the tree,\\xc2\\xa0you can choose any node of the tree as the root. When you select a node x as the root, the result tree has height h. Among all possible rooted trees, those with minimum height (i.e. min(h))\\xc2\\xa0 are called minimum height trees (MHTs).\\nReturn a list of all MHTs' root labels.\\xc2\\xa0You can return the answer in any order.\\nThe height of a rooted tree is the number of edges on the longest downward path between the root and a leaf.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: n = 4, edges = [[1,0],[1,2],[1,3]]\\nOutput: [1]\\nExplanation: As shown, the height of the tree is 1 when the root is the node with label 1 which is the only MHT.\\n\\nExample 2:\\n\\nInput: n = 6, edges = [[3,0],[3,1],[3,2],[3,4],[5,4]]\\nOutput: [3,4]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 2 * 104\\nedges.length == n - 1\\n0 <= ai, bi < n\\nai != bi\\nAll the pairs (ai, bi) are distinct.\\nThe given input is guaranteed to be a tree and there will be no repeated edges.\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/sparse-matrix-multiplication",
        "Title": "Sparse Matrix Multiplication ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/burst-balloons",
        "Title": "Burst Balloons ",
        "Description": "b'You are given n balloons, indexed from 0 to n - 1. Each balloon is painted with a number on it represented by an array nums. You are asked to burst all the balloons.\\nIf you burst the ith balloon, you will get nums[i - 1] * nums[i] * nums[i + 1] coins. If i - 1 or i + 1 goes out of bounds of the array, then treat it as if there is a balloon with a 1 painted on it.\\nReturn the maximum coins you can collect by bursting the balloons wisely.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [3,1,5,8]\\nOutput: 167\\nExplanation:\\nnums = [3,1,5,8] --> [3,5,8] --> [3,8] --> [8] --> []\\ncoins =  3*1*5    +   3*5*8   +  1*3*8  + 1*8*1 = 167\\nExample 2:\\nInput: nums = [1,5]\\nOutput: 10\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == nums.length\\n1 <= n <= 300\\n0 <= nums[i] <= 100\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/super-ugly-number",
        "Title": "Super Ugly Number ",
        "Description": "b'A super ugly number is a positive integer whose prime factors are in the array primes.\\nGiven an integer n and an array of integers primes, return the nth super ugly number.\\nThe nth super ugly number is guaranteed to fit in a 32-bit signed integer.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 12, primes = [2,7,13,19]\\nOutput: 32\\nExplanation: [1,2,4,7,8,13,14,16,19,26,28,32] is the sequence of the first 12 super ugly numbers given primes = [2,7,13,19].\\n\\nExample 2:\\nInput: n = 1, primes = [2,3,5]\\nOutput: 1\\nExplanation: 1 has no prime factors, therefore all of its prime factors are in the array primes = [2,3,5].\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 105\\n1 <= primes.length <= 100\\n2 <= primes[i] <= 1000\\nprimes[i] is guaranteed to be a prime number.\\nAll the values of primes are unique and sorted in ascending order.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/binary-tree-vertical-order-traversal",
        "Title": "Binary Tree Vertical Order Traversal ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/count-of-smaller-numbers-after-self",
        "Title": "Count of Smaller Numbers After Self ",
        "Description": "b'You are given an integer array nums and you have to return a new counts array. The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i].\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [5,2,6,1]\\nOutput: [2,1,1,0]\\nExplanation:\\nTo the right of 5 there are 2 smaller elements (2 and 1).\\nTo the right of 2 there is only 1 smaller element (1).\\nTo the right of 6 there is 1 smaller element (1).\\nTo the right of 1 there is 0 smaller element.\\n\\nExample 2:\\nInput: nums = [-1]\\nOutput: [0]\\n\\nExample 3:\\nInput: nums = [-1,-1]\\nOutput: [0,0]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 105\\n-104 <= nums[i] <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/remove-duplicate-letters",
        "Title": "Remove Duplicate Letters ",
        "Description": "b'Given a string s, remove duplicate letters so that every letter appears once and only once. You must make sure your result is the smallest in lexicographical order among all possible results.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"bcabc\"\\nOutput: \"abc\"\\n\\nExample 2:\\nInput: s = \"cbacdcbc\"\\nOutput: \"acdb\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 104\\ns consists of lowercase English letters.\\n\\n\\xc2\\xa0\\nNote: This question is the same as 1081: https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/shortest-distance-from-all-buildings",
        "Title": "Shortest Distance from All Buildings ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/maximum-product-of-word-lengths",
        "Title": "Maximum Product of Word Lengths ",
        "Description": "b'Given a string array words, return the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters. If no such two words exist, return 0.\\n\\xc2\\xa0\\nExample 1:\\nInput: words = [\"abcw\",\"baz\",\"foo\",\"bar\",\"xtfn\",\"abcdef\"]\\nOutput: 16\\nExplanation: The two words can be \"abcw\", \"xtfn\".\\n\\nExample 2:\\nInput: words = [\"a\",\"ab\",\"abc\",\"d\",\"cd\",\"bcd\",\"abcd\"]\\nOutput: 4\\nExplanation: The two words can be \"ab\", \"cd\".\\n\\nExample 3:\\nInput: words = [\"a\",\"aa\",\"aaa\",\"aaaa\"]\\nOutput: 0\\nExplanation: No such pair of words.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n2 <= words.length <= 1000\\n1 <= words[i].length <= 1000\\nwords[i] consists only of lowercase English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/bulb-switcher",
        "Title": "Bulb Switcher ",
        "Description": "b\"There are n bulbs that are initially off. You first turn on all the bulbs, then\\xc2\\xa0you turn off every second bulb.\\nOn the third round, you toggle every third bulb (turning on if it's off or turning off if it's on). For the ith round, you toggle every i bulb. For the nth round, you only toggle the last bulb.\\nReturn the number of bulbs that are on after n rounds.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: n = 3\\nOutput: 1\\nExplanation: At first, the three bulbs are [off, off, off].\\nAfter the first round, the three bulbs are [on, on, on].\\nAfter the second round, the three bulbs are [on, off, on].\\nAfter the third round, the three bulbs are [on, off, off]. \\nSo you should return 1 because there is only one bulb is on.\\nExample 2:\\nInput: n = 0\\nOutput: 0\\n\\nExample 3:\\nInput: n = 1\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= n <= 109\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/generalized-abbreviation",
        "Title": "Generalized Abbreviation ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/create-maximum-number",
        "Title": "Create Maximum Number ",
        "Description": "b'You are given two integer arrays nums1 and nums2 of lengths m and n respectively. nums1 and nums2 represent the digits of two numbers. You are also given an integer k.\\nCreate the maximum number of length k <= m + n from digits of the two numbers. The relative order of the digits from the same array must be preserved.\\nReturn an array of the k digits representing the answer.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums1 = [3,4,6,5], nums2 = [9,1,2,5,8,3], k = 5\\nOutput: [9,8,6,5,3]\\n\\nExample 2:\\nInput: nums1 = [6,7], nums2 = [6,0,4], k = 5\\nOutput: [6,7,6,0,4]\\n\\nExample 3:\\nInput: nums1 = [3,9], nums2 = [8,9], k = 3\\nOutput: [9,8,9]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == nums1.length\\nn == nums2.length\\n1 <= m, n <= 500\\n0 <= nums1[i], nums2[i] <= 9\\n1 <= k <= m + n\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/coin-change",
        "Title": "Coin Change ",
        "Description": "b'You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.\\nReturn the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.\\nYou may assume that you have an infinite number of each kind of coin.\\n\\xc2\\xa0\\nExample 1:\\nInput: coins = [1,2,5], amount = 11\\nOutput: 3\\nExplanation: 11 = 5 + 5 + 1\\n\\nExample 2:\\nInput: coins = [2], amount = 3\\nOutput: -1\\n\\nExample 3:\\nInput: coins = [1], amount = 0\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= coins.length <= 12\\n1 <= coins[i] <= 231 - 1\\n0 <= amount <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/number-of-connected-components-in-an-undirected-graph",
        "Title": "Number of Connected Components in an Undirected Graph ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/wiggle-sort-ii",
        "Title": "Wiggle Sort II ",
        "Description": "b'Given an integer array nums, reorder it such that nums[0] < nums[1] > nums[2] < nums[3]....\\nYou may assume the input array always has a valid answer.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,5,1,1,6,4]\\nOutput: [1,6,1,5,1,4]\\nExplanation: [1,4,1,5,1,6] is also accepted.\\n\\nExample 2:\\nInput: nums = [1,3,2,2,3,1]\\nOutput: [2,3,1,3,1,2]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 5 * 104\\n0 <= nums[i] <= 5000\\nIt is guaranteed that there will be an answer for the given input nums.\\n\\n\\xc2\\xa0\\nFollow Up: Can you do it in O(n) time and/or in-place with O(1) extra space?'"
    },
    {
        "URL": "https://leetcode.com/problems/maximum-size-subarray-sum-equals-k",
        "Title": "Maximum Size Subarray Sum Equals k ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/power-of-three",
        "Title": "Power of Three ",
        "Description": "b'Given an integer n, return true if it is a power of three. Otherwise, return false.\\nAn integer n is a power of three, if there exists an integer x such that n == 3x.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 27\\nOutput: true\\n\\nExample 2:\\nInput: n = 0\\nOutput: false\\n\\nExample 3:\\nInput: n = 9\\nOutput: true\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n-231 <= n <= 231 - 1\\n\\n\\xc2\\xa0\\nFollow up: Could you solve it without loops/recursion?'"
    },
    {
        "URL": "https://leetcode.com/problems/count-of-range-sum",
        "Title": "Count of Range Sum ",
        "Description": "b'Given an integer array nums and two integers lower and upper, return the number of range sums that lie in [lower, upper] inclusive.\\nRange sum S(i, j) is defined as the sum of the elements in nums between indices i and j inclusive, where i <= j.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [-2,5,-1], lower = -2, upper = 2\\nOutput: 3\\nExplanation: The three ranges are: [0,0], [2,2], and [0,2] and their respective sums are: -2, -1, 2.\\n\\nExample 2:\\nInput: nums = [0], lower = 0, upper = 0\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 105\\n-231 <= nums[i] <= 231 - 1\\n-105 <= lower <= upper <= 105\\nThe answer is guaranteed to fit in a 32-bit integer.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/odd-even-linked-list",
        "Title": "Odd Even Linked List ",
        "Description": "b'Given the head of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list.\\nThe first node is considered odd, and the second node is even, and so on.\\nNote that the relative order inside both the even and odd groups should remain as it was in the input.\\nYou must solve the problem\\xc2\\xa0in O(1)\\xc2\\xa0extra space complexity and O(n) time complexity.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: head = [1,2,3,4,5]\\nOutput: [1,3,5,2,4]\\n\\nExample 2:\\n\\nInput: head = [2,1,3,5,6,4,7]\\nOutput: [2,3,6,7,1,5,4]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the linked list is in the range [0, 104].\\n-106 <= Node.val <= 106\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/longest-increasing-path-in-a-matrix",
        "Title": "Longest Increasing Path in a Matrix ",
        "Description": "b'Given an m x n integers matrix, return the length of the longest increasing path in matrix.\\nFrom each cell, you can either move in four directions: left, right, up, or down. You may not move diagonally or move outside the boundary (i.e., wrap-around is not allowed).\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: matrix = [[9,9,4],[6,6,8],[2,1,1]]\\nOutput: 4\\nExplanation: The longest increasing path is [1, 2, 6, 9].\\n\\nExample 2:\\n\\nInput: matrix = [[3,4,5],[3,2,6],[2,2,1]]\\nOutput: 4\\nExplanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.\\n\\nExample 3:\\nInput: matrix = [[1]]\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == matrix.length\\nn == matrix[i].length\\n1 <= m, n <= 200\\n0 <= matrix[i][j] <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/patching-array",
        "Title": "Patching Array ",
        "Description": "b'Given a sorted integer array nums and an integer n, add/patch elements to the array such that any number in the range [1, n] inclusive can be formed by the sum of some elements in the array.\\nReturn the minimum number of patches required.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,3], n = 6\\nOutput: 1\\nExplanation:\\nCombinations of nums are [1], [3], [1,3], which form possible sums of: 1, 3, 4.\\nNow if we add/patch 2 to nums, the combinations are: [1], [2], [3], [1,3], [2,3], [1,2,3].\\nPossible sums are 1, 2, 3, 4, 5, 6, which now covers the range [1, 6].\\nSo we only need 1 patch.\\n\\nExample 2:\\nInput: nums = [1,5,10], n = 20\\nOutput: 2\\nExplanation: The two patches can be [2, 4].\\n\\nExample 3:\\nInput: nums = [1,2,2], n = 5\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 1000\\n1 <= nums[i] <= 104\\nnums is sorted in ascending order.\\n1 <= n <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/verify-preorder-serialization-of-a-binary-tree",
        "Title": "Verify Preorder Serialization of a Binary Tree ",
        "Description": "b'One way to serialize a binary tree is to use preorder traversal. When we encounter a non-null node, we record the node\\'s value. If it is a null node, we record using a sentinel value such as \\'#\\'.\\n\\nFor example, the above binary tree can be serialized to the string \"9,3,4,#,#,1,#,#,2,#,6,#,#\", where \\'#\\' represents a null node.\\nGiven a string of comma-separated values preorder, return true if it is a correct preorder traversal serialization of a binary tree.\\nIt is guaranteed that each comma-separated value in the string must be either an integer or a character \\'#\\' representing null pointer.\\nYou may assume that the input format is always valid.\\n\\nFor example, it could never contain two consecutive commas, such as \"1,,3\".\\n\\nNote:\\xc2\\xa0You are not allowed to reconstruct the tree.\\n\\xc2\\xa0\\nExample 1:\\nInput: preorder = \"9,3,4,#,#,1,#,#,2,#,6,#,#\"\\nOutput: true\\nExample 2:\\nInput: preorder = \"1,#\"\\nOutput: false\\nExample 3:\\nInput: preorder = \"9,#,#,1\"\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= preorder.length <= 104\\npreorder consist of integers in the range [0, 100] and \\'#\\' separated by commas \\',\\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/reconstruct-itinerary",
        "Title": "Reconstruct Itinerary ",
        "Description": "b'You are given a list of airline tickets where tickets[i] = [fromi, toi] represent the departure and the arrival airports of one flight. Reconstruct the itinerary in order and return it.\\nAll of the tickets belong to a man who departs from \"JFK\", thus, the itinerary must begin with \"JFK\". If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string.\\n\\nFor example, the itinerary [\"JFK\", \"LGA\"] has a smaller lexical order than [\"JFK\", \"LGB\"].\\n\\nYou may assume all tickets form at least one valid itinerary. You must use all the tickets once and only once.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: tickets = [[\"MUC\",\"LHR\"],[\"JFK\",\"MUC\"],[\"SFO\",\"SJC\"],[\"LHR\",\"SFO\"]]\\nOutput: [\"JFK\",\"MUC\",\"LHR\",\"SFO\",\"SJC\"]\\n\\nExample 2:\\n\\nInput: tickets = [[\"JFK\",\"SFO\"],[\"JFK\",\"ATL\"],[\"SFO\",\"ATL\"],[\"ATL\",\"JFK\"],[\"ATL\",\"SFO\"]]\\nOutput: [\"JFK\",\"ATL\",\"JFK\",\"SFO\",\"ATL\",\"SFO\"]\\nExplanation: Another possible reconstruction is [\"JFK\",\"SFO\",\"ATL\",\"JFK\",\"ATL\",\"SFO\"] but it is larger in lexical order.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= tickets.length <= 300\\ntickets[i].length == 2\\nfromi.length == 3\\ntoi.length == 3\\nfromi and toi consist of uppercase English letters.\\nfromi != toi\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/largest-bst-subtree",
        "Title": "Largest BST Subtree ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/increasing-triplet-subsequence",
        "Title": "Increasing Triplet Subsequence ",
        "Description": "b'Given an integer array nums, return true if there exists a triple of indices (i, j, k) such that i < j < k and nums[i] < nums[j] < nums[k]. If no such indices exists, return false.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,2,3,4,5]\\nOutput: true\\nExplanation: Any triplet where i < j < k is valid.\\n\\nExample 2:\\nInput: nums = [5,4,3,2,1]\\nOutput: false\\nExplanation: No triplet exists.\\n\\nExample 3:\\nInput: nums = [2,1,5,0,4,6]\\nOutput: true\\nExplanation: The triplet (3, 4, 5) is valid because nums[3] == 0 < nums[4] == 4 < nums[5] == 6.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 5 * 105\\n-231 <= nums[i] <= 231 - 1\\n\\n\\xc2\\xa0\\nFollow up: Could you implement a solution that runs in O(n) time complexity and O(1) space complexity?'"
    },
    {
        "URL": "https://leetcode.com/problems/self-crossing",
        "Title": "Self Crossing ",
        "Description": "b'You are given an array of integers distance.\\nYou start at point (0,0) on an X-Y plane and you move distance[0] meters to the north, then distance[1] meters to the west, distance[2] meters to the south, distance[3] meters to the east, and so on. In other words, after each move, your direction changes counter-clockwise.\\nReturn true if your path crosses itself, and false if it does not.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: distance = [2,1,1,2]\\nOutput: true\\n\\nExample 2:\\n\\nInput: distance = [1,2,3,4]\\nOutput: false\\n\\nExample 3:\\n\\nInput: distance = [1,1,1,1]\\nOutput: true\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <=\\xc2\\xa0distance.length <= 105\\n1 <=\\xc2\\xa0distance[i] <= 105\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/palindrome-pairs",
        "Title": "Palindrome Pairs ",
        "Description": "b'Given a list of unique words, return all the pairs of the\\xc2\\xa0distinct indices (i, j) in the given list, so that the concatenation of the two words\\xc2\\xa0words[i] + words[j] is a palindrome.\\n\\xc2\\xa0\\nExample 1:\\nInput: words = [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"]\\nOutput: [[0,1],[1,0],[3,2],[2,4]]\\nExplanation: The palindromes are [\"dcbaabcd\",\"abcddcba\",\"slls\",\"llssssll\"]\\n\\nExample 2:\\nInput: words = [\"bat\",\"tab\",\"cat\"]\\nOutput: [[0,1],[1,0]]\\nExplanation: The palindromes are [\"battab\",\"tabbat\"]\\n\\nExample 3:\\nInput: words = [\"a\",\"\"]\\nOutput: [[0,1],[1,0]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= words.length <= 5000\\n0 <= words[i].length <= 300\\nwords[i] consists of lower-case English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/house-robber-iii",
        "Title": "House Robber III ",
        "Description": "b'The thief has found himself a new place for his thievery again. There is only one entrance to this area, called root.\\nBesides the root, each house has one and only one parent house. After a tour, the smart thief realized that all houses in this place form a binary tree. It will automatically contact the police if two directly-linked houses were broken into on the same night.\\nGiven the root of the binary tree, return the maximum amount of money the thief can rob without alerting the police.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [3,2,3,null,3,null,1]\\nOutput: 7\\nExplanation: Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.\\n\\nExample 2:\\n\\nInput: root = [3,4,5,1,3,null,1]\\nOutput: 9\\nExplanation: Maximum amount of money the thief can rob = 4 + 5 = 9.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [1, 104].\\n0 <= Node.val <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/counting-bits",
        "Title": "Counting Bits ",
        "Description": "b\"Given an integer n, return an array ans of length n + 1 such that for each i (0 <= i <= n), ans[i] is the number of 1's in the binary representation of i.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 2\\nOutput: [0,1,1]\\nExplanation:\\n0 --> 0\\n1 --> 1\\n2 --> 10\\n\\nExample 2:\\nInput: n = 5\\nOutput: [0,1,1,2,1,2]\\nExplanation:\\n0 --> 0\\n1 --> 1\\n2 --> 10\\n3 --> 11\\n4 --> 100\\n5 --> 101\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= n <= 105\\n\\n\\xc2\\xa0\\nFollow up:\\n\\nIt is very easy to come up with a solution with a runtime of O(n log n). Can you do it in linear time O(n) and possibly in a single pass?\\nCan you do it without using any built-in function (i.e., like __builtin_popcount in C++)?\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/nested-list-weight-sum",
        "Title": "Nested List Weight Sum ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/longest-substring-with-at-most-k-distinct-characters",
        "Title": "Longest Substring with At Most K Distinct Characters ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/flatten-nested-list-iterator",
        "Title": "Flatten Nested List Iterator ",
        "Description": "b'You are given a nested list of integers nestedList. Each element is either an integer or a list whose elements may also be integers or other lists. Implement an iterator to flatten it.\\nImplement the NestedIterator class:\\n\\nNestedIterator(List<NestedInteger> nestedList) Initializes the iterator with the nested list nestedList.\\nint next() Returns the next integer in the nested list.\\nboolean hasNext() Returns true if there are still some integers in the nested list and false otherwise.\\n\\nYour code will be tested with the following pseudocode:\\ninitialize iterator with nestedList\\nres = []\\nwhile iterator.hasNext()\\n    append iterator.next() to the end of res\\nreturn res\\n\\nIf res matches the expected flattened list, then your code will be judged as correct.\\n\\xc2\\xa0\\nExample 1:\\nInput: nestedList = [[1,1],2,[1,1]]\\nOutput: [1,1,2,1,1]\\nExplanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,1,2,1,1].\\n\\nExample 2:\\nInput: nestedList = [1,[4,[6]]]\\nOutput: [1,4,6]\\nExplanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,4,6].\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nestedList.length <= 500\\nThe values of the integers in the nested list is in the range [-106, 106].\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/power-of-four",
        "Title": "Power of Four ",
        "Description": "b'Given an integer n, return true if it is a power of four. Otherwise, return false.\\nAn integer n is a power of four, if there exists an integer x such that n == 4x.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 16\\nOutput: true\\nExample 2:\\nInput: n = 5\\nOutput: false\\nExample 3:\\nInput: n = 1\\nOutput: true\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n-231 <= n <= 231 - 1\\n\\n\\xc2\\xa0\\nFollow up: Could you solve it without loops/recursion?'"
    },
    {
        "URL": "https://leetcode.com/problems/integer-break",
        "Title": "Integer Break ",
        "Description": "b'Given an integer n, break it into the sum of k positive integers, where k >= 2, and maximize the product of those integers.\\nReturn the maximum product you can get.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 2\\nOutput: 1\\nExplanation: 2 = 1 + 1, 1 \\xc3\\x97 1 = 1.\\n\\nExample 2:\\nInput: n = 10\\nOutput: 36\\nExplanation: 10 = 3 + 3 + 4, 3 \\xc3\\x97 3 \\xc3\\x97 4 = 36.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n2 <= n <= 58\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/reverse-string",
        "Title": "Reverse String ",
        "Description": "b'Write a function that reverses a string. The input string is given as an array of characters s.\\nYou must do this by modifying the input array in-place with O(1) extra memory.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = [\"h\",\"e\",\"l\",\"l\",\"o\"]\\nOutput: [\"o\",\"l\",\"l\",\"e\",\"h\"]\\nExample 2:\\nInput: s = [\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]\\nOutput: [\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 105\\ns[i] is a printable ascii character.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/reverse-vowels-of-a-string",
        "Title": "Reverse Vowels of a String ",
        "Description": "b'Given a string s, reverse only all the vowels in the string and return it.\\nThe vowels are \\'a\\', \\'e\\', \\'i\\', \\'o\\', and \\'u\\', and they can appear in both cases.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"hello\"\\nOutput: \"holle\"\\nExample 2:\\nInput: s = \"leetcode\"\\nOutput: \"leotcede\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 3 * 105\\ns consist of printable ASCII characters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/moving-average-from-data-stream",
        "Title": "Moving Average from Data Stream ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/top-k-frequent-elements",
        "Title": "Top K Frequent Elements ",
        "Description": "b\"Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,1,1,2,2,3], k = 2\\nOutput: [1,2]\\nExample 2:\\nInput: nums = [1], k = 1\\nOutput: [1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 105\\nk is in the range [1, the number of unique elements in the array].\\nIt is guaranteed that the answer is unique.\\n\\n\\xc2\\xa0\\nFollow up: Your algorithm's time complexity must be better than O(n log n), where n is the array's size.\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/design-tic-tac-toe",
        "Title": "Design Tic-Tac-Toe ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/intersection-of-two-arrays",
        "Title": "Intersection of Two Arrays ",
        "Description": "b'Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must be unique and you may return the result in any order.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums1 = [1,2,2,1], nums2 = [2,2]\\nOutput: [2]\\n\\nExample 2:\\nInput: nums1 = [4,9,5], nums2 = [9,4,9,8,4]\\nOutput: [9,4]\\nExplanation: [4,9] is also accepted.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums1.length, nums2.length <= 1000\\n0 <= nums1[i], nums2[i] <= 1000\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/intersection-of-two-arrays-ii",
        "Title": "Intersection of Two Arrays II ",
        "Description": "b\"Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums1 = [1,2,2,1], nums2 = [2,2]\\nOutput: [2,2]\\n\\nExample 2:\\nInput: nums1 = [4,9,5], nums2 = [9,4,9,8,4]\\nOutput: [4,9]\\nExplanation: [9,4] is also accepted.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums1.length, nums2.length <= 1000\\n0 <= nums1[i], nums2[i] <= 1000\\n\\n\\xc2\\xa0\\nFollow up:\\n\\nWhat if the given array is already sorted? How would you optimize your algorithm?\\nWhat if nums1's size is small compared to nums2's size? Which algorithm is better?\\nWhat if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/two-sum",
        "Title": "Two Sum ",
        "Description": "b'Given an array of integers nums\\xc2\\xa0and an integer target, return indices of the two numbers such that they add up to target.\\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\\nYou can return the answer in any order.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [2,7,11,15], target = 9\\nOutput: [0,1]\\nExplanation: Because nums[0] + nums[1] == 9, we return [0, 1].\\n\\nExample 2:\\nInput: nums = [3,2,4], target = 6\\nOutput: [1,2]\\n\\nExample 3:\\nInput: nums = [3,3], target = 6\\nOutput: [0,1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n2 <= nums.length <= 104\\n-109 <= nums[i] <= 109\\n-109 <= target <= 109\\nOnly one valid answer exists.\\n\\n\\xc2\\xa0\\nFollow-up:\\xc2\\xa0Can you come up with an algorithm that is less than\\xc2\\xa0O(n2)\\xc2\\xa0time complexity?'"
    },
    {
        "URL": "https://leetcode.com/problems/add-two-numbers",
        "Title": "Add Two Numbers ",
        "Description": "b'You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum\\xc2\\xa0as a linked list.\\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: l1 = [2,4,3], l2 = [5,6,4]\\nOutput: [7,0,8]\\nExplanation: 342 + 465 = 807.\\n\\nExample 2:\\nInput: l1 = [0], l2 = [0]\\nOutput: [0]\\n\\nExample 3:\\nInput: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\\nOutput: [8,9,9,9,0,0,0,1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in each linked list is in the range [1, 100].\\n0 <= Node.val <= 9\\nIt is guaranteed that the list represents a number that does not have leading zeros.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/longest-substring-without-repeating-characters",
        "Title": "Longest Substring Without Repeating Characters ",
        "Description": "b'Given a string s, find the length of the longest substring without repeating characters.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"abcabcbb\"\\nOutput: 3\\nExplanation: The answer is \"abc\", with the length of 3.\\n\\nExample 2:\\nInput: s = \"bbbbb\"\\nOutput: 1\\nExplanation: The answer is \"b\", with the length of 1.\\n\\nExample 3:\\nInput: s = \"pwwkew\"\\nOutput: 3\\nExplanation: The answer is \"wke\", with the length of 3.\\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= s.length <= 5 * 104\\ns consists of English letters, digits, symbols and spaces.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/median-of-two-sorted-arrays",
        "Title": "Median of Two Sorted Arrays ",
        "Description": "b'Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\\nThe overall run time complexity should be O(log (m+n)).\\n\\xc2\\xa0\\nExample 1:\\nInput: nums1 = [1,3], nums2 = [2]\\nOutput: 2.00000\\nExplanation: merged array = [1,2,3] and median is 2.\\n\\nExample 2:\\nInput: nums1 = [1,2], nums2 = [3,4]\\nOutput: 2.50000\\nExplanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nnums1.length == m\\nnums2.length == n\\n0 <= m <= 1000\\n0 <= n <= 1000\\n1 <= m + n <= 2000\\n-106 <= nums1[i], nums2[i] <= 106\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/longest-palindromic-substring",
        "Title": "Longest Palindromic Substring ",
        "Description": "b'Given a string s, return the longest palindromic substring in s.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"babad\"\\nOutput: \"bab\"\\nExplanation: \"aba\" is also a valid answer.\\n\\nExample 2:\\nInput: s = \"cbbd\"\\nOutput: \"bb\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 1000\\ns consist of only digits and English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/zigzag-conversion",
        "Title": "Zigzag Conversion ",
        "Description": "b'The string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\\nP   A   H   N\\nA P L S I I G\\nY   I   R\\n\\nAnd then read line by line: \"PAHNAPLSIIGYIR\"\\nWrite the code that will take a string and make this conversion given a number of rows:\\nstring convert(string s, int numRows);\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"PAYPALISHIRING\", numRows = 3\\nOutput: \"PAHNAPLSIIGYIR\"\\n\\nExample 2:\\nInput: s = \"PAYPALISHIRING\", numRows = 4\\nOutput: \"PINALSIGYAHRPI\"\\nExplanation:\\nP     I    N\\nA   L S  I G\\nY A   H R\\nP     I\\n\\nExample 3:\\nInput: s = \"A\", numRows = 1\\nOutput: \"A\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 1000\\ns consists of English letters (lower-case and upper-case), \\',\\' and \\'.\\'.\\n1 <= numRows <= 1000\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/reverse-integer",
        "Title": "Reverse Integer ",
        "Description": "b'Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned).\\n\\xc2\\xa0\\nExample 1:\\nInput: x = 123\\nOutput: 321\\n\\nExample 2:\\nInput: x = -123\\nOutput: -321\\n\\nExample 3:\\nInput: x = 120\\nOutput: 21\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n-231 <= x <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/string-to-integer-atoi",
        "Title": "String to Integer (atoi) ",
        "Description": "b'Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++\\'s atoi function).\\nThe algorithm for myAtoi(string s) is as follows:\\n\\nRead in and ignore any leading whitespace.\\nCheck if the next character (if not already at the end of the string) is \\'-\\' or \\'+\\'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\\nRead in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\\nConvert these digits into an integer (i.e. \"123\" -> 123, \"0032\" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).\\nIf the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1.\\nReturn the integer as the final result.\\n\\nNote:\\n\\nOnly the space character \\' \\' is considered a whitespace character.\\nDo not ignore any characters other than the leading whitespace or the rest of the string after the digits.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"42\"\\nOutput: 42\\nExplanation: The underlined characters are what is read in, the caret is the current reader position.\\nStep 1: \"42\" (no characters read because there is no leading whitespace)\\n         ^\\nStep 2: \"42\" (no characters read because there is neither a \\'-\\' nor \\'+\\')\\n         ^\\nStep 3: \"42\" (\"42\" is read in)\\n           ^\\nThe parsed integer is 42.\\nSince 42 is in the range [-231, 231 - 1], the final result is 42.\\n\\nExample 2:\\nInput: s = \"   -42\"\\nOutput: -42\\nExplanation:\\nStep 1: \"   -42\" (leading whitespace is read and ignored)\\n            ^\\nStep 2: \"   -42\" (\\'-\\' is read, so the result should be negative)\\n             ^\\nStep 3: \"   -42\" (\"42\" is read in)\\n               ^\\nThe parsed integer is -42.\\nSince -42 is in the range [-231, 231 - 1], the final result is -42.\\n\\nExample 3:\\nInput: s = \"4193 with words\"\\nOutput: 4193\\nExplanation:\\nStep 1: \"4193 with words\" (no characters read because there is no leading whitespace)\\n         ^\\nStep 2: \"4193 with words\" (no characters read because there is neither a \\'-\\' nor \\'+\\')\\n         ^\\nStep 3: \"4193 with words\" (\"4193\" is read in; reading stops because the next character is a non-digit)\\n             ^\\nThe parsed integer is 4193.\\nSince 4193 is in the range [-231, 231 - 1], the final result is 4193.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= s.length <= 200\\ns consists of English letters (lower-case and upper-case), digits (0-9), \\' \\', \\'+\\', \\'-\\', and \\'.\\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/palindrome-number",
        "Title": "Palindrome Number ",
        "Description": "b'Given an integer x, return true if x is palindrome integer.\\nAn integer is a palindrome when it reads the same backward as forward.\\n\\nFor example, 121 is a palindrome while 123 is not.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: x = 121\\nOutput: true\\nExplanation: 121 reads as 121 from left to right and from right to left.\\n\\nExample 2:\\nInput: x = -121\\nOutput: false\\nExplanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\\n\\nExample 3:\\nInput: x = 10\\nOutput: false\\nExplanation: Reads 01 from right to left. Therefore it is not a palindrome.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n-231\\xc2\\xa0<= x <= 231\\xc2\\xa0- 1\\n\\n\\xc2\\xa0\\nFollow up: Could you solve it without converting the integer to a string?'"
    },
    {
        "URL": "https://leetcode.com/problems/regular-expression-matching",
        "Title": "Regular Expression Matching ",
        "Description": "b'Given an input string s\\xc2\\xa0and a pattern p, implement regular expression matching with support for \\'.\\' and \\'*\\' where:\\n\\n\\'.\\' Matches any single character.\\xe2\\x80\\x8b\\xe2\\x80\\x8b\\xe2\\x80\\x8b\\xe2\\x80\\x8b\\n\\'*\\' Matches zero or more of the preceding element.\\n\\nThe matching should cover the entire input string (not partial).\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"aa\", p = \"a\"\\nOutput: false\\nExplanation: \"a\" does not match the entire string \"aa\".\\n\\nExample 2:\\nInput: s = \"aa\", p = \"a*\"\\nOutput: true\\nExplanation: \\'*\\' means zero or more of the preceding element, \\'a\\'. Therefore, by repeating \\'a\\' once, it becomes \"aa\".\\n\\nExample 3:\\nInput: s = \"ab\", p = \".*\"\\nOutput: true\\nExplanation: \".*\" means \"zero or more (*) of any character (.)\".\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length\\xc2\\xa0<= 20\\n1 <= p.length\\xc2\\xa0<= 30\\ns contains only lowercase English letters.\\np contains only lowercase English letters, \\'.\\', and\\xc2\\xa0\\'*\\'.\\nIt is guaranteed for each appearance of the character \\'*\\', there will be a previous valid character to match.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/container-with-most-water",
        "Title": "Container With Most Water ",
        "Description": "b'You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).\\nFind two lines that together with the x-axis form a container, such that the container contains the most water.\\nReturn the maximum amount of water a container can store.\\nNotice that you may not slant the container.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: height = [1,8,6,2,5,4,8,3,7]\\nOutput: 49\\nExplanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.\\n\\nExample 2:\\nInput: height = [1,1]\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == height.length\\n2 <= n <= 105\\n0 <= height[i] <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/integer-to-roman",
        "Title": "Integer to Roman ",
        "Description": "b'Roman numerals are represented by seven different symbols:\\xc2\\xa0I, V, X, L, C, D and M.\\nSymbol       Value\\nI             1\\nV             5\\nX             10\\nL             50\\nC             100\\nD             500\\nM             1000\\nFor example,\\xc2\\xa02 is written as II\\xc2\\xa0in Roman numeral, just two one\\'s added together. 12 is written as\\xc2\\xa0XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\\n\\nI can be placed before V (5) and X (10) to make 4 and 9.\\xc2\\xa0\\nX can be placed before L (50) and C (100) to make 40 and 90.\\xc2\\xa0\\nC can be placed before D (500) and M (1000) to make 400 and 900.\\n\\nGiven an integer, convert it to a roman numeral.\\n\\xc2\\xa0\\nExample 1:\\nInput: num = 3\\nOutput: \"III\"\\nExplanation: 3 is represented as 3 ones.\\n\\nExample 2:\\nInput: num = 58\\nOutput: \"LVIII\"\\nExplanation: L = 50, V = 5, III = 3.\\n\\nExample 3:\\nInput: num = 1994\\nOutput: \"MCMXCIV\"\\nExplanation: M = 1000, CM = 900, XC = 90 and IV = 4.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= num <= 3999\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/roman-to-integer",
        "Title": "Roman to Integer ",
        "Description": "b'Roman numerals are represented by seven different symbols:\\xc2\\xa0I, V, X, L, C, D and M.\\nSymbol       Value\\nI             1\\nV             5\\nX             10\\nL             50\\nC             100\\nD             500\\nM             1000\\nFor example,\\xc2\\xa02 is written as II\\xc2\\xa0in Roman numeral, just two ones added together. 12 is written as\\xc2\\xa0XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\\n\\nI can be placed before V (5) and X (10) to make 4 and 9.\\xc2\\xa0\\nX can be placed before L (50) and C (100) to make 40 and 90.\\xc2\\xa0\\nC can be placed before D (500) and M (1000) to make 400 and 900.\\n\\nGiven a roman numeral, convert it to an integer.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"III\"\\nOutput: 3\\nExplanation: III = 3.\\n\\nExample 2:\\nInput: s = \"LVIII\"\\nOutput: 58\\nExplanation: L = 50, V= 5, III = 3.\\n\\nExample 3:\\nInput: s = \"MCMXCIV\"\\nOutput: 1994\\nExplanation: M = 1000, CM = 900, XC = 90 and IV = 4.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 15\\ns contains only\\xc2\\xa0the characters (\\'I\\', \\'V\\', \\'X\\', \\'L\\', \\'C\\', \\'D\\', \\'M\\').\\nIt is guaranteed\\xc2\\xa0that s is a valid roman numeral in the range [1, 3999].\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/longest-common-prefix",
        "Title": "Longest Common Prefix ",
        "Description": "b'Write a function to find the longest common prefix string amongst an array of strings.\\nIf there is no common prefix, return an empty string \"\".\\n\\xc2\\xa0\\nExample 1:\\nInput: strs = [\"flower\",\"flow\",\"flight\"]\\nOutput: \"fl\"\\n\\nExample 2:\\nInput: strs = [\"dog\",\"racecar\",\"car\"]\\nOutput: \"\"\\nExplanation: There is no common prefix among the input strings.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= strs.length <= 200\\n0 <= strs[i].length <= 200\\nstrs[i] consists of only lowercase English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/3sum",
        "Title": "3Sum ",
        "Description": "b'Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.\\nNotice that the solution set must not contain duplicate triplets.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [-1,0,1,2,-1,-4]\\nOutput: [[-1,-1,2],[-1,0,1]]\\nExample 2:\\nInput: nums = []\\nOutput: []\\nExample 3:\\nInput: nums = [0]\\nOutput: []\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= nums.length <= 3000\\n-105 <= nums[i] <= 105\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/3sum-closest",
        "Title": "3Sum Closest ",
        "Description": "b'Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.\\nReturn the sum of the three integers.\\nYou may assume that each input would have exactly one solution.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [-1,2,1,-4], target = 1\\nOutput: 2\\nExplanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\\n\\nExample 2:\\nInput: nums = [0,0,0], target = 1\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n3 <= nums.length <= 1000\\n-1000 <= nums[i] <= 1000\\n-104 <= target <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/letter-combinations-of-a-phone-number",
        "Title": "Letter Combinations of a Phone Number ",
        "Description": "b'Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.\\nA mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: digits = \"23\"\\nOutput: [\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]\\n\\nExample 2:\\nInput: digits = \"\"\\nOutput: []\\n\\nExample 3:\\nInput: digits = \"2\"\\nOutput: [\"a\",\"b\",\"c\"]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= digits.length <= 4\\ndigits[i] is a digit in the range [\\'2\\', \\'9\\'].\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/4sum",
        "Title": "4Sum ",
        "Description": "b'Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:\\n\\n0 <= a, b, c, d\\xc2\\xa0< n\\na, b, c, and d are distinct.\\nnums[a] + nums[b] + nums[c] + nums[d] == target\\n\\nYou may return the answer in any order.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,0,-1,0,-2,2], target = 0\\nOutput: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]\\n\\nExample 2:\\nInput: nums = [2,2,2,2,2], target = 8\\nOutput: [[2,2,2,2]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 200\\n-109 <= nums[i] <= 109\\n-109 <= target <= 109\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/remove-nth-node-from-end-of-list",
        "Title": "Remove Nth Node From End of List ",
        "Description": "b'Given the head of a linked list, remove the nth node from the end of the list and return its head.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: head = [1,2,3,4,5], n = 2\\nOutput: [1,2,3,5]\\n\\nExample 2:\\nInput: head = [1], n = 1\\nOutput: []\\n\\nExample 3:\\nInput: head = [1,2], n = 1\\nOutput: [1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the list is sz.\\n1 <= sz <= 30\\n0 <= Node.val <= 100\\n1 <= n <= sz\\n\\n\\xc2\\xa0\\nFollow up: Could you do this in one pass?\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/valid-parentheses",
        "Title": "Valid Parentheses ",
        "Description": "b'Given a string s containing just the characters \\'(\\', \\')\\', \\'{\\', \\'}\\', \\'[\\' and \\']\\', determine if the input string is valid.\\nAn input string is valid if:\\n\\nOpen brackets must be closed by the same type of brackets.\\nOpen brackets must be closed in the correct order.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"()\"\\nOutput: true\\n\\nExample 2:\\nInput: s = \"()[]{}\"\\nOutput: true\\n\\nExample 3:\\nInput: s = \"(]\"\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 104\\ns consists of parentheses only \\'()[]{}\\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/merge-two-sorted-lists",
        "Title": "Merge Two Sorted Lists ",
        "Description": "b'You are given the heads of two sorted linked lists list1 and list2.\\nMerge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.\\nReturn the head of the merged linked list.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: list1 = [1,2,4], list2 = [1,3,4]\\nOutput: [1,1,2,3,4,4]\\n\\nExample 2:\\nInput: list1 = [], list2 = []\\nOutput: []\\n\\nExample 3:\\nInput: list1 = [], list2 = [0]\\nOutput: [0]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in both lists is in the range [0, 50].\\n-100 <= Node.val <= 100\\nBoth list1 and list2 are sorted in non-decreasing order.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/generate-parentheses",
        "Title": "Generate Parentheses ",
        "Description": "b'Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 3\\nOutput: [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\\nExample 2:\\nInput: n = 1\\nOutput: [\"()\"]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 8\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/merge-k-sorted-lists",
        "Title": "Merge k Sorted Lists ",
        "Description": "b'You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.\\nMerge all the linked-lists into one sorted linked-list and return it.\\n\\xc2\\xa0\\nExample 1:\\nInput: lists = [[1,4,5],[1,3,4],[2,6]]\\nOutput: [1,1,2,3,4,4,5,6]\\nExplanation: The linked-lists are:\\n[\\n  1->4->5,\\n  1->3->4,\\n  2->6\\n]\\nmerging them into one sorted list:\\n1->1->2->3->4->4->5->6\\n\\nExample 2:\\nInput: lists = []\\nOutput: []\\n\\nExample 3:\\nInput: lists = [[]]\\nOutput: []\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nk == lists.length\\n0 <= k <= 104\\n0 <= lists[i].length <= 500\\n-104 <= lists[i][j] <= 104\\nlists[i] is sorted in ascending order.\\nThe sum of lists[i].length will not exceed 104.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/swap-nodes-in-pairs",
        "Title": "Swap Nodes in Pairs ",
        "Description": "b\"Given a\\xc2\\xa0linked list, swap every two adjacent nodes and return its head. You must solve the problem without\\xc2\\xa0modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: head = [1,2,3,4]\\nOutput: [2,1,4,3]\\n\\nExample 2:\\nInput: head = []\\nOutput: []\\n\\nExample 3:\\nInput: head = [1]\\nOutput: [1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the\\xc2\\xa0list\\xc2\\xa0is in the range [0, 100].\\n0 <= Node.val <= 100\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/reverse-nodes-in-k-group",
        "Title": "Reverse Nodes in k-Group ",
        "Description": "b\"Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.\\nk is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.\\nYou may not alter the values in the list's nodes, only nodes themselves may be changed.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: head = [1,2,3,4,5], k = 2\\nOutput: [2,1,4,3,5]\\n\\nExample 2:\\n\\nInput: head = [1,2,3,4,5], k = 3\\nOutput: [3,2,1,4,5]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the list is n.\\n1 <= k <= n <= 5000\\n0 <= Node.val <= 1000\\n\\n\\xc2\\xa0\\nFollow-up: Can you solve the problem in O(1) extra memory space?\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/remove-duplicates-from-sorted-array",
        "Title": "Remove Duplicates from Sorted Array ",
        "Description": "b'Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same.\\nSince it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums\\xc2\\xa0should hold the final result. It does not matter what you leave beyond the first\\xc2\\xa0k\\xc2\\xa0elements.\\nReturn k after placing the final result in the first k slots of nums.\\nDo not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.\\nCustom Judge:\\nThe judge will test your solution with the following code:\\nint[] nums = [...]; // Input array\\nint[] expectedNums = [...]; // The expected answer with correct length\\n\\nint k = removeDuplicates(nums); // Calls your implementation\\n\\nassert k == expectedNums.length;\\nfor (int i = 0; i < k; i++) {\\n    assert nums[i] == expectedNums[i];\\n}\\n\\nIf all assertions pass, then your solution will be accepted.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,1,2]\\nOutput: 2, nums = [1,2,_]\\nExplanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.\\nIt does not matter what you leave beyond the returned k (hence they are underscores).\\n\\nExample 2:\\nInput: nums = [0,0,1,1,1,2,2,3,3,4]\\nOutput: 5, nums = [0,1,2,3,4,_,_,_,_,_]\\nExplanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.\\nIt does not matter what you leave beyond the returned k (hence they are underscores).\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 3 * 104\\n-100 <= nums[i] <= 100\\nnums is sorted in non-decreasing order.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/remove-element",
        "Title": "Remove Element ",
        "Description": "b'Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The relative order of the elements may be changed.\\nSince it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.\\nReturn k after placing the final result in the first k slots of nums.\\nDo not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.\\nCustom Judge:\\nThe judge will test your solution with the following code:\\nint[] nums = [...]; // Input array\\nint val = ...; // Value to remove\\nint[] expectedNums = [...]; // The expected answer with correct length.\\n                            // It is sorted with no values equaling val.\\n\\nint k = removeElement(nums, val); // Calls your implementation\\n\\nassert k == expectedNums.length;\\nsort(nums, 0, k); // Sort the first k elements of nums\\nfor (int i = 0; i < actualLength; i++) {\\n    assert nums[i] == expectedNums[i];\\n}\\n\\nIf all assertions pass, then your solution will be accepted.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [3,2,2,3], val = 3\\nOutput: 2, nums = [2,2,_,_]\\nExplanation: Your function should return k = 2, with the first two elements of nums being 2.\\nIt does not matter what you leave beyond the returned k (hence they are underscores).\\n\\nExample 2:\\nInput: nums = [0,1,2,2,3,0,4,2], val = 2\\nOutput: 5, nums = [0,1,4,0,3,_,_,_]\\nExplanation: Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.\\nNote that the five elements can be returned in any order.\\nIt does not matter what you leave beyond the returned k (hence they are underscores).\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= nums.length <= 100\\n0 <= nums[i] <= 50\\n0 <= val <= 100\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/implement-strstr",
        "Title": "Implement strStr() ",
        "Description": "b'Implement strStr().\\nGiven two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.\\nClarification:\\nWhat should we return when needle is an empty string? This is a great question to ask during an interview.\\nFor the purpose of this problem, we will return 0 when needle is an empty string. This is consistent to C\\'s strstr() and Java\\'s indexOf().\\n\\xc2\\xa0\\nExample 1:\\nInput: haystack = \"hello\", needle = \"ll\"\\nOutput: 2\\n\\nExample 2:\\nInput: haystack = \"aaaaa\", needle = \"bba\"\\nOutput: -1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= haystack.length, needle.length <= 104\\nhaystack and needle consist of only lowercase English characters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/divide-two-integers",
        "Title": "Divide Two Integers ",
        "Description": "b'Given two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator.\\nThe integer division should truncate toward zero, which means losing its fractional part. For example, 8.345 would be truncated to 8, and -2.7335 would be truncated to -2.\\nReturn the quotient after dividing dividend by divisor.\\nNote: Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [\\xe2\\x88\\x92231, 231 \\xe2\\x88\\x92 1]. For this problem, if the quotient is strictly greater than 231 - 1, then return 231 - 1, and if the quotient is strictly less than -231, then return -231.\\n\\xc2\\xa0\\nExample 1:\\nInput: dividend = 10, divisor = 3\\nOutput: 3\\nExplanation: 10/3 = 3.33333.. which is truncated to 3.\\n\\nExample 2:\\nInput: dividend = 7, divisor = -3\\nOutput: -2\\nExplanation: 7/-3 = -2.33333.. which is truncated to -2.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n-231 <= dividend, divisor <= 231 - 1\\ndivisor != 0\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/substring-with-concatenation-of-all-words",
        "Title": "Substring with Concatenation of All Words ",
        "Description": "b'You are given a string s and an array of strings words of the same length. Return\\xc2\\xa0all starting indices of substring(s) in s\\xc2\\xa0that is a concatenation of each word in words exactly once, in any order,\\xc2\\xa0and without any intervening characters.\\nYou can return the answer in any order.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"barfoothefoobarman\", words = [\"foo\",\"bar\"]\\nOutput: [0,9]\\nExplanation: Substrings starting at index 0 and 9 are \"barfoo\" and \"foobar\" respectively.\\nThe output order does not matter, returning [9,0] is fine too.\\n\\nExample 2:\\nInput: s = \"wordgoodgoodgoodbestword\", words = [\"word\",\"good\",\"best\",\"word\"]\\nOutput: []\\n\\nExample 3:\\nInput: s = \"barfoofoobarthefoobarman\", words = [\"bar\",\"foo\",\"the\"]\\nOutput: [6,9,12]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 104\\ns consists of lower-case English letters.\\n1 <= words.length <= 5000\\n1 <= words[i].length <= 30\\nwords[i]\\xc2\\xa0consists of lower-case English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/next-permutation",
        "Title": "Next Permutation ",
        "Description": "b'A permutation of an array of integers is an arrangement of its members into a sequence or linear order.\\n\\nFor example, for arr = [1,2,3], the following are considered permutations of arr: [1,2,3], [1,3,2], [3,1,2], [2,3,1].\\n\\nThe next permutation of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the next permutation of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).\\n\\nFor example, the next permutation of arr = [1,2,3] is [1,3,2].\\nSimilarly, the next permutation of arr = [2,3,1] is [3,1,2].\\nWhile the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not have a lexicographical larger rearrangement.\\n\\nGiven an array of integers nums, find the next permutation of nums.\\nThe replacement must be in place and use only constant extra memory.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,2,3]\\nOutput: [1,3,2]\\n\\nExample 2:\\nInput: nums = [3,2,1]\\nOutput: [1,2,3]\\n\\nExample 3:\\nInput: nums = [1,1,5]\\nOutput: [1,5,1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 100\\n0 <= nums[i] <= 100\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/longest-valid-parentheses",
        "Title": "Longest Valid Parentheses ",
        "Description": "b'Given a string containing just the characters \\'(\\' and \\')\\', find the length of the longest valid (well-formed) parentheses substring.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"(()\"\\nOutput: 2\\nExplanation: The longest valid parentheses substring is \"()\".\\n\\nExample 2:\\nInput: s = \")()())\"\\nOutput: 4\\nExplanation: The longest valid parentheses substring is \"()()\".\\n\\nExample 3:\\nInput: s = \"\"\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= s.length <= 3 * 104\\ns[i] is \\'(\\', or \\')\\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/search-in-rotated-sorted-array",
        "Title": "Search in Rotated Sorted Array ",
        "Description": "b'There is an integer array nums sorted in ascending order (with distinct values).\\nPrior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].\\nGiven the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.\\nYou must write an algorithm with O(log n) runtime complexity.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [4,5,6,7,0,1,2], target = 0\\nOutput: 4\\nExample 2:\\nInput: nums = [4,5,6,7,0,1,2], target = 3\\nOutput: -1\\nExample 3:\\nInput: nums = [1], target = 0\\nOutput: -1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 5000\\n-104 <= nums[i] <= 104\\nAll values of nums are unique.\\nnums is an ascending array that is possibly rotated.\\n-104 <= target <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array",
        "Title": "Find First and Last Position of Element in Sorted Array ",
        "Description": "b'Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.\\nIf target is not found in the array, return [-1, -1].\\nYou must\\xc2\\xa0write an algorithm with\\xc2\\xa0O(log n) runtime complexity.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [5,7,7,8,8,10], target = 8\\nOutput: [3,4]\\nExample 2:\\nInput: nums = [5,7,7,8,8,10], target = 6\\nOutput: [-1,-1]\\nExample 3:\\nInput: nums = [], target = 0\\nOutput: [-1,-1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= nums.length <= 105\\n-109\\xc2\\xa0<= nums[i]\\xc2\\xa0<= 109\\nnums is a non-decreasing array.\\n-109\\xc2\\xa0<= target\\xc2\\xa0<= 109\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/search-insert-position",
        "Title": "Search Insert Position ",
        "Description": "b'Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\\nYou must\\xc2\\xa0write an algorithm with\\xc2\\xa0O(log n) runtime complexity.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,3,5,6], target = 5\\nOutput: 2\\n\\nExample 2:\\nInput: nums = [1,3,5,6], target = 2\\nOutput: 1\\n\\nExample 3:\\nInput: nums = [1,3,5,6], target = 7\\nOutput: 4\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 104\\n-104 <= nums[i] <= 104\\nnums contains distinct values sorted in ascending order.\\n-104 <= target <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/valid-sudoku",
        "Title": "Valid Sudoku ",
        "Description": "b'Determine if a\\xc2\\xa09 x 9 Sudoku board\\xc2\\xa0is valid.\\xc2\\xa0Only the filled cells need to be validated\\xc2\\xa0according to the following rules:\\n\\nEach row\\xc2\\xa0must contain the\\xc2\\xa0digits\\xc2\\xa01-9 without repetition.\\nEach column must contain the digits\\xc2\\xa01-9\\xc2\\xa0without repetition.\\nEach of the nine\\xc2\\xa03 x 3 sub-boxes of the grid must contain the digits\\xc2\\xa01-9\\xc2\\xa0without repetition.\\n\\nNote:\\n\\nA Sudoku board (partially filled) could be valid but is not necessarily solvable.\\nOnly the filled cells need to be validated according to the mentioned\\xc2\\xa0rules.\\n\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: board = \\n[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\\n,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\\n,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\\n,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\\n,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\\n,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\\n,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\\n,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\\n,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\\nOutput: true\\n\\nExample 2:\\nInput: board = \\n[[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\\n,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\\n,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\\n,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\\n,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\\n,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\\n,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\\n,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\\n,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\\nOutput: false\\nExplanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8\\'s in the top left 3x3 sub-box, it is invalid.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nboard.length == 9\\nboard[i].length == 9\\nboard[i][j] is a digit 1-9 or \\'.\\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/sudoku-solver",
        "Title": "Sudoku Solver ",
        "Description": "b'Write a program to solve a Sudoku puzzle by filling the empty cells.\\nA sudoku solution must satisfy all of the following rules:\\n\\nEach of the digits 1-9 must occur exactly once in each row.\\nEach of the digits 1-9 must occur exactly once in each column.\\nEach of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\\n\\nThe \\'.\\' character indicates empty cells.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: board = [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\\nOutput: [[\"5\",\"3\",\"4\",\"6\",\"7\",\"8\",\"9\",\"1\",\"2\"],[\"6\",\"7\",\"2\",\"1\",\"9\",\"5\",\"3\",\"4\",\"8\"],[\"1\",\"9\",\"8\",\"3\",\"4\",\"2\",\"5\",\"6\",\"7\"],[\"8\",\"5\",\"9\",\"7\",\"6\",\"1\",\"4\",\"2\",\"3\"],[\"4\",\"2\",\"6\",\"8\",\"5\",\"3\",\"7\",\"9\",\"1\"],[\"7\",\"1\",\"3\",\"9\",\"2\",\"4\",\"8\",\"5\",\"6\"],[\"9\",\"6\",\"1\",\"5\",\"3\",\"7\",\"2\",\"8\",\"4\"],[\"2\",\"8\",\"7\",\"4\",\"1\",\"9\",\"6\",\"3\",\"5\"],[\"3\",\"4\",\"5\",\"2\",\"8\",\"6\",\"1\",\"7\",\"9\"]]\\nExplanation:\\xc2\\xa0The input board is shown above and the only valid solution is shown below:\\n\\n\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nboard.length == 9\\nboard[i].length == 9\\nboard[i][j] is a digit or \\'.\\'.\\nIt is guaranteed that the input board has only one solution.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/count-and-say",
        "Title": "Count and Say ",
        "Description": "b'The count-and-say sequence is a sequence of digit strings defined by the recursive formula:\\n\\ncountAndSay(1) = \"1\"\\ncountAndSay(n) is the way you would \"say\" the digit string from countAndSay(n-1), which is then converted into a different digit string.\\n\\nTo determine how you \"say\" a digit string, split it into the minimal number of substrings such that each substring contains exactly one unique digit. Then for each substring, say the number of digits, then say the digit. Finally, concatenate every said digit.\\nFor example, the saying and conversion for digit string \"3322251\":\\n\\nGiven a positive integer n, return the nth term of the count-and-say sequence.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 1\\nOutput: \"1\"\\nExplanation: This is the base case.\\n\\nExample 2:\\nInput: n = 4\\nOutput: \"1211\"\\nExplanation:\\ncountAndSay(1) = \"1\"\\ncountAndSay(2) = say \"1\" = one 1 = \"11\"\\ncountAndSay(3) = say \"11\" = two 1\\'s = \"21\"\\ncountAndSay(4) = say \"21\" = one 2 + one 1 = \"12\" + \"11\" = \"1211\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 30\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/combination-sum",
        "Title": "Combination Sum ",
        "Description": "b'Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.\\nThe same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.\\nIt is guaranteed that the number of unique combinations that sum up to target is less than 150 combinations for the given input.\\n\\xc2\\xa0\\nExample 1:\\nInput: candidates = [2,3,6,7], target = 7\\nOutput: [[2,2,3],[7]]\\nExplanation:\\n2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.\\n7 is a candidate, and 7 = 7.\\nThese are the only two combinations.\\n\\nExample 2:\\nInput: candidates = [2,3,5], target = 8\\nOutput: [[2,2,2,2],[2,3,3],[3,5]]\\n\\nExample 3:\\nInput: candidates = [2], target = 1\\nOutput: []\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= candidates.length <= 30\\n1 <= candidates[i] <= 200\\nAll elements of candidates are distinct.\\n1 <= target <= 500\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/combination-sum-ii",
        "Title": "Combination Sum II ",
        "Description": "b'Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates\\xc2\\xa0where the candidate numbers sum to target.\\nEach number in candidates\\xc2\\xa0may only be used once in the combination.\\nNote:\\xc2\\xa0The solution set must not contain duplicate combinations.\\n\\xc2\\xa0\\nExample 1:\\nInput: candidates = [10,1,2,7,6,1,5], target = 8\\nOutput: \\n[\\n[1,1,6],\\n[1,2,5],\\n[1,7],\\n[2,6]\\n]\\n\\nExample 2:\\nInput: candidates = [2,5,2,1,2], target = 5\\nOutput: \\n[\\n[1,2,2],\\n[5]\\n]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <=\\xc2\\xa0candidates.length <= 100\\n1 <=\\xc2\\xa0candidates[i] <= 50\\n1 <= target <= 30\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/first-missing-positive",
        "Title": "First Missing Positive ",
        "Description": "b'Given an unsorted integer array nums, return the smallest missing positive integer.\\nYou must implement an algorithm that runs in O(n) time and uses constant extra space.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,2,0]\\nOutput: 3\\nExample 2:\\nInput: nums = [3,4,-1,1]\\nOutput: 2\\nExample 3:\\nInput: nums = [7,8,9,11,12]\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 5 * 105\\n-231 <= nums[i] <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/trapping-rain-water",
        "Title": "Trapping Rain Water ",
        "Description": "b'Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: height = [0,1,0,2,1,0,1,3,2,1,2,1]\\nOutput: 6\\nExplanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.\\n\\nExample 2:\\nInput: height = [4,2,0,3,2,5]\\nOutput: 9\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == height.length\\n1 <= n <= 2 * 104\\n0 <= height[i] <= 105\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/multiply-strings",
        "Title": "Multiply Strings ",
        "Description": "b'Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.\\nNote:\\xc2\\xa0You must not use any built-in BigInteger library or convert the inputs to integer directly.\\n\\xc2\\xa0\\nExample 1:\\nInput: num1 = \"2\", num2 = \"3\"\\nOutput: \"6\"\\nExample 2:\\nInput: num1 = \"123\", num2 = \"456\"\\nOutput: \"56088\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= num1.length, num2.length <= 200\\nnum1 and num2 consist of digits only.\\nBoth num1 and num2\\xc2\\xa0do not contain any leading zero, except the number 0 itself.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/wildcard-matching",
        "Title": "Wildcard Matching ",
        "Description": "b'Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for \\'?\\' and \\'*\\' where:\\n\\n\\'?\\' Matches any single character.\\n\\'*\\' Matches any sequence of characters (including the empty sequence).\\n\\nThe matching should cover the entire input string (not partial).\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"aa\", p = \"a\"\\nOutput: false\\nExplanation: \"a\" does not match the entire string \"aa\".\\n\\nExample 2:\\nInput: s = \"aa\", p = \"*\"\\nOutput: true\\nExplanation:\\xc2\\xa0\\'*\\' matches any sequence.\\n\\nExample 3:\\nInput: s = \"cb\", p = \"?a\"\\nOutput: false\\nExplanation:\\xc2\\xa0\\'?\\' matches \\'c\\', but the second letter is \\'a\\', which does not match \\'b\\'.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= s.length, p.length <= 2000\\ns contains only lowercase English letters.\\np contains only lowercase English letters, \\'?\\' or \\'*\\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/jump-game-ii",
        "Title": "Jump Game II ",
        "Description": "b'Given an array of non-negative integers nums, you are initially positioned at the first index of the array.\\nEach element in the array represents your maximum jump length at that position.\\nYour goal is to reach the last index in the minimum number of jumps.\\nYou can assume that you can always reach the last index.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [2,3,1,1,4]\\nOutput: 2\\nExplanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.\\n\\nExample 2:\\nInput: nums = [2,3,0,1,4]\\nOutput: 2\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 104\\n0 <= nums[i] <= 1000\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/permutations",
        "Title": "Permutations ",
        "Description": "b'Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,2,3]\\nOutput: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\\nExample 2:\\nInput: nums = [0,1]\\nOutput: [[0,1],[1,0]]\\nExample 3:\\nInput: nums = [1]\\nOutput: [[1]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 6\\n-10 <= nums[i] <= 10\\nAll the integers of nums are unique.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/permutations-ii",
        "Title": "Permutations II ",
        "Description": "b'Given a collection of numbers, nums,\\xc2\\xa0that might contain duplicates, return all possible unique permutations in any order.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,1,2]\\nOutput:\\n[[1,1,2],\\n [1,2,1],\\n [2,1,1]]\\n\\nExample 2:\\nInput: nums = [1,2,3]\\nOutput: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 8\\n-10 <= nums[i] <= 10\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/rotate-image",
        "Title": "Rotate Image ",
        "Description": "b'You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).\\nYou have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: matrix = [[1,2,3],[4,5,6],[7,8,9]]\\nOutput: [[7,4,1],[8,5,2],[9,6,3]]\\n\\nExample 2:\\n\\nInput: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]\\nOutput: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == matrix.length == matrix[i].length\\n1 <= n <= 20\\n-1000 <= matrix[i][j] <= 1000\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/group-anagrams",
        "Title": "Group Anagrams ",
        "Description": "b'Given an array of strings strs, group the anagrams together. You can return the answer in any order.\\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\\n\\xc2\\xa0\\nExample 1:\\nInput: strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]\\nOutput: [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]\\nExample 2:\\nInput: strs = [\"\"]\\nOutput: [[\"\"]]\\nExample 3:\\nInput: strs = [\"a\"]\\nOutput: [[\"a\"]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= strs.length <= 104\\n0 <= strs[i].length <= 100\\nstrs[i] consists of lowercase English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/powx-n",
        "Title": "Pow(x, n) ",
        "Description": "b'Implement pow(x, n), which calculates x raised to the power n (i.e., xn).\\n\\xc2\\xa0\\nExample 1:\\nInput: x = 2.00000, n = 10\\nOutput: 1024.00000\\n\\nExample 2:\\nInput: x = 2.10000, n = 3\\nOutput: 9.26100\\n\\nExample 3:\\nInput: x = 2.00000, n = -2\\nOutput: 0.25000\\nExplanation: 2-2 = 1/22 = 1/4 = 0.25\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n-100.0 < x < 100.0\\n-231 <= n <= 231-1\\n-104 <= xn <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/binary-watch",
        "Title": "Binary Watch ",
        "Description": "b'A binary watch has 4 LEDs on the top to represent the hours (0-11), and 6 LEDs on the bottom to represent\\xc2\\xa0the minutes (0-59). Each LED represents a zero or one, with the least significant bit on the right.\\n\\nFor example, the below binary watch reads \"4:51\".\\n\\n\\nGiven an integer turnedOn which represents the number of LEDs that are currently on (ignoring the PM), return all possible times the watch could represent. You may return the answer in any order.\\nThe hour must not contain a leading zero.\\n\\nFor example, \"01:00\" is not valid. It should be \"1:00\".\\n\\nThe minute must be consist of two digits and may contain a leading zero.\\n\\nFor example, \"10:2\" is not valid. It should be \"10:02\".\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: turnedOn = 1\\nOutput: [\"0:01\",\"0:02\",\"0:04\",\"0:08\",\"0:16\",\"0:32\",\"1:00\",\"2:00\",\"4:00\",\"8:00\"]\\nExample 2:\\nInput: turnedOn = 9\\nOutput: []\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= turnedOn <= 10\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/remove-k-digits",
        "Title": "Remove K Digits ",
        "Description": "b'Given string num representing a non-negative integer num, and an integer k, return the smallest possible integer after removing k digits from num.\\n\\xc2\\xa0\\nExample 1:\\nInput: num = \"1432219\", k = 3\\nOutput: \"1219\"\\nExplanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.\\n\\nExample 2:\\nInput: num = \"10200\", k = 1\\nOutput: \"200\"\\nExplanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.\\n\\nExample 3:\\nInput: num = \"10\", k = 2\\nOutput: \"0\"\\nExplanation: Remove all the digits from the number and it is left with nothing which is 0.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= k <= num.length <= 105\\nnum consists of only digits.\\nnum does not have any leading zeros except for the zero itself.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/frog-jump",
        "Title": "Frog Jump ",
        "Description": "b\"A frog is crossing a river. The river is divided into some number of units, and at each unit, there may or may not exist a stone. The frog can jump on a stone, but it must not jump into the water.\\nGiven a list of stones' positions (in units) in sorted ascending order, determine if the frog can cross the river by landing on the last stone. Initially, the frog is on the first stone and assumes the first jump must be 1 unit.\\nIf the frog's last jump was k units, its next jump must be either k - 1, k, or k + 1 units. The frog can only jump in the forward direction.\\n\\xc2\\xa0\\nExample 1:\\nInput: stones = [0,1,3,5,6,8,12,17]\\nOutput: true\\nExplanation: The frog can jump to the last stone by jumping 1 unit to the 2nd stone, then 2 units to the 3rd stone, then 2 units to the 4th stone, then 3 units to the 6th stone, 4 units to the 7th stone, and 5 units to the 8th stone.\\n\\nExample 2:\\nInput: stones = [0,1,2,3,4,8,9,11]\\nOutput: false\\nExplanation: There is no way to jump to the last stone as the gap between the 5th and 6th stone is too large.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n2 <= stones.length <= 2000\\n0 <= stones[i] <= 231 - 1\\nstones[0] == 0\\nstones\\xc2\\xa0is sorted in a strictly increasing order.\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/sum-of-left-leaves",
        "Title": "Sum of Left Leaves ",
        "Description": "b'Given the root of a binary tree, return the sum of all left leaves.\\nA leaf is a node with no children. A left leaf is a leaf that is the left child of another node.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [3,9,20,null,null,15,7]\\nOutput: 24\\nExplanation: There are two left leaves in the binary tree, with values 9 and 15 respectively.\\n\\nExample 2:\\nInput: root = [1]\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [1, 1000].\\n-1000 <= Node.val <= 1000\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/convert-a-number-to-hexadecimal",
        "Title": "Convert a Number to Hexadecimal ",
        "Description": "b'Given an integer num, return a string representing its hexadecimal representation. For negative integers, two\\xe2\\x80\\x99s complement method is used.\\nAll the letters in the answer string should be lowercase characters, and there should not be any leading zeros in the answer except for the zero itself.\\nNote:\\xc2\\xa0You are not allowed to use any built-in library method to directly solve this problem.\\n\\xc2\\xa0\\nExample 1:\\nInput: num = 26\\nOutput: \"1a\"\\nExample 2:\\nInput: num = -1\\nOutput: \"ffffffff\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n-231 <= num <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/queue-reconstruction-by-height",
        "Title": "Queue Reconstruction by Height ",
        "Description": "b'You are given an array of people, people, which are the attributes of some people in a queue (not necessarily in order). Each people[i] = [hi, ki] represents the ith person of height hi with exactly ki other people in front who have a height greater than or equal to hi.\\nReconstruct and return the queue that is represented by the input array people. The returned queue should be formatted as an array queue, where queue[j] = [hj, kj] is the attributes of the jth person in the queue (queue[0] is the person at the front of the queue).\\n\\xc2\\xa0\\nExample 1:\\nInput: people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]\\nOutput: [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]\\nExplanation:\\nPerson 0 has height 5 with no other people taller or the same height in front.\\nPerson 1 has height 7 with no other people taller or the same height in front.\\nPerson 2 has height 5 with two persons taller or the same height in front, which is person 0 and 1.\\nPerson 3 has height 6 with one person taller or the same height in front, which is person 1.\\nPerson 4 has height 4 with four people taller or the same height in front, which are people 0, 1, 2, and 3.\\nPerson 5 has height 7 with one person taller or the same height in front, which is person 1.\\nHence [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] is the reconstructed queue.\\n\\nExample 2:\\nInput: people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]\\nOutput: [[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= people.length <= 2000\\n0 <= hi <= 106\\n0 <= ki < people.length\\nIt is guaranteed that the queue can be reconstructed.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/trapping-rain-water-ii",
        "Title": "Trapping Rain Water II ",
        "Description": "b'Given an m x n integer matrix heightMap representing the height of each unit cell in a 2D elevation map, return the volume of water it can trap after raining.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: heightMap = [[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]\\nOutput: 4\\nExplanation: After the rain, water is trapped between the blocks.\\nWe have two small ponds 1 and 3 units trapped.\\nThe total volume of water trapped is 4.\\n\\nExample 2:\\n\\nInput: heightMap = [[3,3,3,3,3],[3,2,2,2,3],[3,2,1,2,3],[3,2,2,2,3],[3,3,3,3,3]]\\nOutput: 10\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == heightMap.length\\nn == heightMap[i].length\\n1 <= m, n <= 200\\n0 <= heightMap[i][j] <= 2 * 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/valid-word-abbreviation",
        "Title": "Valid Word Abbreviation ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/longest-palindrome",
        "Title": "Longest Palindrome ",
        "Description": "b'Given a string s which consists of lowercase or uppercase letters, return the length of the longest palindrome\\xc2\\xa0that can be built with those letters.\\nLetters are case sensitive, for example,\\xc2\\xa0\"Aa\" is not considered a palindrome here.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"abccccdd\"\\nOutput: 7\\nExplanation: One longest palindrome that can be built is \"dccaccd\", whose length is 7.\\n\\nExample 2:\\nInput: s = \"a\"\\nOutput: 1\\nExplanation: The longest palindrome that can be built is \"a\", whose length is 1.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 2000\\ns consists of lowercase and/or uppercase English\\xc2\\xa0letters only.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/split-array-largest-sum",
        "Title": "Split Array Largest Sum ",
        "Description": "b'Given an array nums which consists of non-negative integers and an integer m, you can split the array into m non-empty continuous subarrays.\\nWrite an algorithm to minimize the largest sum among these m subarrays.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [7,2,5,10,8], m = 2\\nOutput: 18\\nExplanation:\\nThere are four ways to split nums into two subarrays.\\nThe best way is to split it into [7,2,5] and [10,8],\\nwhere the largest sum among the two subarrays is only 18.\\n\\nExample 2:\\nInput: nums = [1,2,3,4,5], m = 2\\nOutput: 9\\n\\nExample 3:\\nInput: nums = [1,4,4], m = 3\\nOutput: 4\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 1000\\n0 <= nums[i] <= 106\\n1 <= m <= min(50, nums.length)\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/minimum-unique-word-abbreviation",
        "Title": "Minimum Unique Word Abbreviation ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/fizz-buzz",
        "Title": "Fizz Buzz ",
        "Description": "b'Given an integer n, return a string array answer (1-indexed) where:\\n\\nanswer[i] == \"FizzBuzz\" if i is divisible by 3 and 5.\\nanswer[i] == \"Fizz\" if i is divisible by 3.\\nanswer[i] == \"Buzz\" if i is divisible by 5.\\nanswer[i] == i (as a string) if none of the above conditions are true.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 3\\nOutput: [\"1\",\"2\",\"Fizz\"]\\nExample 2:\\nInput: n = 5\\nOutput: [\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\"]\\nExample 3:\\nInput: n = 15\\nOutput: [\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\",\"Fizz\",\"7\",\"8\",\"Fizz\",\"Buzz\",\"11\",\"Fizz\",\"13\",\"14\",\"FizzBuzz\"]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/arithmetic-slices",
        "Title": "Arithmetic Slices ",
        "Description": "b'An integer array is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.\\n\\nFor example, [1,3,5,7,9], [7,7,7,7], and [3,-1,-5,-9] are arithmetic sequences.\\n\\nGiven an integer array nums, return the number of arithmetic subarrays of nums.\\nA subarray is a contiguous subsequence of the array.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,2,3,4]\\nOutput: 3\\nExplanation: We have 3 arithmetic slices in nums: [1, 2, 3], [2, 3, 4] and [1,2,3,4] itself.\\n\\nExample 2:\\nInput: nums = [1]\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 5000\\n-1000 <= nums[i] <= 1000\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/third-maximum-number",
        "Title": "Third Maximum Number ",
        "Description": "b\"Given an integer array nums, return the third distinct maximum number in this array. If the third maximum does not exist, return the maximum number.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [3,2,1]\\nOutput: 1\\nExplanation:\\nThe first distinct maximum is 3.\\nThe second distinct maximum is 2.\\nThe third distinct maximum is 1.\\n\\nExample 2:\\nInput: nums = [1,2]\\nOutput: 2\\nExplanation:\\nThe first distinct maximum is 2.\\nThe second distinct maximum is 1.\\nThe third distinct maximum does not exist, so the maximum (2) is returned instead.\\n\\nExample 3:\\nInput: nums = [2,2,3,1]\\nOutput: 1\\nExplanation:\\nThe first distinct maximum is 3.\\nThe second distinct maximum is 2 (both 2's are counted together since they have the same value).\\nThe third distinct maximum is 1.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 104\\n-231 <= nums[i] <= 231 - 1\\n\\n\\xc2\\xa0\\nFollow up: Can you find an O(n) solution?\""
    },
    {
        "URL": "https://leetcode.com/problems/add-strings",
        "Title": "Add Strings ",
        "Description": "b'Given two non-negative integers, num1 and num2 represented as string, return the sum of num1 and num2 as a string.\\nYou must solve the problem without using any built-in library for handling large integers (such as BigInteger). You must also not convert the inputs to integers directly.\\n\\xc2\\xa0\\nExample 1:\\nInput: num1 = \"11\", num2 = \"123\"\\nOutput: \"134\"\\n\\nExample 2:\\nInput: num1 = \"456\", num2 = \"77\"\\nOutput: \"533\"\\n\\nExample 3:\\nInput: num1 = \"0\", num2 = \"0\"\\nOutput: \"0\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= num1.length, num2.length <= 104\\nnum1 and num2 consist of only digits.\\nnum1 and num2 don\\'t have any leading zeros except for the zero itself.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/partition-equal-subset-sum",
        "Title": "Partition Equal Subset Sum ",
        "Description": "b'Given a non-empty array nums containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,5,11,5]\\nOutput: true\\nExplanation: The array can be partitioned as [1, 5, 5] and [11].\\n\\nExample 2:\\nInput: nums = [1,2,3,5]\\nOutput: false\\nExplanation: The array cannot be partitioned into equal sum subsets.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 200\\n1 <= nums[i] <= 100\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/pacific-atlantic-water-flow",
        "Title": "Pacific Atlantic Water Flow ",
        "Description": "b\"There is an m x n rectangular island that borders both the Pacific Ocean and Atlantic Ocean. The Pacific Ocean touches the island's left and top edges, and the Atlantic Ocean touches the island's right and bottom edges.\\nThe island is partitioned into a grid of square cells. You are given an m x n integer matrix heights where heights[r][c] represents the height above sea level of the cell at coordinate (r, c).\\nThe island receives a lot of rain, and the rain water can flow to neighboring cells directly north, south, east, and west if the neighboring cell's height is less than or equal to the current cell's height. Water can flow from any cell adjacent to an ocean into the ocean.\\nReturn a 2D list of grid coordinates result where result[i] = [ri, ci] denotes that rain water can flow from cell (ri, ci) to both the Pacific and Atlantic oceans.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: heights = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]\\nOutput: [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]\\n\\nExample 2:\\nInput: heights = [[2,1],[1,2]]\\nOutput: [[0,0],[0,1],[1,0],[1,1]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == heights.length\\nn == heights[r].length\\n1 <= m, n <= 200\\n0 <= heights[r][c] <= 105\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/sentence-screen-fitting",
        "Title": "Sentence Screen Fitting ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/battleships-in-a-board",
        "Title": "Battleships in a Board ",
        "Description": "b'Given an m x n matrix board where each cell is a battleship \\'X\\' or empty \\'.\\', return the number of the battleships on board.\\nBattleships can only be placed horizontally or vertically on board. In other words, they can only be made of the shape 1 x k (1 row, k columns) or k x 1 (k rows, 1 column), where k can be of any size. At least one horizontal or vertical cell separates between two battleships (i.e., there are no adjacent battleships).\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: board = [[\"X\",\".\",\".\",\"X\"],[\".\",\".\",\".\",\"X\"],[\".\",\".\",\".\",\"X\"]]\\nOutput: 2\\n\\nExample 2:\\nInput: board = [[\".\"]]\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == board.length\\nn == board[i].length\\n1 <= m, n <= 200\\nboard[i][j] is either \\'.\\' or \\'X\\'.\\n\\n\\xc2\\xa0\\nFollow up: Could you do it in one-pass, using only O(1) extra memory and without modifying the values board?\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/strong-password-checker",
        "Title": "Strong Password Checker ",
        "Description": "b'A password is considered strong if the below conditions are all met:\\n\\nIt has at least 6 characters and at most 20 characters.\\nIt contains at least one lowercase letter, at least one uppercase letter, and at least one digit.\\nIt does\\xc2\\xa0not contain three repeating characters in a row (i.e.,\\xc2\\xa0\"...aaa...\" is weak, but \"...aa...a...\" is strong, assuming other conditions are met).\\n\\nGiven a string password, return the minimum number of steps required to make password strong. if password is already strong, return 0.\\nIn one step, you can:\\n\\nInsert one character to password,\\nDelete one character from password, or\\nReplace\\xc2\\xa0one character of password with another character.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: password = \"a\"\\nOutput: 5\\nExample 2:\\nInput: password = \"aA1\"\\nOutput: 3\\nExample 3:\\nInput: password = \"1337C0d3\"\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= password.length <= 50\\npassword consists of letters, digits, dot\\xc2\\xa0\\'.\\' or exclamation mark \\'!\\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/maximum-xor-of-two-numbers-in-an-array",
        "Title": "Maximum XOR of Two Numbers in an Array ",
        "Description": "b'Given an integer array nums, return the maximum result of nums[i] XOR nums[j], where 0 <= i <= j < n.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [3,10,5,25,2,8]\\nOutput: 28\\nExplanation: The maximum result is 5 XOR 25 = 28.\\n\\nExample 2:\\nInput: nums = [14,70,53,83,49,91,36,80,92,51,66,70]\\nOutput: 127\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 2 * 105\\n0 <= nums[i] <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/valid-word-square",
        "Title": "Valid Word Square ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/reconstruct-original-digits-from-english",
        "Title": "Reconstruct Original Digits from English ",
        "Description": "b'Given a string s containing an out-of-order English representation of digits 0-9, return the digits in ascending order.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"owoztneoer\"\\nOutput: \"012\"\\nExample 2:\\nInput: s = \"fviefuro\"\\nOutput: \"45\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 105\\ns[i] is one of the characters [\"e\",\"g\",\"f\",\"i\",\"h\",\"o\",\"n\",\"s\",\"r\",\"u\",\"t\",\"w\",\"v\",\"x\",\"z\"].\\ns is guaranteed to be valid.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/longest-repeating-character-replacement",
        "Title": "Longest Repeating Character Replacement ",
        "Description": "b'You are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times.\\nReturn the length of the longest substring containing the same letter you can get after performing the above operations.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"ABAB\", k = 2\\nOutput: 4\\nExplanation: Replace the two \\'A\\'s with two \\'B\\'s or vice versa.\\n\\nExample 2:\\nInput: s = \"AABABBA\", k = 1\\nOutput: 4\\nExplanation: Replace the one \\'A\\' in the middle with \\'B\\' and form \"AABBBBA\".\\nThe substring \"BBBB\" has the longest repeating letters, which is 4.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 105\\ns consists of only uppercase English letters.\\n0 <= k <= s.length\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/word-squares",
        "Title": "Word Squares ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/convert-binary-search-tree-to-sorted-doubly-linked-list",
        "Title": "Convert Binary Search Tree to Sorted Doubly Linked List ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/construct-quad-tree",
        "Title": "Construct Quad Tree ",
        "Description": "b\"Given a n * n matrix grid of 0's and 1's only. We want to represent the grid with a Quad-Tree.\\nReturn the root of the Quad-Tree representing the grid.\\nNotice that you can assign the value of a node to True or False when isLeaf is False, and both are accepted in the answer.\\nA Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes:\\n\\nval: True if the node represents a grid of 1's or False if the node represents a grid of 0's.\\nisLeaf: True if the node is leaf node on the tree or False if the node has the four children.\\n\\nclass Node {\\n    public boolean val;\\n    public boolean isLeaf;\\n    public Node topLeft;\\n    public Node topRight;\\n    public Node bottomLeft;\\n    public Node bottomRight;\\n}\\nWe can construct a Quad-Tree from a two-dimensional area using the following steps:\\n\\nIf the current grid has the same value (i.e all 1's or all 0's) set isLeaf True and set val to the value of the grid and set the four children to Null and stop.\\nIf the current grid has different values, set isLeaf to False and set val to any value and divide the current grid into four sub-grids as shown in the photo.\\nRecurse for each of the children with the proper sub-grid.\\n\\n\\nIf you want to know more about the Quad-Tree, you can refer to the wiki.\\nQuad-Tree format:\\nThe output represents the serialized format of a Quad-Tree using level order traversal, where null signifies a path terminator where no node exists below.\\nIt is very similar to the serialization of the binary tree. The only difference is that the node is represented as a list [isLeaf, val].\\nIf the value of isLeaf or val is True we represent it as 1 in the list [isLeaf, val] and if the value of isLeaf or val is False we represent it as 0.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: grid = [[0,1],[1,0]]\\nOutput: [[0,1],[1,0],[1,1],[1,1],[1,0]]\\nExplanation: The explanation of this example is shown below:\\nNotice that 0 represnts False and 1 represents True in the photo representing the Quad-Tree.\\n\\n\\nExample 2:\\n\\nInput: grid = [[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0]]\\nOutput: [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]\\nExplanation: All values in the grid are not the same. We divide the grid into four sub-grids.\\nThe topLeft, bottomLeft and bottomRight each has the same value.\\nThe topRight have different values so we divide it into 4 sub-grids where each has the same value.\\nExplanation is shown in the photo below:\\n\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == grid.length == grid[i].length\\nn == 2x where 0 <= x <= 6\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/serialize-and-deserialize-n-ary-tree",
        "Title": "Serialize and Deserialize N-ary Tree ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/n-ary-tree-level-order-traversal",
        "Title": "N-ary Tree Level Order Traversal ",
        "Description": "b\"Given an n-ary tree, return the level order traversal of its nodes' values.\\nNary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [1,null,3,2,4,null,5,6]\\nOutput: [[1],[3,2,4],[5,6]]\\n\\nExample 2:\\n\\nInput: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\\nOutput: [[1],[2,3,4,5],[6,7,8,9,10],[11,12,13],[14]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe height of the n-ary tree is less than or equal to 1000\\nThe total number of nodes is between [0, 104]\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/flatten-a-multilevel-doubly-linked-list",
        "Title": "Flatten a Multilevel Doubly Linked List ",
        "Description": "b'You are given a doubly linked list, which contains nodes that have a next pointer, a previous pointer, and an additional child pointer. This child pointer may or may not point to a separate doubly linked list, also containing these special nodes. These child lists may have one or more children of their own, and so on, to produce a multilevel data structure as shown in the example below.\\nGiven the head of the first level of the list, flatten the list so that all the nodes appear in a single-level, doubly linked list. Let curr be a node with a child list. The nodes in the child list should appear after curr and before curr.next in the flattened list.\\nReturn the head of the flattened list. The nodes in the list must have all of their child pointers set to null.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: head = [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]\\nOutput: [1,2,3,7,8,11,12,9,10,4,5,6]\\nExplanation: The multilevel linked list in the input is shown.\\nAfter flattening the multilevel linked list it becomes:\\n\\n\\nExample 2:\\n\\nInput: head = [1,2,null,3]\\nOutput: [1,3,2]\\nExplanation: The multilevel linked list in the input is shown.\\nAfter flattening the multilevel linked list it becomes:\\n\\n\\nExample 3:\\nInput: head = []\\nOutput: []\\nExplanation: There could be empty list in the input.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of Nodes will not exceed 1000.\\n1 <= Node.val <= 105\\n\\n\\xc2\\xa0\\nHow the multilevel linked list is represented in test cases:\\nWe use the multilevel linked list from Example 1 above:\\n 1---2---3---4---5---6--NULL\\n         |\\n         7---8---9---10--NULL\\n             |\\n             11--12--NULL\\nThe serialization of each level is as follows:\\n[1,2,3,4,5,6,null]\\n[7,8,9,10,null]\\n[11,12,null]\\n\\nTo serialize all levels together, we will add nulls in each level to signify no node connects to the upper node of the previous level. The serialization becomes:\\n[1,    2,    3, 4, 5, 6, null]\\n             |\\n[null, null, 7,    8, 9, 10, null]\\n                   |\\n[            null, 11, 12, null]\\n\\nMerging the serialization of each level and removing trailing nulls we obtain:\\n[1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/encode-n-ary-tree-to-binary-tree",
        "Title": "Encode N-ary Tree to Binary Tree ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/all-oone-data-structure",
        "Title": "All O`one Data Structure ",
        "Description": "b'Design a data structure to store the strings\\' count with the ability to return the strings with minimum and maximum counts.\\nImplement the AllOne class:\\n\\nAllOne() Initializes the object of the data structure.\\ninc(String key) Increments the count of the string key by 1. If key does not exist in the data structure, insert it with count 1.\\ndec(String key) Decrements the count of the string key by 1. If the count of key is 0 after the decrement, remove it from the data structure. It is guaranteed that key exists in the data structure before the decrement.\\ngetMaxKey() Returns one of the keys with the maximal count. If no element exists, return an empty string \"\".\\ngetMinKey() Returns one of the keys with the minimum count. If no element exists, return an empty string \"\".\\n\\nNote that each function must run in O(1) average time complexity.\\n\\xc2\\xa0\\nExample 1:\\nInput\\n[\"AllOne\", \"inc\", \"inc\", \"getMaxKey\", \"getMinKey\", \"inc\", \"getMaxKey\", \"getMinKey\"]\\n[[], [\"hello\"], [\"hello\"], [], [], [\"leet\"], [], []]\\nOutput\\n[null, null, null, \"hello\", \"hello\", null, \"hello\", \"leet\"]\\n\\nExplanation\\nAllOne allOne = new AllOne();\\nallOne.inc(\"hello\");\\nallOne.inc(\"hello\");\\nallOne.getMaxKey(); // return \"hello\"\\nallOne.getMinKey(); // return \"hello\"\\nallOne.inc(\"leet\");\\nallOne.getMaxKey(); // return \"hello\"\\nallOne.getMinKey(); // return \"leet\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= key.length <= 10\\nkey consists of lowercase English letters.\\nIt is guaranteed that for each call to dec, key is existing in the data structure.\\nAt most 5 * 104\\xc2\\xa0calls will be made to inc, dec, getMaxKey, and getMinKey.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/minimum-genetic-mutation",
        "Title": "Minimum Genetic Mutation ",
        "Description": "b'A gene string can be represented by an 8-character long string, with choices from \\'A\\', \\'C\\', \\'G\\', and \\'T\\'.\\nSuppose we need to investigate a mutation from a gene string start to a gene string end where one mutation is defined as one single character changed in the gene string.\\n\\nFor example, \"AACCGGTT\" --> \"AACCGGTA\" is one mutation.\\n\\nThere is also a gene bank bank that records all the valid gene mutations. A gene must be in bank to make it a valid gene string.\\nGiven the two gene strings start and end and the gene bank bank, return the minimum number of mutations needed to mutate from start to end. If there is no such a mutation, return -1.\\nNote that the starting point is assumed to be valid, so it might not be included in the bank.\\n\\xc2\\xa0\\nExample 1:\\nInput: start = \"AACCGGTT\", end = \"AACCGGTA\", bank = [\"AACCGGTA\"]\\nOutput: 1\\n\\nExample 2:\\nInput: start = \"AACCGGTT\", end = \"AAACGGTA\", bank = [\"AACCGGTA\",\"AACCGCTA\",\"AAACGGTA\"]\\nOutput: 2\\n\\nExample 3:\\nInput: start = \"AAAAACCC\", end = \"AACCCCCC\", bank = [\"AAAACCCC\",\"AAACCCCC\",\"AACCCCCC\"]\\nOutput: 3\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nstart.length == 8\\nend.length == 8\\n0 <= bank.length <= 10\\nbank[i].length == 8\\nstart, end, and bank[i] consist of only the characters [\\'A\\', \\'C\\', \\'G\\', \\'T\\'].\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/number-of-segments-in-a-string",
        "Title": "Number of Segments in a String ",
        "Description": "b'Given a string s, return the number of segments in the string.\\nA segment is defined to be a contiguous sequence of non-space characters.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"Hello, my name is John\"\\nOutput: 5\\nExplanation: The five segments are [\"Hello,\", \"my\", \"name\", \"is\", \"John\"]\\n\\nExample 2:\\nInput: s = \"Hello\"\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= s.length <= 300\\ns consists of lowercase and uppercase English letters, digits, or one of the following characters \"!@#$%^&*()_+-=\\',.:\".\\nThe only space character in s is \\' \\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/non-overlapping-intervals",
        "Title": "Non-overlapping Intervals ",
        "Description": "b\"Given an array of intervals intervals where intervals[i] = [starti, endi], return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.\\n\\xc2\\xa0\\nExample 1:\\nInput: intervals = [[1,2],[2,3],[3,4],[1,3]]\\nOutput: 1\\nExplanation: [1,3] can be removed and the rest of the intervals are non-overlapping.\\n\\nExample 2:\\nInput: intervals = [[1,2],[1,2],[1,2]]\\nOutput: 2\\nExplanation: You need to remove two [1,2] to make the rest of the intervals non-overlapping.\\n\\nExample 3:\\nInput: intervals = [[1,2],[2,3]]\\nOutput: 0\\nExplanation: You don't need to remove any of the intervals since they're already non-overlapping.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= intervals.length <= 105\\nintervals[i].length == 2\\n-5 * 104 <= starti < endi <= 5 * 104\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/find-right-interval",
        "Title": "Find Right Interval ",
        "Description": "b'You are given an array of intervals, where intervals[i] = [starti, endi] and each starti is unique.\\nThe right interval for an interval i is an interval j such that startj >= endi and startj is minimized. Note that i may equal j.\\nReturn an array of right interval indices for each interval i. If no right interval exists for interval i, then put -1 at index i.\\n\\xc2\\xa0\\nExample 1:\\nInput: intervals = [[1,2]]\\nOutput: [-1]\\nExplanation: There is only one interval in the collection, so it outputs -1.\\n\\nExample 2:\\nInput: intervals = [[3,4],[2,3],[1,2]]\\nOutput: [-1,0,1]\\nExplanation: There is no right interval for [3,4].\\nThe right interval for [2,3] is [3,4] since start0 = 3 is the smallest start that is >= end1 = 3.\\nThe right interval for [1,2] is [2,3] since start1 = 2 is the smallest start that is >= end2 = 2.\\n\\nExample 3:\\nInput: intervals = [[1,4],[2,3],[3,4]]\\nOutput: [-1,2,-1]\\nExplanation: There is no right interval for [1,4] and [3,4].\\nThe right interval for [2,3] is [3,4] since start2 = 3 is the smallest start that is >= end1 = 3.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= intervals.length <= 2 * 104\\nintervals[i].length == 2\\n-106 <= starti <= endi <= 106\\nThe start point of each interval is unique.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/path-sum-iii",
        "Title": "Path Sum III ",
        "Description": "b'Given the root of a binary tree and an integer targetSum, return the number of paths where the sum of the values\\xc2\\xa0along the path equals\\xc2\\xa0targetSum.\\nThe path does not need to start or end at the root or a leaf, but it must go downwards (i.e., traveling only from parent nodes to child nodes).\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8\\nOutput: 3\\nExplanation: The paths that sum to 8 are shown.\\n\\nExample 2:\\nInput: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\\nOutput: 3\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [0, 1000].\\n-109 <= Node.val <= 109\\n-1000 <= targetSum <= 1000\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/find-all-anagrams-in-a-string",
        "Title": "Find All Anagrams in a String ",
        "Description": "b'Given two strings s and p, return an array of all the start indices of p\\'s anagrams in s. You may return the answer in any order.\\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"cbaebabacd\", p = \"abc\"\\nOutput: [0,6]\\nExplanation:\\nThe substring with start index = 0 is \"cba\", which is an anagram of \"abc\".\\nThe substring with start index = 6 is \"bac\", which is an anagram of \"abc\".\\n\\nExample 2:\\nInput: s = \"abab\", p = \"ab\"\\nOutput: [0,1,2]\\nExplanation:\\nThe substring with start index = 0 is \"ab\", which is an anagram of \"ab\".\\nThe substring with start index = 1 is \"ba\", which is an anagram of \"ab\".\\nThe substring with start index = 2 is \"ab\", which is an anagram of \"ab\".\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length, p.length <= 3 * 104\\ns and p consist of lowercase English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/ternary-expression-parser",
        "Title": "Ternary Expression Parser ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/k-th-smallest-in-lexicographical-order",
        "Title": "K-th Smallest in Lexicographical Order ",
        "Description": "b'Given two integers n and k, return the kth lexicographically smallest integer in the range [1, n].\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 13, k = 2\\nOutput: 10\\nExplanation: The lexicographical order is [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9], so the second smallest number is 10.\\n\\nExample 2:\\nInput: n = 1, k = 1\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= k <= n <= 109\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/arranging-coins",
        "Title": "Arranging Coins ",
        "Description": "b'You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\\nGiven the integer n, return the number of complete rows of the staircase you will build.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: n = 5\\nOutput: 2\\nExplanation: Because the 3rd row is incomplete, we return 2.\\n\\nExample 2:\\n\\nInput: n = 8\\nOutput: 3\\nExplanation: Because the 4th row is incomplete, we return 3.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/find-all-duplicates-in-an-array",
        "Title": "Find All Duplicates in an Array ",
        "Description": "b'Given an integer array nums of length n where all the integers of nums are in the range [1, n] and each integer appears once or twice, return an array of all the integers that appears twice.\\nYou must write an algorithm that runs in\\xc2\\xa0O(n)\\xc2\\xa0time and uses only constant extra space.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [4,3,2,7,8,2,3,1]\\nOutput: [2,3]\\nExample 2:\\nInput: nums = [1,1,2]\\nOutput: [1]\\nExample 3:\\nInput: nums = [1]\\nOutput: []\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == nums.length\\n1 <= n <= 105\\n1 <= nums[i] <= n\\nEach element in nums appears once or twice.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/string-compression",
        "Title": "String Compression ",
        "Description": "b'Given an array of characters chars, compress it using the following algorithm:\\nBegin with an empty string s. For each group of consecutive repeating characters in chars:\\n\\nIf the group\\'s length is 1, append the character to s.\\nOtherwise, append the character followed by the group\\'s length.\\n\\nThe compressed string s should not be returned separately, but instead, be stored in the input character array chars. Note that group lengths that are 10 or longer will be split into multiple characters in chars.\\nAfter you are done modifying the input array, return the new length of the array.\\nYou must write an algorithm that uses only constant extra space.\\n\\xc2\\xa0\\nExample 1:\\nInput: chars = [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\nOutput: Return 6, and the first 6 characters of the input array should be: [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\\nExplanation: The groups are \"aa\", \"bb\", and \"ccc\". This compresses to \"a2b2c3\".\\n\\nExample 2:\\nInput: chars = [\"a\"]\\nOutput: Return 1, and the first character of the input array should be: [\"a\"]\\nExplanation: The only group is \"a\", which remains uncompressed since it\\'s a single character.\\n\\nExample 3:\\nInput: chars = [\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\\nOutput: Return 4, and the first 4 characters of the input array should be: [\"a\",\"b\",\"1\",\"2\"].\\nExplanation: The groups are \"a\" and \"bbbbbbbbbbbb\". This compresses to \"ab12\".\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= chars.length <= 2000\\nchars[i] is a lowercase English letter, uppercase English letter, digit, or symbol.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/sequence-reconstruction",
        "Title": "Sequence Reconstruction ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/add-two-numbers-ii",
        "Title": "Add Two Numbers II ",
        "Description": "b'You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: l1 = [7,2,4,3], l2 = [5,6,4]\\nOutput: [7,8,0,7]\\n\\nExample 2:\\nInput: l1 = [2,4,3], l2 = [5,6,4]\\nOutput: [8,0,7]\\n\\nExample 3:\\nInput: l1 = [0], l2 = [0]\\nOutput: [0]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in each linked list is in the range [1, 100].\\n0 <= Node.val <= 9\\nIt is guaranteed that the list represents a number that does not have leading zeros.\\n\\n\\xc2\\xa0\\nFollow up:\\xc2\\xa0Could you solve it without reversing the input lists?\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/arithmetic-slices-ii-subsequence",
        "Title": "Arithmetic Slices II - Subsequence ",
        "Description": "b'Given an integer array nums, return the number of all the arithmetic subsequences of nums.\\nA sequence of numbers is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.\\n\\nFor example, [1, 3, 5, 7, 9], [7, 7, 7, 7], and [3, -1, -5, -9] are arithmetic sequences.\\nFor example, [1, 1, 2, 5, 7] is not an arithmetic sequence.\\n\\nA subsequence of an array is a sequence that can be formed by removing some elements (possibly none) of the array.\\n\\nFor example, [2,5,10] is a subsequence of [1,2,1,2,4,1,5,10].\\n\\nThe test cases are generated so that the answer fits in 32-bit integer.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [2,4,6,8,10]\\nOutput: 7\\nExplanation: All arithmetic subsequence slices are:\\n[2,4,6]\\n[4,6,8]\\n[6,8,10]\\n[2,4,6,8]\\n[4,6,8,10]\\n[2,4,6,8,10]\\n[2,6,10]\\n\\nExample 2:\\nInput: nums = [7,7,7,7,7]\\nOutput: 16\\nExplanation: Any subsequence of this array is arithmetic.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1\\xc2\\xa0 <= nums.length <= 1000\\n-231 <= nums[i] <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/number-of-boomerangs",
        "Title": "Number of Boomerangs ",
        "Description": "b'You are given n points in the plane that are all distinct, where points[i] = [xi, yi]. A boomerang is a tuple of points (i, j, k) such that the distance between i and j equals the distance between i and k (the order of the tuple matters).\\nReturn the number of boomerangs.\\n\\xc2\\xa0\\nExample 1:\\nInput: points = [[0,0],[1,0],[2,0]]\\nOutput: 2\\nExplanation: The two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]].\\n\\nExample 2:\\nInput: points = [[1,1],[2,2],[3,3]]\\nOutput: 2\\n\\nExample 3:\\nInput: points = [[1,1]]\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == points.length\\n1 <= n <= 500\\npoints[i].length == 2\\n-104 <= xi, yi <= 104\\nAll the points are unique.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array",
        "Title": "Find All Numbers Disappeared in an Array ",
        "Description": "b'Given an array nums of n integers where nums[i] is in the range [1, n], return an array of all the integers in the range [1, n] that do not appear in nums.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [4,3,2,7,8,2,3,1]\\nOutput: [5,6]\\nExample 2:\\nInput: nums = [1,1]\\nOutput: [2]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == nums.length\\n1 <= n <= 105\\n1 <= nums[i] <= n\\n\\n\\xc2\\xa0\\nFollow up: Could you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space.\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/serialize-and-deserialize-bst",
        "Title": "Serialize and Deserialize BST ",
        "Description": "b'Serialization is converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.\\nDesign an algorithm to serialize and deserialize a binary search tree. There is no restriction on how your serialization/deserialization algorithm should work. You need to ensure that a binary search tree can be serialized to a string, and this string can be deserialized to the original tree structure.\\nThe encoded string should be as compact as possible.\\n\\xc2\\xa0\\nExample 1:\\nInput: root = [2,1,3]\\nOutput: [2,1,3]\\nExample 2:\\nInput: root = []\\nOutput: []\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [0, 104].\\n0 <= Node.val <= 104\\nThe input tree is guaranteed to be a binary search tree.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/delete-node-in-a-bst",
        "Title": "Delete Node in a BST ",
        "Description": "b\"Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.\\nBasically, the deletion can be divided into two stages:\\n\\nSearch for a node to remove.\\nIf the node is found, delete the node.\\n\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [5,3,6,2,4,null,7], key = 3\\nOutput: [5,4,6,2,null,null,7]\\nExplanation: Given key to delete is 3. So we find the node with value 3 and delete it.\\nOne valid answer is [5,4,6,2,null,null,7], shown in the above BST.\\nPlease notice that another valid answer is [5,2,6,null,4,null,7] and it's also accepted.\\n\\n\\nExample 2:\\nInput: root = [5,3,6,2,4,null,7], key = 0\\nOutput: [5,3,6,2,4,null,7]\\nExplanation: The tree does not contain a node with value = 0.\\n\\nExample 3:\\nInput: root = [], key = 0\\nOutput: []\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [0, 104].\\n-105 <= Node.val <= 105\\nEach node has a unique value.\\nroot is a valid binary search tree.\\n-105 <= key <= 105\\n\\n\\xc2\\xa0\\nFollow up: Could you solve it with time complexity O(height of tree)?\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/sort-characters-by-frequency",
        "Title": "Sort Characters By Frequency ",
        "Description": "b'Given a string s, sort it in decreasing order based on the frequency of the characters. The frequency of a character is the number of times it appears in the string.\\nReturn the sorted string. If there are multiple answers, return any of them.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"tree\"\\nOutput: \"eert\"\\nExplanation: \\'e\\' appears twice while \\'r\\' and \\'t\\' both appear once.\\nSo \\'e\\' must appear before both \\'r\\' and \\'t\\'. Therefore \"eetr\" is also a valid answer.\\n\\nExample 2:\\nInput: s = \"cccaaa\"\\nOutput: \"aaaccc\"\\nExplanation: Both \\'c\\' and \\'a\\' appear three times, so both \"cccaaa\" and \"aaaccc\" are valid answers.\\nNote that \"cacaca\" is incorrect, as the same characters must be together.\\n\\nExample 3:\\nInput: s = \"Aabb\"\\nOutput: \"bbAa\"\\nExplanation: \"bbaA\" is also a valid answer, but \"Aabb\" is incorrect.\\nNote that \\'A\\' and \\'a\\' are treated as two different characters.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 5 * 105\\ns consists of uppercase and lowercase English letters and digits.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons",
        "Title": "Minimum Number of Arrows to Burst Balloons ",
        "Description": "b'There are some spherical balloons taped onto a flat wall that represents the XY-plane. The balloons are represented as a 2D integer array points where points[i] = [xstart, xend] denotes a balloon whose horizontal diameter stretches between xstart and xend. You do not know the exact y-coordinates of the balloons.\\nArrows can be shot up directly vertically (in the positive y-direction) from different points along the x-axis. A balloon with xstart and xend is burst by an arrow shot at x if xstart <= x <= xend. There is no limit to the number of arrows that can be shot. A shot arrow keeps traveling up infinitely, bursting any balloons in its path.\\nGiven the array points, return the minimum number of arrows that must be shot to burst all balloons.\\n\\xc2\\xa0\\nExample 1:\\nInput: points = [[10,16],[2,8],[1,6],[7,12]]\\nOutput: 2\\nExplanation: The balloons can be burst by 2 arrows:\\n- Shoot an arrow at x = 6, bursting the balloons [2,8] and [1,6].\\n- Shoot an arrow at x = 11, bursting the balloons [10,16] and [7,12].\\n\\nExample 2:\\nInput: points = [[1,2],[3,4],[5,6],[7,8]]\\nOutput: 4\\nExplanation: One arrow needs to be shot for each balloon for a total of 4 arrows.\\n\\nExample 3:\\nInput: points = [[1,2],[2,3],[3,4],[4,5]]\\nOutput: 2\\nExplanation: The balloons can be burst by 2 arrows:\\n- Shoot an arrow at x = 2, bursting the balloons [1,2] and [2,3].\\n- Shoot an arrow at x = 4, bursting the balloons [3,4] and [4,5].\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= points.length <= 105\\npoints[i].length == 2\\n-231 <= xstart < xend <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/minimum-moves-to-equal-array-elements",
        "Title": "Minimum Moves to Equal Array Elements ",
        "Description": "b'Given an integer array nums of size n, return the minimum number of moves required to make all array elements equal.\\nIn one move, you can increment n - 1 elements of the array by 1.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,2,3]\\nOutput: 3\\nExplanation: Only three moves are needed (remember each move increments two elements):\\n[1,2,3]  =>  [2,3,3]  =>  [3,4,3]  =>  [4,4,4]\\n\\nExample 2:\\nInput: nums = [1,1,1]\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == nums.length\\n1 <= nums.length <= 105\\n-109 <= nums[i] <= 109\\nThe answer is guaranteed to fit in a 32-bit integer.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/4sum-ii",
        "Title": "4Sum II ",
        "Description": "b'Given four integer arrays nums1, nums2, nums3, and nums4 all of length n, return the number of tuples (i, j, k, l) such that:\\n\\n0 <= i, j, k, l < n\\nnums1[i] + nums2[j] + nums3[k] + nums4[l] == 0\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: nums1 = [1,2], nums2 = [-2,-1], nums3 = [-1,2], nums4 = [0,2]\\nOutput: 2\\nExplanation:\\nThe two tuples are:\\n1. (0, 0, 0, 1) -> nums1[0] + nums2[0] + nums3[0] + nums4[1] = 1 + (-2) + (-1) + 2 = 0\\n2. (1, 1, 0, 0) -> nums1[1] + nums2[1] + nums3[0] + nums4[0] = 2 + (-1) + (-1) + 0 = 0\\n\\nExample 2:\\nInput: nums1 = [0], nums2 = [0], nums3 = [0], nums4 = [0]\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == nums1.length\\nn == nums2.length\\nn == nums3.length\\nn == nums4.length\\n1 <= n <= 200\\n-228 <= nums1[i], nums2[i], nums3[i], nums4[i] <= 228\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/assign-cookies",
        "Title": "Assign Cookies ",
        "Description": "b'Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie.\\nEach child i has a greed factor g[i], which is the minimum size of a cookie that the child will be content with; and each cookie j has a size s[j]. If s[j] >= g[i], we can assign the cookie j to the child i, and the child i will be content. Your goal is to maximize the number of your content children and output the maximum number.\\n\\xc2\\xa0\\nExample 1:\\nInput: g = [1,2,3], s = [1,1]\\nOutput: 1\\nExplanation: You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. \\nAnd even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content.\\nYou need to output 1.\\n\\nExample 2:\\nInput: g = [1,2], s = [1,2,3]\\nOutput: 2\\nExplanation: You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. \\nYou have 3 cookies and their sizes are big enough to gratify all of the children, \\nYou need to output 2.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= g.length <= 3 * 104\\n0 <= s.length <= 3 * 104\\n1 <= g[i], s[j] <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/132-pattern",
        "Title": "132 Pattern ",
        "Description": "b'Given an array of n integers nums, a 132 pattern is a subsequence of three integers nums[i], nums[j] and nums[k] such that i < j < k and nums[i] < nums[k] < nums[j].\\nReturn true if there is a 132 pattern in nums, otherwise, return false.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,2,3,4]\\nOutput: false\\nExplanation: There is no 132 pattern in the sequence.\\n\\nExample 2:\\nInput: nums = [3,1,4,2]\\nOutput: true\\nExplanation: There is a 132 pattern in the sequence: [1, 4, 2].\\n\\nExample 3:\\nInput: nums = [-1,3,2,0]\\nOutput: true\\nExplanation: There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == nums.length\\n1 <= n <= 2 * 105\\n-109 <= nums[i] <= 109\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/circular-array-loop",
        "Title": "Circular Array Loop ",
        "Description": "b\"You are playing a game involving a circular array of non-zero integers nums. Each nums[i] denotes the number of indices forward/backward you must move if you are located at index i:\\n\\nIf nums[i] is positive, move nums[i] steps forward, and\\nIf nums[i] is negative, move nums[i] steps backward.\\n\\nSince the array is circular, you may assume that moving forward from the last element puts you on the first element, and moving backwards from the first element puts you on the last element.\\nA cycle in the array consists of a sequence of indices seq of length k where:\\n\\nFollowing the movement rules above results in the repeating index sequence seq[0] -> seq[1] -> ... -> seq[k - 1] -> seq[0] -> ...\\nEvery nums[seq[j]] is either all positive or all negative.\\nk > 1\\n\\nReturn true if there is a cycle in nums, or false otherwise.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [2,-1,1,2,2]\\nOutput: true\\nExplanation:\\nThere is a cycle from index 0 -> 2 -> 3 -> 0 -> ...\\nThe cycle's length is 3.\\n\\nExample 2:\\nInput: nums = [-1,2]\\nOutput: false\\nExplanation:\\nThe sequence from index 1 -> 1 -> 1 -> ... is not a cycle because the sequence's length is 1.\\nBy definition the sequence's length must be strictly greater than 1 to be a cycle.\\n\\nExample 3:\\nInput: nums = [-2,1,-1,-2,-2]\\nOutput: false\\nExplanation:\\nThe sequence from index 1 -> 2 -> 1 -> ... is not a cycle because nums[1] is positive, but nums[2] is negative.\\nEvery nums[seq[j]] must be either all positive or all negative.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 5000\\n-1000 <= nums[i] <= 1000\\nnums[i] != 0\\n\\n\\xc2\\xa0\\nFollow up: Could you solve it in O(n) time complexity and O(1) extra space complexity?\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/poor-pigs",
        "Title": "Poor Pigs ",
        "Description": "b'There are buckets buckets of liquid, where exactly one of the buckets is poisonous. To figure out which one is poisonous, you feed some number of (poor) pigs the liquid to see whether they will die or not. Unfortunately, you only have minutesToTest minutes to determine which bucket is poisonous.\\nYou can feed the pigs according to these steps:\\n\\nChoose some live pigs to feed.\\nFor each pig, choose which buckets to feed it. The pig will consume all the chosen buckets simultaneously and will take no time.\\nWait for minutesToDie minutes. You may not feed any other pigs during this time.\\nAfter minutesToDie minutes have passed, any pigs that have been fed the poisonous bucket will die, and all others will survive.\\nRepeat this process until you run out of time.\\n\\nGiven buckets, minutesToDie, and minutesToTest, return the minimum number of pigs needed to figure out which bucket is poisonous within the allotted time.\\n\\xc2\\xa0\\nExample 1:\\nInput: buckets = 1000, minutesToDie = 15, minutesToTest = 60\\nOutput: 5\\nExample 2:\\nInput: buckets = 4, minutesToDie = 15, minutesToTest = 15\\nOutput: 2\\nExample 3:\\nInput: buckets = 4, minutesToDie = 15, minutesToTest = 30\\nOutput: 2\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= buckets <= 1000\\n1 <=\\xc2\\xa0minutesToDie <=\\xc2\\xa0minutesToTest <= 100\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/repeated-substring-pattern",
        "Title": "Repeated Substring Pattern ",
        "Description": "b'Given a string s, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"abab\"\\nOutput: true\\nExplanation: It is the substring \"ab\" twice.\\n\\nExample 2:\\nInput: s = \"aba\"\\nOutput: false\\n\\nExample 3:\\nInput: s = \"abcabcabcabc\"\\nOutput: true\\nExplanation: It is the substring \"abc\" four times or the substring \"abcabc\" twice.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 104\\ns consists of lowercase English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/lfu-cache",
        "Title": "LFU Cache ",
        "Description": "b'Design and implement a data structure for a Least Frequently Used (LFU) cache.\\nImplement the LFUCache class:\\n\\nLFUCache(int capacity) Initializes the object with the capacity of the data structure.\\nint get(int key) Gets the value of the key if the key exists in the cache. Otherwise, returns -1.\\nvoid put(int key, int value) Update the value of the key if present, or inserts the key if not already present. When the cache reaches its capacity, it should invalidate and remove the least frequently used key before inserting a new item. For this problem, when there is a tie (i.e., two or more keys with the same frequency), the least recently used key would be invalidated.\\n\\nTo determine the least frequently used key, a use counter is maintained for each key in the cache. The key with the smallest use counter is the least frequently used key.\\nWhen a key is first inserted into the cache, its use counter is set to 1 (due to the put operation). The use counter for a key in the cache is incremented either a get or put operation is called on it.\\nThe functions\\xc2\\xa0get\\xc2\\xa0and\\xc2\\xa0put\\xc2\\xa0must each run in O(1) average time complexity.\\n\\xc2\\xa0\\nExample 1:\\nInput\\n[\"LFUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"get\", \"put\", \"get\", \"get\", \"get\"]\\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [3], [4, 4], [1], [3], [4]]\\nOutput\\n[null, null, null, 1, null, -1, 3, null, -1, 3, 4]\\n\\nExplanation\\n// cnt(x) = the use counter for key x\\n// cache=[] will show the last used order for tiebreakers (leftmost element is  most recent)\\nLFUCache lfu = new LFUCache(2);\\nlfu.put(1, 1);   // cache=[1,_], cnt(1)=1\\nlfu.put(2, 2);   // cache=[2,1], cnt(2)=1, cnt(1)=1\\nlfu.get(1);      // return 1\\n                 // cache=[1,2], cnt(2)=1, cnt(1)=2\\nlfu.put(3, 3);   // 2 is the LFU key because cnt(2)=1 is the smallest, invalidate 2.\\n\\xc2\\xa0                // cache=[3,1], cnt(3)=1, cnt(1)=2\\nlfu.get(2);      // return -1 (not found)\\nlfu.get(3);      // return 3\\n                 // cache=[3,1], cnt(3)=2, cnt(1)=2\\nlfu.put(4, 4);   // Both 1 and 3 have the same cnt, but 1 is LRU, invalidate 1.\\n                 // cache=[4,3], cnt(4)=1, cnt(3)=2\\nlfu.get(1);      // return -1 (not found)\\nlfu.get(3);      // return 3\\n                 // cache=[3,4], cnt(4)=1, cnt(3)=3\\nlfu.get(4);      // return 4\\n                 // cache=[4,3], cnt(4)=2, cnt(3)=3\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= capacity\\xc2\\xa0<= 104\\n0 <= key <= 105\\n0 <= value <= 109\\nAt most 2 * 105\\xc2\\xa0calls will be made to get and put.\\n\\n\\xc2\\xa0\\n\\xc2\\xa0'"
    },
    {
        "URL": "https://leetcode.com/problems/hamming-distance",
        "Title": "Hamming Distance ",
        "Description": "b'The Hamming distance between two integers is the number of positions at which the corresponding bits are different.\\nGiven two integers x and y, return the Hamming distance between them.\\n\\xc2\\xa0\\nExample 1:\\nInput: x = 1, y = 4\\nOutput: 2\\nExplanation:\\n1   (0 0 0 1)\\n4   (0 1 0 0)\\n       \\xe2\\x86\\x91   \\xe2\\x86\\x91\\nThe above arrows point to positions where the corresponding bits are different.\\n\\nExample 2:\\nInput: x = 3, y = 1\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <=\\xc2\\xa0x, y <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/minimum-moves-to-equal-array-elements-ii",
        "Title": "Minimum Moves to Equal Array Elements II ",
        "Description": "b'Given an integer array nums of size n, return the minimum number of moves required to make all array elements equal.\\nIn one move, you can increment or decrement an element of the array by 1.\\nTest cases are designed so that the answer will fit in a 32-bit integer.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,2,3]\\nOutput: 2\\nExplanation:\\nOnly two moves are needed (remember each move increments or decrements one element):\\n[1,2,3]  =>  [2,2,3]  =>  [2,2,2]\\n\\nExample 2:\\nInput: nums = [1,10,2,9]\\nOutput: 16\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == nums.length\\n1 <= nums.length <= 105\\n-109 <= nums[i] <= 109\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/island-perimeter",
        "Title": "Island Perimeter ",
        "Description": "b'You are given row x col grid representing a map where grid[i][j] = 1 represents\\xc2\\xa0land and grid[i][j] = 0 represents water.\\nGrid cells are connected horizontally/vertically (not diagonally). The grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells).\\nThe island doesn\\'t have \"lakes\", meaning the water inside isn\\'t connected to the water around the island. One cell is a square with side length 1. The grid is rectangular, width and height don\\'t exceed 100. Determine the perimeter of the island.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: grid = [[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]]\\nOutput: 16\\nExplanation: The perimeter is the 16 yellow stripes in the image above.\\n\\nExample 2:\\nInput: grid = [[1]]\\nOutput: 4\\n\\nExample 3:\\nInput: grid = [[1,0]]\\nOutput: 4\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nrow == grid.length\\ncol == grid[i].length\\n1 <= row, col <= 100\\ngrid[i][j] is 0 or 1.\\nThere is exactly one island in grid.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/can-i-win",
        "Title": "Can I Win ",
        "Description": "b'In the \"100 game\" two players take turns adding, to a running total, any integer from 1 to 10. The player who first causes the running total to reach or exceed 100 wins.\\nWhat if we change the game so that players cannot re-use integers?\\nFor example, two players might take turns drawing from a common pool of numbers from 1 to 15 without replacement until they reach a total >= 100.\\nGiven two integers maxChoosableInteger and desiredTotal, return true if the first player to move can force a win, otherwise, return false. Assume both players play optimally.\\n\\xc2\\xa0\\nExample 1:\\nInput: maxChoosableInteger = 10, desiredTotal = 11\\nOutput: false\\nExplanation:\\nNo matter which integer the first player choose, the first player will lose.\\nThe first player can choose an integer from 1 up to 10.\\nIf the first player choose 1, the second player can only choose integers from 2 up to 10.\\nThe second player will win by choosing 10 and get a total = 11, which is >= desiredTotal.\\nSame with other integers chosen by the first player, the second player will always win.\\n\\nExample 2:\\nInput: maxChoosableInteger = 10, desiredTotal = 0\\nOutput: true\\n\\nExample 3:\\nInput: maxChoosableInteger = 10, desiredTotal = 1\\nOutput: true\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= maxChoosableInteger <= 20\\n0 <= desiredTotal <= 300\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/optimal-account-balancing",
        "Title": "Optimal Account Balancing ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/count-the-repetitions",
        "Title": "Count The Repetitions ",
        "Description": "b'We define str = [s, n] as the string str which consists of the string s concatenated n times.\\n\\nFor example, str == [\"abc\", 3] ==\"abcabcabc\".\\n\\nWe define that string s1 can be obtained from string s2 if we can remove some characters from s2 such that it becomes s1.\\n\\nFor example, s1 = \"abc\" can be obtained from s2 = \"abdbec\" based on our definition by removing the bolded underlined characters.\\n\\nYou are given two strings s1 and s2 and two integers n1 and n2. You have the two strings str1 = [s1, n1] and str2 = [s2, n2].\\nReturn the maximum integer m such that str = [str2, m] can be obtained from str1.\\n\\xc2\\xa0\\nExample 1:\\nInput: s1 = \"acb\", n1 = 4, s2 = \"ab\", n2 = 2\\nOutput: 2\\nExample 2:\\nInput: s1 = \"acb\", n1 = 1, s2 = \"acb\", n2 = 1\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s1.length, s2.length <= 100\\ns1 and s2 consist of lowercase English letters.\\n1 <= n1, n2 <= 106\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/unique-substrings-in-wraparound-string",
        "Title": "Unique Substrings in Wraparound String ",
        "Description": "b'We define the string s to be the infinite wraparound string of \"abcdefghijklmnopqrstuvwxyz\", so s will look like this:\\n\\n\"...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd....\".\\n\\nGiven a string p, return the number of unique non-empty substrings of p are present in s.\\n\\xc2\\xa0\\nExample 1:\\nInput: p = \"a\"\\nOutput: 1\\nExplanation: Only the substring \"a\" of p is in s.\\n\\nExample 2:\\nInput: p = \"cac\"\\nOutput: 2\\nExplanation: There are two substrings (\"a\", \"c\") of p in s.\\n\\nExample 3:\\nInput: p = \"zab\"\\nOutput: 6\\nExplanation: There are six substrings (\"z\", \"a\", \"b\", \"za\", \"ab\", and \"zab\") of p in s.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= p.length <= 105\\np consists of lowercase English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/validate-ip-address",
        "Title": "Validate IP Address ",
        "Description": "b'Given a string queryIP, return \"IPv4\" if IP is a valid IPv4 address, \"IPv6\" if IP is a valid IPv6 address or \"Neither\" if IP is not a correct IP of any type.\\nA valid IPv4 address is an IP in the form \"x1.x2.x3.x4\" where 0 <= xi <= 255 and xi cannot contain leading zeros. For example, \"192.168.1.1\" and \"192.168.1.0\" are valid IPv4 addresses while \"192.168.01.1\", \"192.168.1.00\", and \"192.168@1.1\" are invalid IPv4 addresses.\\nA valid IPv6 address is an IP in the form \"x1:x2:x3:x4:x5:x6:x7:x8\" where:\\n\\n1 <= xi.length <= 4\\nxi is a hexadecimal string which may contain digits, lowercase English letter (\\'a\\' to \\'f\\') and upper-case English letters (\\'A\\' to \\'F\\').\\nLeading zeros are allowed in xi.\\n\\nFor example, \"2001:0db8:85a3:0000:0000:8a2e:0370:7334\" and \"2001:db8:85a3:0:0:8A2E:0370:7334\" are valid IPv6 addresses, while \"2001:0db8:85a3::8A2E:037j:7334\" and \"02001:0db8:85a3:0000:0000:8a2e:0370:7334\" are invalid IPv6 addresses.\\n\\xc2\\xa0\\nExample 1:\\nInput: queryIP = \"172.16.254.1\"\\nOutput: \"IPv4\"\\nExplanation: This is a valid IPv4 address, return \"IPv4\".\\n\\nExample 2:\\nInput: queryIP = \"2001:0db8:85a3:0:0:8A2E:0370:7334\"\\nOutput: \"IPv6\"\\nExplanation: This is a valid IPv6 address, return \"IPv6\".\\n\\nExample 3:\\nInput: queryIP = \"256.256.256.256\"\\nOutput: \"Neither\"\\nExplanation: This is neither a IPv4 address nor a IPv6 address.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nqueryIP consists only of English letters, digits and the characters \\'.\\' and \\':\\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/convex-polygon",
        "Title": "Convex Polygon ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/implement-rand10-using-rand7",
        "Title": "Implement Rand10() Using Rand7() ",
        "Description": "b\"Given the API rand7() that generates a uniform random integer in the range [1, 7], write a function rand10() that generates a uniform random integer in the range [1, 10]. You can only call the API rand7(), and you shouldn't call any other API. Please do not use a language's built-in random API.\\nEach test case will have one internal argument n, the number of times that your implemented function rand10() will be called while testing. Note that this is not an argument passed to rand10().\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 1\\nOutput: [2]\\nExample 2:\\nInput: n = 2\\nOutput: [2,8]\\nExample 3:\\nInput: n = 3\\nOutput: [3,8,10]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 105\\n\\n\\xc2\\xa0\\nFollow up:\\n\\nWhat is the expected value for the number of calls to rand7() function?\\nCould you minimize the number of calls to rand7()?\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/encode-string-with-shortest-length",
        "Title": "Encode String with Shortest Length ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/concatenated-words",
        "Title": "Concatenated Words ",
        "Description": "b'Given an array of strings words (without duplicates), return all the concatenated words in the given list of words.\\nA concatenated word is defined as a string that is comprised entirely of at least two shorter words in the given array.\\n\\xc2\\xa0\\nExample 1:\\nInput: words = [\"cat\",\"cats\",\"catsdogcats\",\"dog\",\"dogcatsdog\",\"hippopotamuses\",\"rat\",\"ratcatdogcat\"]\\nOutput: [\"catsdogcats\",\"dogcatsdog\",\"ratcatdogcat\"]\\nExplanation: \"catsdogcats\" can be concatenated by \"cats\", \"dog\" and \"cats\"; \\n\"dogcatsdog\" can be concatenated by \"dog\", \"cats\" and \"dog\"; \\n\"ratcatdogcat\" can be concatenated by \"rat\", \"cat\", \"dog\" and \"cat\".\\nExample 2:\\nInput: words = [\"cat\",\"dog\",\"catdog\"]\\nOutput: [\"catdog\"]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= words.length <= 104\\n1 <= words[i].length <= 30\\nwords[i] consists of only lowercase English letters.\\nAll the strings of words are unique.\\n1 <= sum(words[i].length) <= 105\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/matchsticks-to-square",
        "Title": "Matchsticks to Square ",
        "Description": "b'You are given an integer array matchsticks where matchsticks[i] is the length of the ith matchstick. You want to use all the matchsticks to make one square. You should not break any stick, but you can link them up, and each matchstick must be used exactly one time.\\nReturn true if you can make this square and false otherwise.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: matchsticks = [1,1,2,2,2]\\nOutput: true\\nExplanation: You can form a square with length 2, one side of the square came two sticks with length 1.\\n\\nExample 2:\\nInput: matchsticks = [3,3,3,3,4]\\nOutput: false\\nExplanation: You cannot find a way to form a square with all the matchsticks.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= matchsticks.length <= 15\\n1 <= matchsticks[i] <= 108\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/ones-and-zeroes",
        "Title": "Ones and Zeroes ",
        "Description": "b'You are given an array of binary strings strs and two integers m and n.\\nReturn the size of the largest subset of strs such that there are at most m 0\\'s and n 1\\'s in the subset.\\nA set x is a subset of a set y if all elements of x are also elements of y.\\n\\xc2\\xa0\\nExample 1:\\nInput: strs = [\"10\",\"0001\",\"111001\",\"1\",\"0\"], m = 5, n = 3\\nOutput: 4\\nExplanation: The largest subset with at most 5 0\\'s and 3 1\\'s is {\"10\", \"0001\", \"1\", \"0\"}, so the answer is 4.\\nOther valid but smaller subsets include {\"0001\", \"1\"} and {\"10\", \"1\", \"0\"}.\\n{\"111001\"} is an invalid subset because it contains 4 1\\'s, greater than the maximum of 3.\\n\\nExample 2:\\nInput: strs = [\"10\",\"0\",\"1\"], m = 1, n = 1\\nOutput: 2\\nExplanation: The largest subset is {\"0\", \"1\"}, so the answer is 2.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= strs.length <= 600\\n1 <= strs[i].length <= 100\\nstrs[i] consists only of digits \\'0\\' and \\'1\\'.\\n1 <= m, n <= 100\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/heaters",
        "Title": "Heaters ",
        "Description": "b\"Winter is coming! During the contest, your first job is to design a standard heater with a fixed warm radius to warm all the houses.\\nEvery house can be warmed, as long as the house is within the heater's warm radius range.\\xc2\\xa0\\nGiven the positions of houses and heaters on a horizontal line, return the minimum radius standard of heaters\\xc2\\xa0so that those heaters could cover all houses.\\nNotice that\\xc2\\xa0all the heaters follow your radius standard, and the warm radius will the same.\\n\\xc2\\xa0\\nExample 1:\\nInput: houses = [1,2,3], heaters = [2]\\nOutput: 1\\nExplanation: The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed.\\n\\nExample 2:\\nInput: houses = [1,2,3,4], heaters = [1,4]\\nOutput: 1\\nExplanation: The two heater was placed in the position 1 and 4. We need to use radius 1 standard, then all the houses can be warmed.\\n\\nExample 3:\\nInput: houses = [1,5], heaters = [2]\\nOutput: 3\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= houses.length, heaters.length <= 3 * 104\\n1 <= houses[i], heaters[i] <= 109\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/number-complement",
        "Title": "Number Complement ",
        "Description": "b'The complement of an integer is the integer you get when you flip all the 0\\'s to 1\\'s and all the 1\\'s to 0\\'s in its binary representation.\\n\\nFor example, The integer 5 is \"101\" in binary and its complement is \"010\" which is the integer 2.\\n\\nGiven an integer num, return its complement.\\n\\xc2\\xa0\\nExample 1:\\nInput: num = 5\\nOutput: 2\\nExplanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.\\n\\nExample 2:\\nInput: num = 1\\nOutput: 0\\nExplanation: The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= num < 231\\n\\n\\xc2\\xa0\\nNote: This question is the same as 1009: https://leetcode.com/problems/complement-of-base-10-integer/\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/total-hamming-distance",
        "Title": "Total Hamming Distance ",
        "Description": "b'The Hamming distance between two integers is the number of positions at which the corresponding bits are different.\\nGiven an integer array nums, return the sum of Hamming distances between all the pairs of the integers in nums.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [4,14,2]\\nOutput: 6\\nExplanation: In binary representation, the 4 is 0100, 14 is 1110, and 2 is 0010 (just\\nshowing the four bits relevant in this case).\\nThe answer will be:\\nHammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6.\\n\\nExample 2:\\nInput: nums = [4,14,4]\\nOutput: 4\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 104\\n0 <= nums[i] <= 109\\nThe answer for the given input will fit in a 32-bit integer.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/generate-random-point-in-a-circle",
        "Title": "Generate Random Point in a Circle ",
        "Description": "b'Given the radius and the position of the center of a circle, implement the function randPoint which generates a uniform random point inside the circle.\\nImplement the Solution class:\\n\\nSolution(double radius, double x_center, double y_center) initializes the object with the radius of the circle radius and the position of the center (x_center, y_center).\\nrandPoint() returns a random point inside the circle. A point on the circumference of the circle is considered to be in the circle. The answer is returned as an array [x, y].\\n\\n\\xc2\\xa0\\nExample 1:\\nInput\\n[\"Solution\", \"randPoint\", \"randPoint\", \"randPoint\"]\\n[[1.0, 0.0, 0.0], [], [], []]\\nOutput\\n[null, [-0.02493, -0.38077], [0.82314, 0.38945], [0.36572, 0.17248]]\\n\\nExplanation\\nSolution solution = new Solution(1.0, 0.0, 0.0);\\nsolution.randPoint(); // return [-0.02493, -0.38077]\\nsolution.randPoint(); // return [0.82314, 0.38945]\\nsolution.randPoint(); // return [0.36572, 0.17248]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <\\xc2\\xa0radius <= 108\\n-107 <= x_center, y_center <= 107\\nAt most 3 * 104 calls will be made to randPoint.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/largest-palindrome-product",
        "Title": "Largest Palindrome Product ",
        "Description": "b'Given an integer n, return the largest palindromic integer that can be represented as the product of two n-digits integers. Since the answer can be very large, return it modulo 1337.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 2\\nOutput: 987\\nExplanation: 99 x 91 = 9009, 9009 % 1337 = 987\\n\\nExample 2:\\nInput: n = 1\\nOutput: 9\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 8\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/sliding-window-median",
        "Title": "Sliding Window Median ",
        "Description": "b'The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle values.\\n\\nFor examples, if arr = [2,3,4], the median is 3.\\nFor examples, if arr = [1,2,3,4], the median is (2 + 3) / 2 = 2.5.\\n\\nYou are given an integer array nums and an integer k. There is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.\\nReturn the median array for each window in the original array. Answers within 10-5 of the actual value will be accepted.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,3,-1,-3,5,3,6,7], k = 3\\nOutput: [1.00000,-1.00000,-1.00000,3.00000,5.00000,6.00000]\\nExplanation: \\nWindow position                Median\\n---------------                -----\\n[1  3  -1] -3  5  3  6  7        1\\n 1 [3  -1  -3] 5  3  6  7       -1\\n 1  3 [-1  -3  5] 3  6  7       -1\\n 1  3  -1 [-3  5  3] 6  7        3\\n 1  3  -1  -3 [5  3  6] 7        5\\n 1  3  -1  -3  5 [3  6  7]       6\\n\\nExample 2:\\nInput: nums = [1,2,3,4,2,3,1,4,2], k = 3\\nOutput: [2.00000,3.00000,3.00000,3.00000,2.00000,3.00000,2.00000]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= k <= nums.length <= 105\\n-231 <= nums[i] <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/magical-string",
        "Title": "Magical String ",
        "Description": "b'A magical string s consists of only \\'1\\' and \\'2\\' and obeys the following rules:\\n\\nThe string s is magical because concatenating the number of contiguous occurrences of characters \\'1\\' and \\'2\\' generates the string s itself.\\n\\nThe first few elements of s is s = \"1221121221221121122\\xe2\\x80\\xa6\\xe2\\x80\\xa6\". If we group the consecutive 1\\'s and 2\\'s in s, it will be \"1 22 11 2 1 22 1 22 11 2 11 22 ......\" and the occurrences of 1\\'s or 2\\'s in each group are \"1 2 2 1 1 2 1 2 2 1 2 2 ......\". You can see that the occurrence sequence is s itself.\\nGiven an integer n, return the number of 1\\'s in the first n number in the magical string s.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 6\\nOutput: 3\\nExplanation: The first 6 elements of magical string s is \"122112\" and it contains three 1\\'s, so return 3.\\n\\nExample 2:\\nInput: n = 1\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 105\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/license-key-formatting",
        "Title": "License Key Formatting ",
        "Description": "b'You are given a license key represented as a string s that consists of only alphanumeric characters and dashes. The string is separated into n + 1 groups by n dashes. You are also given an integer k.\\nWe want to reformat the string s such that each group contains exactly k characters, except for the first group, which could be shorter than k but still must contain at least one character. Furthermore, there must be a dash inserted between two groups, and you should convert all lowercase letters to uppercase.\\nReturn the reformatted license key.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"5F3Z-2e-9-w\", k = 4\\nOutput: \"5F3Z-2E9W\"\\nExplanation: The string s has been split into two parts, each part has 4 characters.\\nNote that the two extra dashes are not needed and can be removed.\\n\\nExample 2:\\nInput: s = \"2-5g-3-J\", k = 2\\nOutput: \"2-5G-3J\"\\nExplanation: The string s has been split into three parts, each part has 2 characters except the first part as it could be shorter as mentioned above.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 105\\ns consists of English letters, digits, and dashes \\'-\\'.\\n1 <= k <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/smallest-good-base",
        "Title": "Smallest Good Base ",
        "Description": "b'Given an integer n represented as a string, return the smallest good base of n.\\nWe call k >= 2 a good base of n, if all digits of n base k are 1\\'s.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = \"13\"\\nOutput: \"3\"\\nExplanation: 13 base 3 is 111.\\n\\nExample 2:\\nInput: n = \"4681\"\\nOutput: \"8\"\\nExplanation: 4681 base 8 is 11111.\\n\\nExample 3:\\nInput: n = \"1000000000000000000\"\\nOutput: \"999999999999999999\"\\nExplanation: 1000000000000000000 base 999999999999999999 is 11.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn is an integer in the range [3, 1018].\\nn does not contain any leading zeros.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/find-permutation",
        "Title": "Find Permutation ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/max-consecutive-ones",
        "Title": "Max Consecutive Ones ",
        "Description": "b\"Given a binary array nums, return the maximum number of consecutive 1's in the array.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,1,0,1,1,1]\\nOutput: 3\\nExplanation: The first two digits or the last three digits are consecutive 1s. The maximum number of consecutive 1s is 3.\\n\\nExample 2:\\nInput: nums = [1,0,1,1,0,1]\\nOutput: 2\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 105\\nnums[i] is either 0 or 1.\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/predict-the-winner",
        "Title": "Predict the Winner ",
        "Description": "b'You are given an integer array nums. Two players are playing a game with this array: player 1 and player 2.\\nPlayer 1 and player 2 take turns, with player 1 starting first. Both players start the game with a score of 0. At each turn, the player takes one of the numbers from either end of the array (i.e., nums[0] or nums[nums.length - 1]) which reduces the size of the array by 1. The player adds the chosen number to their score. The game ends when there are no more elements in the array.\\nReturn true if Player 1 can win the game. If the scores of both players are equal, then player 1 is still the winner, and you should also return true. You may assume that both players are playing optimally.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,5,2]\\nOutput: false\\nExplanation: Initially, player 1 can choose between 1 and 2. \\nIf he chooses 2 (or 1), then player 2 can choose from 1 (or 2) and 5. If player 2 chooses 5, then player 1 will be left with 1 (or 2). \\nSo, final score of player 1 is 1 + 2 = 3, and player 2 is 5. \\nHence, player 1 will never be the winner and you need to return false.\\n\\nExample 2:\\nInput: nums = [1,5,233,7]\\nOutput: true\\nExplanation: Player 1 first chooses 1. Then player 2 has to choose between 5 and 7. No matter which number player 2 choose, player 1 can choose 233.\\nFinally, player 1 has more score (234) than player 2 (12), so you need to return True representing player1 can win.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 20\\n0 <= nums[i] <= 107\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/max-consecutive-ones-ii",
        "Title": "Max Consecutive Ones II ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/zuma-game",
        "Title": "Zuma Game ",
        "Description": "b'You are playing a variation of the game Zuma.\\nIn this variation of Zuma, there is a single row of colored balls on a board, where each ball can be colored red \\'R\\', yellow \\'Y\\', blue \\'B\\', green \\'G\\', or white \\'W\\'. You also have several colored balls in your hand.\\nYour goal is to clear all of the balls from the board. On each turn:\\n\\nPick any ball from your hand and insert it in between two balls in the row or on either end of the row.\\nIf there is a group of three or more consecutive balls of the same color, remove the group of balls from the board.\\n\\t\\nIf this removal causes more groups of three or more of the same color to form, then continue removing each group until there are none left.\\n\\n\\nIf there are no more balls on the board, then you win the game.\\nRepeat this process until you either win or do not have any more balls in your hand.\\n\\nGiven a string board, representing the row of balls on the board, and a string hand, representing the balls in your hand, return the minimum number of balls you have to insert to clear all the balls from the board. If you cannot clear all the balls from the board using the balls in your hand, return -1.\\n\\xc2\\xa0\\nExample 1:\\nInput: board = \"WRRBBW\", hand = \"RB\"\\nOutput: -1\\nExplanation: It is impossible to clear all the balls. The best you can do is:\\n- Insert \\'R\\' so the board becomes WRRRBBW. WRRRBBW -> WBBW.\\n- Insert \\'B\\' so the board becomes WBBBW. WBBBW -> WW.\\nThere are still balls remaining on the board, and you are out of balls to insert.\\nExample 2:\\nInput: board = \"WWRRBBWW\", hand = \"WRBRW\"\\nOutput: 2\\nExplanation: To make the board empty:\\n- Insert \\'R\\' so the board becomes WWRRRBBWW. WWRRRBBWW -> WWBBWW.\\n- Insert \\'B\\' so the board becomes WWBBBWW. WWBBBWW -> WWWW -> empty.\\n2 balls from your hand were needed to clear the board.\\n\\nExample 3:\\nInput: board = \"G\", hand = \"GGGGG\"\\nOutput: 2\\nExplanation: To make the board empty:\\n- Insert \\'G\\' so the board becomes GG.\\n- Insert \\'G\\' so the board becomes GGG. GGG -> empty.\\n2 balls from your hand were needed to clear the board.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= board.length <= 16\\n1 <= hand.length <= 5\\nboard and hand consist of the characters \\'R\\', \\'Y\\', \\'B\\', \\'G\\', and \\'W\\'.\\nThe initial row of balls on the board will not have any groups of three or more consecutive balls of the same color.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/robot-room-cleaner",
        "Title": "Robot Room Cleaner ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/the-maze",
        "Title": "The Maze ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/increasing-subsequences",
        "Title": "Increasing Subsequences ",
        "Description": "b'Given an integer array nums, return all the different possible increasing subsequences of the given array with at least two elements. You may return the answer in any order.\\nThe given array may contain duplicates, and two equal integers should also be considered a special case of increasing sequence.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [4,6,7,7]\\nOutput: [[4,6],[4,6,7],[4,6,7,7],[4,7],[4,7,7],[6,7],[6,7,7],[7,7]]\\n\\nExample 2:\\nInput: nums = [4,4,3,2,1]\\nOutput: [[4,4]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 15\\n-100 <= nums[i] <= 100\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/construct-the-rectangle",
        "Title": "Construct the Rectangle ",
        "Description": "b\"A web developer needs to know how to design a web page's size. So, given a specific rectangular web page\\xe2\\x80\\x99s area, your job by now is to design a rectangular web page, whose length L and width W satisfy the following requirements:\\n\\nThe area of the rectangular web page you designed must equal to the given target area.\\nThe width W should not be larger than the length L, which means L >= W.\\nThe difference between length L and width W should be as small as possible.\\n\\nReturn an array [L, W] where L and W are the length and width of the\\xc2\\xa0web page you designed in sequence.\\n\\xc2\\xa0\\nExample 1:\\nInput: area = 4\\nOutput: [2,2]\\nExplanation: The target area is 4, and all the possible ways to construct it are [1,4], [2,2], [4,1]. \\nBut according to requirement 2, [1,4] is illegal; according to requirement 3,  [4,1] is not optimal compared to [2,2]. So the length L is 2, and the width W is 2.\\n\\nExample 2:\\nInput: area = 37\\nOutput: [37,1]\\n\\nExample 3:\\nInput: area = 122122\\nOutput: [427,286]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= area <= 107\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/reverse-pairs",
        "Title": "Reverse Pairs ",
        "Description": "b'Given an integer array nums, return the number of reverse pairs in the array.\\nA reverse pair is a pair (i, j) where 0 <= i < j < nums.length and nums[i] > 2 * nums[j].\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,3,2,3,1]\\nOutput: 2\\nExample 2:\\nInput: nums = [2,4,3,5,1]\\nOutput: 3\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 5 * 104\\n-231 <= nums[i] <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/target-sum",
        "Title": "Target Sum ",
        "Description": "b'You are given an integer array nums and an integer target.\\nYou want to build an expression out of nums by adding one of the symbols \\'+\\' and \\'-\\' before each integer in nums and then concatenate all the integers.\\n\\nFor example, if nums = [2, 1], you can add a \\'+\\' before 2 and a \\'-\\' before 1 and concatenate them to build the expression \"+2-1\".\\n\\nReturn the number of different expressions that you can build, which evaluates to target.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,1,1,1,1], target = 3\\nOutput: 5\\nExplanation: There are 5 ways to assign symbols to make the sum of nums be target 3.\\n-1 + 1 + 1 + 1 + 1 = 3\\n+1 - 1 + 1 + 1 + 1 = 3\\n+1 + 1 - 1 + 1 + 1 = 3\\n+1 + 1 + 1 - 1 + 1 = 3\\n+1 + 1 + 1 + 1 - 1 = 3\\n\\nExample 2:\\nInput: nums = [1], target = 1\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 20\\n0 <= nums[i] <= 1000\\n0 <= sum(nums[i]) <= 1000\\n-1000 <= target <= 1000\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/teemo-attacking",
        "Title": "Teemo Attacking ",
        "Description": "b\"Our hero Teemo is attacking an enemy Ashe with poison attacks! When Teemo attacks Ashe, Ashe gets poisoned for a exactly duration seconds. More formally, an attack at second t will mean Ashe is poisoned during the inclusive time interval [t, t + duration - 1]. If Teemo attacks again before the poison effect ends, the timer for it is reset, and the poison effect will end duration seconds after the new attack.\\nYou are given a non-decreasing integer array timeSeries, where timeSeries[i] denotes that Teemo attacks Ashe at second timeSeries[i], and an integer duration.\\nReturn the total number of seconds that Ashe is poisoned.\\n\\xc2\\xa0\\nExample 1:\\nInput: timeSeries = [1,4], duration = 2\\nOutput: 4\\nExplanation: Teemo's attacks on Ashe go as follows:\\n- At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2.\\n- At second 4, Teemo attacks, and Ashe is poisoned for seconds 4 and 5.\\nAshe is poisoned for seconds 1, 2, 4, and 5, which is 4 seconds in total.\\n\\nExample 2:\\nInput: timeSeries = [1,2], duration = 2\\nOutput: 3\\nExplanation: Teemo's attacks on Ashe go as follows:\\n- At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2.\\n- At second 2 however, Teemo attacks again and resets the poison timer. Ashe is poisoned for seconds 2 and 3.\\nAshe is poisoned for seconds 1, 2, and 3, which is 3 seconds in total.\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= timeSeries.length <= 104\\n0 <= timeSeries[i], duration <= 107\\ntimeSeries is sorted in non-decreasing order.\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/next-greater-element-i",
        "Title": "Next Greater Element I ",
        "Description": "b'The next greater element of some element x in an array is the first greater element that is to the right of x in the same array.\\nYou are given two distinct 0-indexed integer arrays nums1 and nums2, where nums1 is a subset of nums2.\\nFor each 0 <= i < nums1.length, find the index j such that nums1[i] == nums2[j] and determine the next greater element of nums2[j] in nums2. If there is no next greater element, then the answer for this query is -1.\\nReturn an array ans of length nums1.length such that ans[i] is the next greater element as described above.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums1 = [4,1,2], nums2 = [1,3,4,2]\\nOutput: [-1,3,-1]\\nExplanation: The next greater element for each value of nums1 is as follows:\\n- 4 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.\\n- 1 is underlined in nums2 = [1,3,4,2]. The next greater element is 3.\\n- 2 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.\\n\\nExample 2:\\nInput: nums1 = [2,4], nums2 = [1,2,3,4]\\nOutput: [3,-1]\\nExplanation: The next greater element for each value of nums1 is as follows:\\n- 2 is underlined in nums2 = [1,2,3,4]. The next greater element is 3.\\n- 4 is underlined in nums2 = [1,2,3,4]. There is no next greater element, so the answer is -1.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums1.length <= nums2.length <= 1000\\n0 <= nums1[i], nums2[i] <= 104\\nAll integers in nums1 and nums2 are unique.\\nAll the integers of nums1 also appear in nums2.\\n\\n\\xc2\\xa0\\nFollow up: Could you find an O(nums1.length + nums2.length) solution?'"
    },
    {
        "URL": "https://leetcode.com/problems/random-point-in-non-overlapping-rectangles",
        "Title": "Random Point in Non-overlapping Rectangles ",
        "Description": "b'You are given an array of non-overlapping axis-aligned rectangles rects where rects[i] = [ai, bi, xi, yi] indicates that (ai, bi) is the bottom-left corner point of the ith rectangle and (xi, yi) is the top-right corner point of the ith rectangle. Design an algorithm to pick a random integer point inside the space covered by one of the given rectangles. A point on the perimeter of a rectangle is included in the space covered by the rectangle.\\nAny integer point inside the space covered by one of the given rectangles should be equally likely to be returned.\\nNote that an integer point is a point that has integer coordinates.\\nImplement the Solution class:\\n\\nSolution(int[][] rects) Initializes the object with the given rectangles rects.\\nint[] pick() Returns a random integer point [u, v] inside the space covered by one of the given rectangles.\\n\\n\\xc2\\xa0\\nExample 1:\\n\\nInput\\n[\"Solution\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\"]\\n[[[[-2, -2, 1, 1], [2, 2, 4, 6]]], [], [], [], [], []]\\nOutput\\n[null, [1, -2], [1, -1], [-1, -2], [-2, -2], [0, 0]]\\n\\nExplanation\\nSolution solution = new Solution([[-2, -2, 1, 1], [2, 2, 4, 6]]);\\nsolution.pick(); // return [1, -2]\\nsolution.pick(); // return [1, -1]\\nsolution.pick(); // return [-1, -2]\\nsolution.pick(); // return [-2, -2]\\nsolution.pick(); // return [0, 0]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= rects.length <= 100\\nrects[i].length == 4\\n-109 <= ai < xi <= 109\\n-109 <= bi < yi <= 109\\nxi - ai <= 2000\\nyi - bi <= 2000\\nAll the rectangles do not overlap.\\nAt most 104 calls will be made to pick.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/diagonal-traverse",
        "Title": "Diagonal Traverse ",
        "Description": "b'Given an m x n matrix mat, return an array of all the elements of the array in a diagonal order.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: mat = [[1,2,3],[4,5,6],[7,8,9]]\\nOutput: [1,2,4,7,5,3,6,8,9]\\n\\nExample 2:\\nInput: mat = [[1,2],[3,4]]\\nOutput: [1,2,3,4]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == mat.length\\nn == mat[i].length\\n1 <= m, n <= 104\\n1 <= m * n <= 104\\n-105 <= mat[i][j] <= 105\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/the-maze-iii",
        "Title": "The Maze III ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/keyboard-row",
        "Title": "Keyboard Row ",
        "Description": "b'Given an array of strings words, return the words that can be typed using letters of the alphabet on only one row of American keyboard like the image below.\\nIn the American keyboard:\\n\\nthe first row consists of the characters \"qwertyuiop\",\\nthe second row consists of the characters \"asdfghjkl\", and\\nthe third row consists of the characters \"zxcvbnm\".\\n\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: words = [\"Hello\",\"Alaska\",\"Dad\",\"Peace\"]\\nOutput: [\"Alaska\",\"Dad\"]\\n\\nExample 2:\\nInput: words = [\"omk\"]\\nOutput: []\\n\\nExample 3:\\nInput: words = [\"adsdf\",\"sfd\"]\\nOutput: [\"adsdf\",\"sfd\"]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= words.length <= 20\\n1 <= words[i].length <= 100\\nwords[i] consists of English letters (both lowercase and uppercase).\\xc2\\xa0\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/find-mode-in-binary-search-tree",
        "Title": "Find Mode in Binary Search Tree ",
        "Description": "b\"Given the root of a binary search tree (BST) with duplicates, return all the mode(s) (i.e., the most frequently occurred element) in it.\\nIf the tree has more than one mode, return them in any order.\\nAssume a BST is defined as follows:\\n\\nThe left subtree of a node contains only nodes with keys less than or equal to the node's key.\\nThe right subtree of a node contains only nodes with keys greater than or equal to the node's key.\\nBoth the left and right subtrees must also be binary search trees.\\n\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [1,null,2,2]\\nOutput: [2]\\n\\nExample 2:\\nInput: root = [0]\\nOutput: [0]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [1, 104].\\n-105 <= Node.val <= 105\\n\\n\\xc2\\xa0\\nFollow up: Could you do that without using any extra space? (Assume that the implicit stack space incurred due to recursion does not count).\""
    },
    {
        "URL": "https://leetcode.com/problems/ipo",
        "Title": "IPO ",
        "Description": "b'Suppose LeetCode will start its IPO soon. In order to sell a good price of its shares to Venture Capital, LeetCode would like to work on some projects to increase its capital before the IPO. Since it has limited resources, it can only finish at most k distinct projects before the IPO. Help LeetCode design the best way to maximize its total capital after finishing at most k distinct projects.\\nYou are given n projects where the ith project has a pure profit profits[i] and a minimum capital of capital[i] is needed to start it.\\nInitially, you have w capital. When you finish a project, you will obtain its pure profit and the profit will be added to your total capital.\\nPick a list of at most k distinct projects from given projects to maximize your final capital, and return the final maximized capital.\\nThe answer is guaranteed to fit in a 32-bit signed integer.\\n\\xc2\\xa0\\nExample 1:\\nInput: k = 2, w = 0, profits = [1,2,3], capital = [0,1,1]\\nOutput: 4\\nExplanation: Since your initial capital is 0, you can only start the project indexed 0.\\nAfter finishing it you will obtain profit 1 and your capital becomes 1.\\nWith capital 1, you can either start the project indexed 1 or the project indexed 2.\\nSince you can choose at most 2 projects, you need to finish the project indexed 2 to get the maximum capital.\\nTherefore, output the final maximized capital, which is 0 + 1 + 3 = 4.\\n\\nExample 2:\\nInput: k = 3, w = 0, profits = [1,2,3], capital = [0,1,2]\\nOutput: 6\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= k <= 105\\n0 <= w <= 109\\nn == profits.length\\nn == capital.length\\n1 <= n <= 105\\n0 <= profits[i] <= 104\\n0 <= capital[i] <= 109\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/next-greater-element-ii",
        "Title": "Next Greater Element II ",
        "Description": "b\"Given a circular integer array nums (i.e., the next element of nums[nums.length - 1] is nums[0]), return the next greater number for every element in nums.\\nThe next greater number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn't exist, return -1 for this number.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,2,1]\\nOutput: [2,-1,2]\\nExplanation: The first 1's next greater number is 2; \\nThe number 2 can't find next greater number. \\nThe second 1's next greater number needs to search circularly, which is also 2.\\n\\nExample 2:\\nInput: nums = [1,2,3,4,3]\\nOutput: [2,3,4,-1,4]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 104\\n-109 <= nums[i] <= 109\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/base-7",
        "Title": "Base 7 ",
        "Description": "b'Given an integer num, return a string of its base 7 representation.\\n\\xc2\\xa0\\nExample 1:\\nInput: num = 100\\nOutput: \"202\"\\nExample 2:\\nInput: num = -7\\nOutput: \"-10\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n-107 <= num <= 107\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/the-maze-ii",
        "Title": "The Maze II ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/relative-ranks",
        "Title": "Relative Ranks ",
        "Description": "b'You are given an integer array score of size n, where score[i] is the score of the ith athlete in a competition. All the scores are guaranteed to be unique.\\nThe athletes are placed based on their scores, where the 1st place athlete has the highest score, the 2nd place athlete has the 2nd highest score, and so on. The placement of each athlete determines their rank:\\n\\nThe 1st place athlete\\'s rank is \"Gold Medal\".\\nThe 2nd place athlete\\'s rank is \"Silver Medal\".\\nThe 3rd place athlete\\'s rank is \"Bronze Medal\".\\nFor the 4th place to the nth place athlete, their rank is their placement number (i.e., the xth place athlete\\'s rank is \"x\").\\n\\nReturn an array answer of size n where answer[i] is the rank of the ith athlete.\\n\\xc2\\xa0\\nExample 1:\\nInput: score = [5,4,3,2,1]\\nOutput: [\"Gold Medal\",\"Silver Medal\",\"Bronze Medal\",\"4\",\"5\"]\\nExplanation: The placements are [1st, 2nd, 3rd, 4th, 5th].\\nExample 2:\\nInput: score = [10,3,8,9,4]\\nOutput: [\"Gold Medal\",\"5\",\"Bronze Medal\",\"Silver Medal\",\"4\"]\\nExplanation: The placements are [1st, 5th, 3rd, 2nd, 4th].\\n\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == score.length\\n1 <= n <= 104\\n0 <= score[i] <= 106\\nAll the values in score are unique.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/perfect-number",
        "Title": "Perfect Number ",
        "Description": "b'A perfect number is a positive integer that is equal to the sum of its positive divisors, excluding the number itself. A divisor of an integer x is an integer that can divide x evenly.\\nGiven an integer n, return true if n is a perfect number, otherwise return false.\\n\\xc2\\xa0\\nExample 1:\\nInput: num = 28\\nOutput: true\\nExplanation: 28 = 1 + 2 + 4 + 7 + 14\\n1, 2, 4, 7, and 14 are all divisors of 28.\\n\\nExample 2:\\nInput: num = 7\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= num <= 108\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/most-frequent-subtree-sum",
        "Title": "Most Frequent Subtree Sum ",
        "Description": "b'Given the root of a binary tree, return the most frequent subtree sum. If there is a tie, return all the values with the highest frequency in any order.\\nThe subtree sum of a node is defined as the sum of all the node values formed by the subtree rooted at that node (including the node itself).\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [5,2,-3]\\nOutput: [2,-3,4]\\n\\nExample 2:\\n\\nInput: root = [5,2,-5]\\nOutput: [2]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [1, 104].\\n-105 <= Node.val <= 105\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/fibonacci-number",
        "Title": "Fibonacci Number ",
        "Description": "b'The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is,\\nF(0) = 0, F(1) = 1\\nF(n) = F(n - 1) + F(n - 2), for n > 1.\\n\\nGiven n, calculate F(n).\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 2\\nOutput: 1\\nExplanation: F(2) = F(1) + F(0) = 1 + 0 = 1.\\n\\nExample 2:\\nInput: n = 3\\nOutput: 2\\nExplanation: F(3) = F(2) + F(1) = 1 + 1 = 2.\\n\\nExample 3:\\nInput: n = 4\\nOutput: 3\\nExplanation: F(4) = F(3) + F(2) = 2 + 1 = 3.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= n <= 30\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/inorder-successor-in-bst-ii",
        "Title": "Inorder Successor in BST II ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/game-play-analysis-i",
        "Title": "Game Play Analysis I ",
        "Description": "b'SQL SchemaTable: Activity\\n+--------------+---------+\\n| Column Name  | Type    |\\n+--------------+---------+\\n| player_id    | int     |\\n| device_id    | int     |\\n| event_date   | date    |\\n| games_played | int     |\\n+--------------+---------+\\n(player_id, event_date) is the primary key of this table.\\nThis table shows the activity of players of some games.\\nEach row is a record of a player who logged in and played a number of games (possibly 0) before logging out on someday using some device.\\n\\n\\xc2\\xa0\\nWrite an SQL query to report the first login date for each player.\\nReturn the result table in any order.\\nThe query result format is in the following example.\\n\\xc2\\xa0\\nExample 1:\\nInput: \\nActivity table:\\n+-----------+-----------+------------+--------------+\\n| player_id | device_id | event_date | games_played |\\n+-----------+-----------+------------+--------------+\\n| 1         | 2         | 2016-03-01 | 5            |\\n| 1         | 2         | 2016-05-02 | 6            |\\n| 2         | 3         | 2017-06-25 | 1            |\\n| 3         | 1         | 2016-03-02 | 0            |\\n| 3         | 4         | 2018-07-03 | 5            |\\n+-----------+-----------+------------+--------------+\\nOutput: \\n+-----------+-------------+\\n| player_id | first_login |\\n+-----------+-------------+\\n| 1         | 2016-03-01  |\\n| 2         | 2017-06-25  |\\n| 3         | 2016-03-02  |\\n+-----------+-------------+\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/game-play-analysis-ii",
        "Title": "Game Play Analysis II ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/find-bottom-left-tree-value",
        "Title": "Find Bottom Left Tree Value ",
        "Description": "b'Given the root of a binary tree, return the leftmost value in the last row of the tree.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [2,1,3]\\nOutput: 1\\n\\nExample 2:\\n\\nInput: root = [1,2,3,4,null,5,6,null,null,7]\\nOutput: 7\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [1, 104].\\n-231 <= Node.val <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/freedom-trail",
        "Title": "Freedom Trail ",
        "Description": "b'In the video game Fallout 4, the quest \"Road to Freedom\" requires players to reach a metal dial called the \"Freedom Trail Ring\" and use the dial to spell a specific keyword to open the door.\\nGiven a string ring that represents the code engraved on the outer ring and another string key that represents the keyword that needs to be spelled, return the minimum number of steps to spell all the characters in the keyword.\\nInitially, the first character of the ring is aligned at the \"12:00\" direction. You should spell all the characters in key one by one by rotating ring clockwise or anticlockwise to make each character of the string key aligned at the \"12:00\" direction and then by pressing the center button.\\nAt the stage of rotating the ring to spell the key character key[i]:\\n\\nYou can rotate the ring clockwise or anticlockwise by one place, which counts as one step. The final purpose of the rotation is to align one of ring\\'s characters at the \"12:00\" direction, where this character must equal key[i].\\nIf the character key[i] has been aligned at the \"12:00\" direction, press the center button to spell, which also counts as one step. After the pressing, you could begin to spell the next character in the key (next stage). Otherwise, you have finished all the spelling.\\n\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: ring = \"godding\", key = \"gd\"\\nOutput: 4\\nExplanation:\\nFor the first key character \\'g\\', since it is already in place, we just need 1 step to spell this character. \\nFor the second key character \\'d\\', we need to rotate the ring \"godding\" anticlockwise by two steps to make it become \"ddinggo\".\\nAlso, we need 1 more step for spelling.\\nSo the final output is 4.\\n\\nExample 2:\\nInput: ring = \"godding\", key = \"godding\"\\nOutput: 13\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= ring.length, key.length <= 100\\nring and key consist of only lower case English letters.\\nIt is guaranteed that key could always be spelled by rotating ring.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/find-largest-value-in-each-tree-row",
        "Title": "Find Largest Value in Each Tree Row ",
        "Description": "b'Given the root of a binary tree, return an array of the largest value in each row of the tree (0-indexed).\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [1,3,2,5,3,null,9]\\nOutput: [1,3,9]\\n\\nExample 2:\\nInput: root = [1,2,3]\\nOutput: [1,3]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree will be in the range [0, 104].\\n-231 <= Node.val <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/longest-palindromic-subsequence",
        "Title": "Longest Palindromic Subsequence ",
        "Description": "b'Given a string s, find the longest palindromic subsequence\\'s length in s.\\nA subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"bbbab\"\\nOutput: 4\\nExplanation: One possible longest palindromic subsequence is \"bbbb\".\\n\\nExample 2:\\nInput: s = \"cbbd\"\\nOutput: 2\\nExplanation: One possible longest palindromic subsequence is \"bb\".\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 1000\\ns consists only of lowercase English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/super-washing-machines",
        "Title": "Super Washing Machines ",
        "Description": "b\"You have n super washing machines on a line. Initially, each washing machine has some dresses or is empty.\\nFor each move, you could choose any m (1 <= m <= n) washing machines, and pass one dress of each washing machine to one of its adjacent washing machines at the same time.\\nGiven an integer array machines representing the number of dresses in each washing machine from left to right on the line, return the minimum number of moves to make all the washing machines have the same number of dresses. If it is not possible to do it, return -1.\\n\\xc2\\xa0\\nExample 1:\\nInput: machines = [1,0,5]\\nOutput: 3\\nExplanation:\\n1st move:    1     0 <-- 5    =>    1     1     4\\n2nd move:    1 <-- 1 <-- 4    =>    2     1     3\\n3rd move:    2     1 <-- 3    =>    2     2     2\\n\\nExample 2:\\nInput: machines = [0,3,0]\\nOutput: 2\\nExplanation:\\n1st move:    0 <-- 3     0    =>    1     2     0\\n2nd move:    1     2 --> 0    =>    1     1     1\\n\\nExample 3:\\nInput: machines = [0,2,0]\\nOutput: -1\\nExplanation:\\nIt's impossible to make all three washing machines have the same number of dresses.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == machines.length\\n1 <= n <= 104\\n0 <= machines[i] <= 105\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/coin-change-2",
        "Title": "Coin Change 2 ",
        "Description": "b'You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.\\nReturn the number of combinations that make up that amount. If that amount of money cannot be made up by any combination of the coins, return 0.\\nYou may assume that you have an infinite number of each kind of coin.\\nThe answer is guaranteed to fit into a signed 32-bit integer.\\n\\xc2\\xa0\\nExample 1:\\nInput: amount = 5, coins = [1,2,5]\\nOutput: 4\\nExplanation: there are four ways to make up the amount:\\n5=5\\n5=2+2+1\\n5=2+1+1+1\\n5=1+1+1+1+1\\n\\nExample 2:\\nInput: amount = 3, coins = [2]\\nOutput: 0\\nExplanation: the amount of 3 cannot be made up just with coins of 2.\\n\\nExample 3:\\nInput: amount = 10, coins = [10]\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= coins.length <= 300\\n1 <= coins[i] <= 5000\\nAll the values of coins are unique.\\n0 <= amount <= 5000\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/random-flip-matrix",
        "Title": "Random Flip Matrix ",
        "Description": "b'There is an m x n binary grid matrix with all the values set 0 initially. Design an algorithm to randomly pick an index (i, j) where matrix[i][j] == 0 and flips it to 1. All the indices (i, j) where matrix[i][j] == 0 should be equally likely to be returned.\\nOptimize your algorithm to minimize the number of calls made to the built-in random function of your language and optimize the time and space complexity.\\nImplement the Solution class:\\n\\nSolution(int m, int n) Initializes the object with the size of the binary matrix m and n.\\nint[] flip() Returns a random index [i, j] of the matrix where matrix[i][j] == 0 and flips it to 1.\\nvoid reset() Resets all the values of the matrix to be 0.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput\\n[\"Solution\", \"flip\", \"flip\", \"flip\", \"reset\", \"flip\"]\\n[[3, 1], [], [], [], [], []]\\nOutput\\n[null, [1, 0], [2, 0], [0, 0], null, [2, 0]]\\n\\nExplanation\\nSolution solution = new Solution(3, 1);\\nsolution.flip();  // return [1, 0], [0,0], [1,0], and [2,0] should be equally likely to be returned.\\nsolution.flip();  // return [2, 0], Since [1,0] was returned, [2,0] and [0,0]\\nsolution.flip();  // return [0, 0], Based on the previously returned indices, only [0,0] can be returned.\\nsolution.reset(); // All the values are reset to 0 and can be returned.\\nsolution.flip();  // return [2, 0], [0,0], [1,0], and [2,0] should be equally likely to be returned.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= m, n <= 104\\nThere will be at least one free cell for each call to flip.\\nAt most 1000 calls will be made to flip and reset.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/detect-capital",
        "Title": "Detect Capital ",
        "Description": "b'We define the usage of capitals in a word to be right when one of the following cases holds:\\n\\nAll letters in this word are capitals, like \"USA\".\\nAll letters in this word are not capitals, like \"leetcode\".\\nOnly the first letter in this word is capital, like \"Google\".\\n\\nGiven a string word, return true if the usage of capitals in it is right.\\n\\xc2\\xa0\\nExample 1:\\nInput: word = \"USA\"\\nOutput: true\\nExample 2:\\nInput: word = \"FlaG\"\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= word.length <= 100\\nword consists of lowercase and uppercase English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/longest-uncommon-subsequence-i",
        "Title": "Longest Uncommon Subsequence I ",
        "Description": "b'Given two strings a and b, return the length of the longest uncommon subsequence between a and b. If the longest uncommon subsequence does not exist, return -1.\\nAn uncommon subsequence between two strings is a string that is a subsequence of one but not the other.\\nA subsequence of a string s is a string that can be obtained after deleting any number of characters from s.\\n\\nFor example, \"abc\" is a subsequence of \"aebdc\" because you can delete the underlined characters in \"aebdc\" to get \"abc\". Other subsequences of \"aebdc\" include \"aebdc\", \"aeb\", and \"\" (empty string).\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: a = \"aba\", b = \"cdc\"\\nOutput: 3\\nExplanation: One longest uncommon subsequence is \"aba\" because \"aba\" is a subsequence of \"aba\" but not \"cdc\".\\nNote that \"cdc\" is also a longest uncommon subsequence.\\n\\nExample 2:\\nInput: a = \"aaa\", b = \"bbb\"\\nOutput: 3\\nExplanation:\\xc2\\xa0The longest uncommon subsequences are \"aaa\" and \"bbb\".\\n\\nExample 3:\\nInput: a = \"aaa\", b = \"aaa\"\\nOutput: -1\\nExplanation:\\xc2\\xa0Every subsequence of string a is also a subsequence of string b. Similarly, every subsequence of string b is also a subsequence of string a.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= a.length, b.length <= 100\\na and b consist of lower-case English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/longest-uncommon-subsequence-ii",
        "Title": "Longest Uncommon Subsequence II ",
        "Description": "b'Given an array of strings strs, return the length of the longest uncommon subsequence between them. If the longest uncommon subsequence does not exist, return -1.\\nAn uncommon subsequence between an array of strings is a string that is a subsequence of one string but not the others.\\nA subsequence of a string s is a string that can be obtained after deleting any number of characters from s.\\n\\nFor example, \"abc\" is a subsequence of \"aebdc\" because you can delete the underlined characters in \"aebdc\" to get \"abc\". Other subsequences of \"aebdc\" include \"aebdc\", \"aeb\", and \"\" (empty string).\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: strs = [\"aba\",\"cdc\",\"eae\"]\\nOutput: 3\\nExample 2:\\nInput: strs = [\"aaa\",\"aaa\",\"aa\"]\\nOutput: -1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n2 <= strs.length <= 50\\n1 <= strs[i].length <= 10\\nstrs[i] consists of lowercase English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/continuous-subarray-sum",
        "Title": "Continuous Subarray Sum ",
        "Description": "b'Given an integer array nums and an integer k, return true if nums has a continuous subarray of size at least two whose elements sum up to a multiple of k, or false otherwise.\\nAn integer x is a multiple of k if there exists an integer n such that x = n * k. 0 is always a multiple of k.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [23,2,4,6,7], k = 6\\nOutput: true\\nExplanation: [2, 4] is a continuous subarray of size 2 whose elements sum up to 6.\\n\\nExample 2:\\nInput: nums = [23,2,6,4,7], k = 6\\nOutput: true\\nExplanation: [23, 2, 6, 4, 7] is an continuous subarray of size 5 whose elements sum up to 42.\\n42 is a multiple of 6 because 42 = 7 * 6 and 7 is an integer.\\n\\nExample 3:\\nInput: nums = [23,2,6,4,7], k = 13\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 105\\n0 <= nums[i] <= 109\\n0 <= sum(nums[i]) <= 231 - 1\\n1 <= k <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/longest-word-in-dictionary-through-deleting",
        "Title": "Longest Word in Dictionary through Deleting ",
        "Description": "b'Given a string s and a string array dictionary, return the longest string in the dictionary that can be formed by deleting some of the given string characters. If there is more than one possible result, return the longest word with the smallest lexicographical order. If there is no possible result, return the empty string.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"abpcplea\", dictionary = [\"ale\",\"apple\",\"monkey\",\"plea\"]\\nOutput: \"apple\"\\n\\nExample 2:\\nInput: s = \"abpcplea\", dictionary = [\"a\",\"b\",\"c\"]\\nOutput: \"a\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 1000\\n1 <= dictionary.length <= 1000\\n1 <= dictionary[i].length <= 1000\\ns and dictionary[i] consist of lowercase English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/contiguous-array",
        "Title": "Contiguous Array ",
        "Description": "b'Given a binary array nums, return the maximum length of a contiguous subarray with an equal number of 0 and 1.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [0,1]\\nOutput: 2\\nExplanation: [0, 1] is the longest contiguous subarray with an equal number of 0 and 1.\\n\\nExample 2:\\nInput: nums = [0,1,0]\\nOutput: 2\\nExplanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 105\\nnums[i] is either 0 or 1.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/beautiful-arrangement",
        "Title": "Beautiful Arrangement ",
        "Description": "b'Suppose you have n integers labeled 1 through n. A permutation of those n integers perm (1-indexed) is considered a beautiful arrangement if for every i (1 <= i <= n), either of the following is true:\\n\\nperm[i] is divisible by i.\\ni is divisible by perm[i].\\n\\nGiven an integer n, return the number of the beautiful arrangements that you can construct.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 2\\nOutput: 2\\nExplanation: \\nThe first beautiful arrangement is [1,2]:\\n    - perm[1] = 1 is divisible by i = 1\\n    - perm[2] = 2 is divisible by i = 2\\nThe second beautiful arrangement is [2,1]:\\n    - perm[1] = 2 is divisible by i = 1\\n    - i = 2 is divisible by perm[2] = 1\\n\\nExample 2:\\nInput: n = 1\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 15\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/word-abbreviation",
        "Title": "Word Abbreviation ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/random-pick-with-weight",
        "Title": "Random Pick with Weight ",
        "Description": "b'You are given a 0-indexed array of positive integers w where w[i] describes the weight of the ith index.\\nYou need to implement the function pickIndex(), which randomly picks an index in the range [0, w.length - 1] (inclusive) and returns it. The probability of picking an index i is w[i] / sum(w).\\n\\nFor example, if w = [1, 3], the probability of picking index 0 is 1 / (1 + 3) = 0.25 (i.e., 25%), and the probability of picking index 1 is 3 / (1 + 3) = 0.75 (i.e., 75%).\\n\\n\\xc2\\xa0\\nExample 1:\\nInput\\n[\"Solution\",\"pickIndex\"]\\n[[[1]],[]]\\nOutput\\n[null,0]\\n\\nExplanation\\nSolution solution = new Solution([1]);\\nsolution.pickIndex(); // return 0. The only option is to return 0 since there is only one element in w.\\n\\nExample 2:\\nInput\\n[\"Solution\",\"pickIndex\",\"pickIndex\",\"pickIndex\",\"pickIndex\",\"pickIndex\"]\\n[[[1,3]],[],[],[],[],[]]\\nOutput\\n[null,1,1,1,1,0]\\n\\nExplanation\\nSolution solution = new Solution([1, 3]);\\nsolution.pickIndex(); // return 1. It is returning the second element (index = 1) that has a probability of 3/4.\\nsolution.pickIndex(); // return 1\\nsolution.pickIndex(); // return 1\\nsolution.pickIndex(); // return 1\\nsolution.pickIndex(); // return 0. It is returning the first element (index = 0) that has a probability of 1/4.\\n\\nSince this is a randomization problem, multiple answers are allowed.\\nAll of the following outputs can be considered correct:\\n[null,1,1,1,1,0]\\n[null,1,1,1,1,1]\\n[null,1,1,1,0,0]\\n[null,1,1,1,0,1]\\n[null,1,0,1,0,0]\\n......\\nand so on.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= w.length <= 104\\n1 <= w[i] <= 105\\npickIndex will be called at most 104 times.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/minesweeper",
        "Title": "Minesweeper ",
        "Description": "b'Let\\'s play the minesweeper game (Wikipedia, online game)!\\nYou are given an m x n char matrix board representing the game board where:\\n\\n\\'M\\' represents an unrevealed mine,\\n\\'E\\' represents an unrevealed empty square,\\n\\'B\\' represents a revealed blank square that has no adjacent mines (i.e., above, below, left, right, and all 4 diagonals),\\ndigit (\\'1\\' to \\'8\\') represents how many mines are adjacent to this revealed square, and\\n\\'X\\' represents a revealed mine.\\n\\nYou are also given an integer array click where click = [clickr, clickc] represents the next click position among all the unrevealed squares (\\'M\\' or \\'E\\').\\nReturn the board after revealing this position according to the following rules:\\n\\nIf a mine \\'M\\' is revealed, then the game is over. You should change it to \\'X\\'.\\nIf an empty square \\'E\\' with no adjacent mines is revealed, then change it to a revealed blank \\'B\\' and all of its adjacent unrevealed squares should be revealed recursively.\\nIf an empty square \\'E\\' with at least one adjacent mine is revealed, then change it to a digit (\\'1\\' to \\'8\\') representing the number of adjacent mines.\\nReturn the board when no more squares will be revealed.\\n\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: board = [[\"E\",\"E\",\"E\",\"E\",\"E\"],[\"E\",\"E\",\"M\",\"E\",\"E\"],[\"E\",\"E\",\"E\",\"E\",\"E\"],[\"E\",\"E\",\"E\",\"E\",\"E\"]], click = [3,0]\\nOutput: [[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"M\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]]\\n\\nExample 2:\\n\\nInput: board = [[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"M\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]], click = [1,2]\\nOutput: [[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"X\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == board.length\\nn == board[i].length\\n1 <= m, n <= 50\\nboard[i][j] is either \\'M\\', \\'E\\', \\'B\\', or a digit from \\'1\\' to \\'8\\'.\\nclick.length == 2\\n0 <= clickr < m\\n0 <= clickc < n\\nboard[clickr][clickc] is either \\'M\\' or \\'E\\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/minimum-absolute-difference-in-bst",
        "Title": "Minimum Absolute Difference in BST ",
        "Description": "b'Given the root of a Binary Search Tree (BST), return the minimum absolute difference between the values of any two different nodes in the tree.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [4,2,6,1,3]\\nOutput: 1\\n\\nExample 2:\\n\\nInput: root = [1,0,48,null,null,12,49]\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [2, 104].\\n0 <= Node.val <= 105\\n\\n\\xc2\\xa0\\nNote: This question is the same as 783: https://leetcode.com/problems/minimum-distance-between-bst-nodes/\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/lonely-pixel-i",
        "Title": "Lonely Pixel I ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/k-diff-pairs-in-an-array",
        "Title": "K-diff Pairs in an Array ",
        "Description": "b'Given an array of integers nums and an integer k, return the number of unique k-diff pairs in the array.\\nA k-diff pair is an integer pair (nums[i], nums[j]), where the following are true:\\n\\n0 <= i, j < nums.length\\ni != j\\nnums[i] - nums[j] == k\\n\\nNotice that |val| denotes the absolute value of val.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [3,1,4,1,5], k = 2\\nOutput: 2\\nExplanation: There are two 2-diff pairs in the array, (1, 3) and (3, 5).\\nAlthough we have two 1s in the input, we should only return the number of unique pairs.\\n\\nExample 2:\\nInput: nums = [1,2,3,4,5], k = 1\\nOutput: 4\\nExplanation: There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).\\n\\nExample 3:\\nInput: nums = [1,3,1,5,4], k = 0\\nOutput: 1\\nExplanation: There is one 0-diff pair in the array, (1, 1).\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 104\\n-107 <= nums[i] <= 107\\n0 <= k <= 107\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/lonely-pixel-ii",
        "Title": "Lonely Pixel II ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/game-play-analysis-iii",
        "Title": "Game Play Analysis III ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/encode-and-decode-tinyurl",
        "Title": "Encode and Decode TinyURL ",
        "Description": "b'Note: This is a companion problem to the System Design problem: Design TinyURL.\\nTinyURL is a URL shortening service where you enter a URL such as https://leetcode.com/problems/design-tinyurl and it returns a short URL such as http://tinyurl.com/4e9iAk. Design a class to encode a URL and decode a tiny URL.\\nThere is no restriction on how your encode/decode algorithm should work. You just need to ensure that a URL can be encoded to a tiny URL and the tiny URL can be decoded to the original URL.\\nImplement the Solution class:\\n\\nSolution() Initializes the object of the system.\\nString encode(String longUrl) Returns a tiny URL for the given longUrl.\\nString decode(String shortUrl) Returns the original long URL for the given shortUrl. It is guaranteed that the given shortUrl was encoded by the same object.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: url = \"https://leetcode.com/problems/design-tinyurl\"\\nOutput: \"https://leetcode.com/problems/design-tinyurl\"\\n\\nExplanation:\\nSolution obj = new Solution();\\nstring tiny = obj.encode(url); // returns the encoded tiny url.\\nstring ans = obj.decode(tiny); // returns the original url after deconding it.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= url.length <= 104\\nurl is guranteed to be a valid URL.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/construct-binary-tree-from-string",
        "Title": "Construct Binary Tree from String ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/complex-number-multiplication",
        "Title": "Complex Number Multiplication ",
        "Description": "b'A complex number can be represented as a string on the form \"real+imaginaryi\" where:\\n\\nreal is the real part and is an integer in the range [-100, 100].\\nimaginary is the imaginary part and is an integer in the range [-100, 100].\\ni2 == -1.\\n\\nGiven two complex numbers num1 and num2 as strings, return a string of the complex number that represents their multiplications.\\n\\xc2\\xa0\\nExample 1:\\nInput: num1 = \"1+1i\", num2 = \"1+1i\"\\nOutput: \"0+2i\"\\nExplanation: (1 + i) * (1 + i) = 1 + i2 + 2 * i = 2i, and you need convert it to the form of 0+2i.\\n\\nExample 2:\\nInput: num1 = \"1+-1i\", num2 = \"1+-1i\"\\nOutput: \"0+-2i\"\\nExplanation: (1 - i) * (1 - i) = 1 + i2 - 2 * i = -2i, and you need convert it to the form of 0+-2i.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nnum1 and num2 are valid complex numbers.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/convert-bst-to-greater-tree",
        "Title": "Convert BST to Greater Tree ",
        "Description": "b\"Given the root of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus the sum of all keys greater than the original key in BST.\\nAs a reminder, a binary search tree is a tree that satisfies these constraints:\\n\\nThe left subtree of a node contains only nodes with keys less than the node's key.\\nThe right subtree of a node contains only nodes with keys greater than the node's key.\\nBoth the left and right subtrees must also be binary search trees.\\n\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]\\nOutput: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]\\n\\nExample 2:\\nInput: root = [0,null,1]\\nOutput: [1,null,1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [0, 104].\\n-104 <= Node.val <= 104\\nAll the values in the tree are unique.\\nroot is guaranteed to be a valid binary search tree.\\n\\n\\xc2\\xa0\\nNote: This question is the same as 1038: https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/minimum-time-difference",
        "Title": "Minimum Time Difference ",
        "Description": "b'Given a list of 24-hour clock time points in \"HH:MM\" format, return the minimum minutes difference between any two time-points in the list.\\n\\xc2\\xa0\\nExample 1:\\nInput: timePoints = [\"23:59\",\"00:00\"]\\nOutput: 1\\nExample 2:\\nInput: timePoints = [\"00:00\",\"23:59\",\"00:00\"]\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n2 <= timePoints.length <= 2 * 104\\ntimePoints[i] is in the format \"HH:MM\".\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/single-element-in-a-sorted-array",
        "Title": "Single Element in a Sorted Array ",
        "Description": "b'You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once.\\nReturn the single element that appears only once.\\nYour solution must run in O(log n) time and O(1) space.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,1,2,3,3,4,4,8,8]\\nOutput: 2\\nExample 2:\\nInput: nums = [3,3,7,7,10,11,11]\\nOutput: 10\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 105\\n0 <= nums[i] <= 105\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/reverse-string-ii",
        "Title": "Reverse String II ",
        "Description": "b'Given a string s and an integer k, reverse the first k characters for every 2k characters counting from the start of the string.\\nIf there are fewer than k characters left, reverse all of them. If there are less than 2k but greater than or equal to k characters, then reverse the first k characters and leave the other as original.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"abcdefg\", k = 2\\nOutput: \"bacdfeg\"\\nExample 2:\\nInput: s = \"abcd\", k = 2\\nOutput: \"bacd\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 104\\ns consists of only lowercase English letters.\\n1 <= k <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/01-matrix",
        "Title": "01 Matrix ",
        "Description": "b'Given an m x n binary matrix mat, return the distance of the nearest 0 for each cell.\\nThe distance between two adjacent cells is 1.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: mat = [[0,0,0],[0,1,0],[0,0,0]]\\nOutput: [[0,0,0],[0,1,0],[0,0,0]]\\n\\nExample 2:\\n\\nInput: mat = [[0,0,0],[0,1,0],[1,1,1]]\\nOutput: [[0,0,0],[0,1,0],[1,2,1]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == mat.length\\nn == mat[i].length\\n1 <= m, n <= 104\\n1 <= m * n <= 104\\nmat[i][j] is either 0 or 1.\\nThere is at least one 0 in mat.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/diameter-of-binary-tree",
        "Title": "Diameter of Binary Tree ",
        "Description": "b'Given the root of a binary tree, return the length of the diameter of the tree.\\nThe diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.\\nThe length of a path between two nodes is represented by the number of edges between them.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [1,2,3,4,5]\\nOutput: 3\\nExplanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3].\\n\\nExample 2:\\nInput: root = [1,2]\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [1, 104].\\n-100 <= Node.val <= 100\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/output-contest-matches",
        "Title": "Output Contest Matches ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/boundary-of-binary-tree",
        "Title": "Boundary of Binary Tree ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/remove-boxes",
        "Title": "Remove Boxes ",
        "Description": "b'You are given several boxes with different colors represented by different positive numbers.\\nYou may experience several rounds to remove boxes until there is no box left. Each time you can choose some continuous boxes with the same color (i.e., composed of k boxes, k >= 1), remove them and get k * k points.\\nReturn the maximum points you can get.\\n\\xc2\\xa0\\nExample 1:\\nInput: boxes = [1,3,2,2,2,3,4,3,1]\\nOutput: 23\\nExplanation:\\n[1, 3, 2, 2, 2, 3, 4, 3, 1] \\n----> [1, 3, 3, 4, 3, 1] (3*3=9 points) \\n----> [1, 3, 3, 3, 1] (1*1=1 points) \\n----> [1, 1] (3*3=9 points) \\n----> [] (2*2=4 points)\\n\\nExample 2:\\nInput: boxes = [1,1,1]\\nOutput: 9\\n\\nExample 3:\\nInput: boxes = [1]\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= boxes.length <= 100\\n1 <= boxes[i]\\xc2\\xa0<= 100\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/number-of-provinces",
        "Title": "Number of Provinces ",
        "Description": "b'There are n cities. Some of them are connected, while some are not. If city a is connected directly with city b, and city b is connected directly with city c, then city a is connected indirectly with city c.\\nA province is a group of directly or indirectly connected cities and no other cities outside of the group.\\nYou are given an n x n matrix isConnected where isConnected[i][j] = 1 if the ith city and the jth city are directly connected, and isConnected[i][j] = 0 otherwise.\\nReturn the total number of provinces.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: isConnected = [[1,1,0],[1,1,0],[0,0,1]]\\nOutput: 2\\n\\nExample 2:\\n\\nInput: isConnected = [[1,0,0],[0,1,0],[0,0,1]]\\nOutput: 3\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 200\\nn == isConnected.length\\nn == isConnected[i].length\\nisConnected[i][j] is 1 or 0.\\nisConnected[i][i] == 1\\nisConnected[i][j] == isConnected[j][i]\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/split-array-with-equal-sum",
        "Title": "Split Array with Equal Sum ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/binary-tree-longest-consecutive-sequence-ii",
        "Title": "Binary Tree Longest Consecutive Sequence II ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/game-play-analysis-iv",
        "Title": "Game Play Analysis IV ",
        "Description": ""
    }
]